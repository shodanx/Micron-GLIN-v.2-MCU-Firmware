
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08009a28  08009a28  00019a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb0  08009fb0  00020610  2**0
                  CONTENTS
  4 .ARM          00000008  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb8  08009fb8  00020610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fbc  08009fbc  00019fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000610  20000000  08009fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000610  0800a5d0  00020610  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001900  0800a5d0  00021900  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020610  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f8a  00000000  00000000  00020639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005432  00000000  00000000  000455c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e5da  00000000  00000000  0004a9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00058fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022a0  00000000  00000000  00059ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186e2  00000000  00000000  0005bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a462  00000000  00000000  00074622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007d12e  00000000  00000000  0008ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010bbb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003790  00000000  00000000  0010bc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000610 	.word	0x20000610
 800015c:	00000000 	.word	0x00000000
 8000160:	08009a10 	.word	0x08009a10

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000614 	.word	0x20000614
 800017c:	08009a10 	.word	0x08009a10

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	; 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	bf28      	it	cs
 8000bec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf0:	d2ed      	bcs.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_fmul>:
 8000d4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d54:	bf1e      	ittt	ne
 8000d56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5a:	ea92 0f0c 	teqne	r2, ip
 8000d5e:	ea93 0f0c 	teqne	r3, ip
 8000d62:	d06f      	beq.n	8000e44 <__aeabi_fmul+0xf8>
 8000d64:	441a      	add	r2, r3
 8000d66:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6a:	0240      	lsls	r0, r0, #9
 8000d6c:	bf18      	it	ne
 8000d6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d72:	d01e      	beq.n	8000db2 <__aeabi_fmul+0x66>
 8000d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d80:	fba0 3101 	umull	r3, r1, r0, r1
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d8c:	bf3e      	ittt	cc
 8000d8e:	0049      	lslcc	r1, r1, #1
 8000d90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d94:	005b      	lslcc	r3, r3, #1
 8000d96:	ea40 0001 	orr.w	r0, r0, r1
 8000d9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9e:	2afd      	cmp	r2, #253	; 0xfd
 8000da0:	d81d      	bhi.n	8000dde <__aeabi_fmul+0x92>
 8000da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000daa:	bf08      	it	eq
 8000dac:	f020 0001 	biceq.w	r0, r0, #1
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dba:	bf08      	it	eq
 8000dbc:	0249      	lsleq	r1, r1, #9
 8000dbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc6:	3a7f      	subs	r2, #127	; 0x7f
 8000dc8:	bfc2      	ittt	gt
 8000dca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd2:	4770      	bxgt	lr
 8000dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	dc5d      	bgt.n	8000e9c <__aeabi_fmul+0x150>
 8000de0:	f112 0f19 	cmn.w	r2, #25
 8000de4:	bfdc      	itt	le
 8000de6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dea:	4770      	bxle	lr
 8000dec:	f1c2 0200 	rsb	r2, r2, #0
 8000df0:	0041      	lsls	r1, r0, #1
 8000df2:	fa21 f102 	lsr.w	r1, r1, r2
 8000df6:	f1c2 0220 	rsb	r2, r2, #32
 8000dfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e02:	f140 0000 	adc.w	r0, r0, #0
 8000e06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0a:	bf08      	it	eq
 8000e0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e10:	4770      	bx	lr
 8000e12:	f092 0f00 	teq	r2, #0
 8000e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0040      	lsleq	r0, r0, #1
 8000e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e22:	3a01      	subeq	r2, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xce>
 8000e26:	ea40 000c 	orr.w	r0, r0, ip
 8000e2a:	f093 0f00 	teq	r3, #0
 8000e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0049      	lsleq	r1, r1, #1
 8000e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3a:	3b01      	subeq	r3, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e3e:	ea41 010c 	orr.w	r1, r1, ip
 8000e42:	e78f      	b.n	8000d64 <__aeabi_fmul+0x18>
 8000e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	bf18      	it	ne
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d00a      	beq.n	8000e6a <__aeabi_fmul+0x11e>
 8000e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e58:	bf18      	it	ne
 8000e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5e:	d1d8      	bne.n	8000e12 <__aeabi_fmul+0xc6>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	bf17      	itett	ne
 8000e70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e74:	4608      	moveq	r0, r1
 8000e76:	f091 0f00 	teqne	r1, #0
 8000e7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7e:	d014      	beq.n	8000eaa <__aeabi_fmul+0x15e>
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d101      	bne.n	8000e8a <__aeabi_fmul+0x13e>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d10f      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e8a:	ea93 0f0c 	teq	r3, ip
 8000e8e:	d103      	bne.n	8000e98 <__aeabi_fmul+0x14c>
 8000e90:	024b      	lsls	r3, r1, #9
 8000e92:	bf18      	it	ne
 8000e94:	4608      	movne	r0, r1
 8000e96:	d108      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	4770      	bx	lr
 8000eaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fdiv>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d069      	beq.n	8000fa0 <__aeabi_fdiv+0xec>
 8000ecc:	eba2 0203 	sub.w	r2, r2, r3
 8000ed0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed4:	0249      	lsls	r1, r1, #9
 8000ed6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eda:	d037      	beq.n	8000f4c <__aeabi_fdiv+0x98>
 8000edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eec:	428b      	cmp	r3, r1
 8000eee:	bf38      	it	cc
 8000ef0:	005b      	lslcc	r3, r3, #1
 8000ef2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efa:	428b      	cmp	r3, r1
 8000efc:	bf24      	itt	cs
 8000efe:	1a5b      	subcs	r3, r3, r1
 8000f00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f16:	bf24      	itt	cs
 8000f18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	bf18      	it	ne
 8000f32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f36:	d1e0      	bne.n	8000efa <__aeabi_fdiv+0x46>
 8000f38:	2afd      	cmp	r2, #253	; 0xfd
 8000f3a:	f63f af50 	bhi.w	8000dde <__aeabi_fmul+0x92>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f44:	bf08      	it	eq
 8000f46:	f020 0001 	biceq.w	r0, r0, #1
 8000f4a:	4770      	bx	lr
 8000f4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f54:	327f      	adds	r2, #127	; 0x7f
 8000f56:	bfc2      	ittt	gt
 8000f58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f60:	4770      	bxgt	lr
 8000f62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	e737      	b.n	8000dde <__aeabi_fmul+0x92>
 8000f6e:	f092 0f00 	teq	r2, #0
 8000f72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0040      	lsleq	r0, r0, #1
 8000f7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7e:	3a01      	subeq	r2, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xc2>
 8000f82:	ea40 000c 	orr.w	r0, r0, ip
 8000f86:	f093 0f00 	teq	r3, #0
 8000f8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0049      	lsleq	r1, r1, #1
 8000f92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f96:	3b01      	subeq	r3, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xda>
 8000f9a:	ea41 010c 	orr.w	r1, r1, ip
 8000f9e:	e795      	b.n	8000ecc <__aeabi_fdiv+0x18>
 8000fa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d108      	bne.n	8000fbc <__aeabi_fdiv+0x108>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	f47f af7d 	bne.w	8000eaa <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	f47f af70 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e776      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	d104      	bne.n	8000fcc <__aeabi_fdiv+0x118>
 8000fc2:	024b      	lsls	r3, r1, #9
 8000fc4:	f43f af4c 	beq.w	8000e60 <__aeabi_fmul+0x114>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e76e      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1ca      	bne.n	8000f6e <__aeabi_fdiv+0xba>
 8000fd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fdc:	f47f af5c 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fe0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe4:	f47f af3c 	bne.w	8000e60 <__aeabi_fmul+0x114>
 8000fe8:	e75f      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fea:	bf00      	nop

08000fec <__gesf2>:
 8000fec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff0:	e006      	b.n	8001000 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__lesf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	e002      	b.n	8001000 <__cmpsf2+0x4>
 8000ffa:	bf00      	nop

08000ffc <__cmpsf2>:
 8000ffc:	f04f 0c01 	mov.w	ip, #1
 8001000:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001004:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	bf18      	it	ne
 8001012:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001016:	d011      	beq.n	800103c <__cmpsf2+0x40>
 8001018:	b001      	add	sp, #4
 800101a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101e:	bf18      	it	ne
 8001020:	ea90 0f01 	teqne	r0, r1
 8001024:	bf58      	it	pl
 8001026:	ebb2 0003 	subspl.w	r0, r2, r3
 800102a:	bf88      	it	hi
 800102c:	17c8      	asrhi	r0, r1, #31
 800102e:	bf38      	it	cc
 8001030:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001034:	bf18      	it	ne
 8001036:	f040 0001 	orrne.w	r0, r0, #1
 800103a:	4770      	bx	lr
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	d102      	bne.n	8001048 <__cmpsf2+0x4c>
 8001042:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001046:	d105      	bne.n	8001054 <__cmpsf2+0x58>
 8001048:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800104c:	d1e4      	bne.n	8001018 <__cmpsf2+0x1c>
 800104e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001052:	d0e1      	beq.n	8001018 <__cmpsf2+0x1c>
 8001054:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__aeabi_cfrcmple>:
 800105c:	4684      	mov	ip, r0
 800105e:	4608      	mov	r0, r1
 8001060:	4661      	mov	r1, ip
 8001062:	e7ff      	b.n	8001064 <__aeabi_cfcmpeq>

08001064 <__aeabi_cfcmpeq>:
 8001064:	b50f      	push	{r0, r1, r2, r3, lr}
 8001066:	f7ff ffc9 	bl	8000ffc <__cmpsf2>
 800106a:	2800      	cmp	r0, #0
 800106c:	bf48      	it	mi
 800106e:	f110 0f00 	cmnmi.w	r0, #0
 8001072:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001074 <__aeabi_fcmpeq>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff fff4 	bl	8001064 <__aeabi_cfcmpeq>
 800107c:	bf0c      	ite	eq
 800107e:	2001      	moveq	r0, #1
 8001080:	2000      	movne	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmplt>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffea 	bl	8001064 <__aeabi_cfcmpeq>
 8001090:	bf34      	ite	cc
 8001092:	2001      	movcc	r0, #1
 8001094:	2000      	movcs	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmple>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffe0 	bl	8001064 <__aeabi_cfcmpeq>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpge>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffd2 	bl	800105c <__aeabi_cfrcmple>
 80010b8:	bf94      	ite	ls
 80010ba:	2001      	movls	r0, #1
 80010bc:	2000      	movhi	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmpgt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffc8 	bl	800105c <__aeabi_cfrcmple>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_f2uiz>:
 80010d8:	0042      	lsls	r2, r0, #1
 80010da:	d20e      	bcs.n	80010fa <__aeabi_f2uiz+0x22>
 80010dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e0:	d30b      	bcc.n	80010fa <__aeabi_f2uiz+0x22>
 80010e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ea:	d409      	bmi.n	8001100 <__aeabi_f2uiz+0x28>
 80010ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2uiz+0x32>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d102      	bne.n	8001110 <__aeabi_f2uiz+0x38>
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	4770      	bx	lr
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <__aeabi_uldivmod>:
 8001118:	b953      	cbnz	r3, 8001130 <__aeabi_uldivmod+0x18>
 800111a:	b94a      	cbnz	r2, 8001130 <__aeabi_uldivmod+0x18>
 800111c:	2900      	cmp	r1, #0
 800111e:	bf08      	it	eq
 8001120:	2800      	cmpeq	r0, #0
 8001122:	bf1c      	itt	ne
 8001124:	f04f 31ff 	movne.w	r1, #4294967295
 8001128:	f04f 30ff 	movne.w	r0, #4294967295
 800112c:	f000 b9a6 	b.w	800147c <__aeabi_idiv0>
 8001130:	f1ad 0c08 	sub.w	ip, sp, #8
 8001134:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001138:	f000 f83e 	bl	80011b8 <__udivmoddi4>
 800113c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001144:	b004      	add	sp, #16
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	460c      	mov	r4, r1
 800114c:	4605      	mov	r5, r0
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	f7ff fc53 	bl	8000a00 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff f9c9 	bl	800051c <__aeabi_dmul>
 800118a:	f7ff fc61 	bl	8000a50 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff f9c0 	bl	800051c <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f802 	bl	80001ac <__aeabi_dsub>
 80011a8:	f7ff fc52 	bl	8000a50 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	9e08      	ldr	r6, [sp, #32]
 80011be:	460d      	mov	r5, r1
 80011c0:	4604      	mov	r4, r0
 80011c2:	468e      	mov	lr, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 8083 	bne.w	80012d0 <__udivmoddi4+0x118>
 80011ca:	428a      	cmp	r2, r1
 80011cc:	4617      	mov	r7, r2
 80011ce:	d947      	bls.n	8001260 <__udivmoddi4+0xa8>
 80011d0:	fab2 f382 	clz	r3, r2
 80011d4:	b14b      	cbz	r3, 80011ea <__udivmoddi4+0x32>
 80011d6:	f1c3 0120 	rsb	r1, r3, #32
 80011da:	fa05 fe03 	lsl.w	lr, r5, r3
 80011de:	fa20 f101 	lsr.w	r1, r0, r1
 80011e2:	409f      	lsls	r7, r3
 80011e4:	ea41 0e0e 	orr.w	lr, r1, lr
 80011e8:	409c      	lsls	r4, r3
 80011ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011ee:	fbbe fcf8 	udiv	ip, lr, r8
 80011f2:	fa1f f987 	uxth.w	r9, r7
 80011f6:	fb08 e21c 	mls	r2, r8, ip, lr
 80011fa:	fb0c f009 	mul.w	r0, ip, r9
 80011fe:	0c21      	lsrs	r1, r4, #16
 8001200:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001204:	4290      	cmp	r0, r2
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x66>
 8001208:	18ba      	adds	r2, r7, r2
 800120a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800120e:	f080 8118 	bcs.w	8001442 <__udivmoddi4+0x28a>
 8001212:	4290      	cmp	r0, r2
 8001214:	f240 8115 	bls.w	8001442 <__udivmoddi4+0x28a>
 8001218:	f1ac 0c02 	sub.w	ip, ip, #2
 800121c:	443a      	add	r2, r7
 800121e:	1a12      	subs	r2, r2, r0
 8001220:	fbb2 f0f8 	udiv	r0, r2, r8
 8001224:	fb08 2210 	mls	r2, r8, r0, r2
 8001228:	fb00 f109 	mul.w	r1, r0, r9
 800122c:	b2a4      	uxth	r4, r4
 800122e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001232:	42a1      	cmp	r1, r4
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x92>
 8001236:	193c      	adds	r4, r7, r4
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 8103 	bcs.w	8001446 <__udivmoddi4+0x28e>
 8001240:	42a1      	cmp	r1, r4
 8001242:	f240 8100 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001246:	3802      	subs	r0, #2
 8001248:	443c      	add	r4, r7
 800124a:	1a64      	subs	r4, r4, r1
 800124c:	2100      	movs	r1, #0
 800124e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa4>
 8001254:	2200      	movs	r2, #0
 8001256:	40dc      	lsrs	r4, r3
 8001258:	e9c6 4200 	strd	r4, r2, [r6]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	b902      	cbnz	r2, 8001264 <__udivmoddi4+0xac>
 8001262:	deff      	udf	#255	; 0xff
 8001264:	fab2 f382 	clz	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d14f      	bne.n	800130c <__udivmoddi4+0x154>
 800126c:	1a8d      	subs	r5, r1, r2
 800126e:	2101      	movs	r1, #1
 8001270:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001274:	fa1f f882 	uxth.w	r8, r2
 8001278:	fbb5 fcfe 	udiv	ip, r5, lr
 800127c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001280:	fb08 f00c 	mul.w	r0, r8, ip
 8001284:	0c22      	lsrs	r2, r4, #16
 8001286:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800128a:	42a8      	cmp	r0, r5
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0xe6>
 800128e:	197d      	adds	r5, r7, r5
 8001290:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0xe4>
 8001296:	42a8      	cmp	r0, r5
 8001298:	f200 80e9 	bhi.w	800146e <__udivmoddi4+0x2b6>
 800129c:	4694      	mov	ip, r2
 800129e:	1a2d      	subs	r5, r5, r0
 80012a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80012a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80012a8:	fb08 f800 	mul.w	r8, r8, r0
 80012ac:	b2a4      	uxth	r4, r4
 80012ae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b2:	45a0      	cmp	r8, r4
 80012b4:	d907      	bls.n	80012c6 <__udivmoddi4+0x10e>
 80012b6:	193c      	adds	r4, r7, r4
 80012b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x10c>
 80012be:	45a0      	cmp	r8, r4
 80012c0:	f200 80d9 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012c4:	4610      	mov	r0, r2
 80012c6:	eba4 0408 	sub.w	r4, r4, r8
 80012ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ce:	e7c0      	b.n	8001252 <__udivmoddi4+0x9a>
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d908      	bls.n	80012e6 <__udivmoddi4+0x12e>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	f000 80b1 	beq.w	800143c <__udivmoddi4+0x284>
 80012da:	2100      	movs	r1, #0
 80012dc:	e9c6 0500 	strd	r0, r5, [r6]
 80012e0:	4608      	mov	r0, r1
 80012e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e6:	fab3 f183 	clz	r1, r3
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d14b      	bne.n	8001386 <__udivmoddi4+0x1ce>
 80012ee:	42ab      	cmp	r3, r5
 80012f0:	d302      	bcc.n	80012f8 <__udivmoddi4+0x140>
 80012f2:	4282      	cmp	r2, r0
 80012f4:	f200 80b9 	bhi.w	800146a <__udivmoddi4+0x2b2>
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	eb65 0303 	sbc.w	r3, r5, r3
 80012fe:	2001      	movs	r0, #1
 8001300:	469e      	mov	lr, r3
 8001302:	2e00      	cmp	r6, #0
 8001304:	d0aa      	beq.n	800125c <__udivmoddi4+0xa4>
 8001306:	e9c6 4e00 	strd	r4, lr, [r6]
 800130a:	e7a7      	b.n	800125c <__udivmoddi4+0xa4>
 800130c:	409f      	lsls	r7, r3
 800130e:	f1c3 0220 	rsb	r2, r3, #32
 8001312:	40d1      	lsrs	r1, r2
 8001314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001318:	fbb1 f0fe 	udiv	r0, r1, lr
 800131c:	fa1f f887 	uxth.w	r8, r7
 8001320:	fb0e 1110 	mls	r1, lr, r0, r1
 8001324:	fa24 f202 	lsr.w	r2, r4, r2
 8001328:	409d      	lsls	r5, r3
 800132a:	fb00 fc08 	mul.w	ip, r0, r8
 800132e:	432a      	orrs	r2, r5
 8001330:	0c15      	lsrs	r5, r2, #16
 8001332:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001336:	45ac      	cmp	ip, r5
 8001338:	fa04 f403 	lsl.w	r4, r4, r3
 800133c:	d909      	bls.n	8001352 <__udivmoddi4+0x19a>
 800133e:	197d      	adds	r5, r7, r5
 8001340:	f100 31ff 	add.w	r1, r0, #4294967295
 8001344:	f080 808f 	bcs.w	8001466 <__udivmoddi4+0x2ae>
 8001348:	45ac      	cmp	ip, r5
 800134a:	f240 808c 	bls.w	8001466 <__udivmoddi4+0x2ae>
 800134e:	3802      	subs	r0, #2
 8001350:	443d      	add	r5, r7
 8001352:	eba5 050c 	sub.w	r5, r5, ip
 8001356:	fbb5 f1fe 	udiv	r1, r5, lr
 800135a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800135e:	fb01 f908 	mul.w	r9, r1, r8
 8001362:	b295      	uxth	r5, r2
 8001364:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001368:	45a9      	cmp	r9, r5
 800136a:	d907      	bls.n	800137c <__udivmoddi4+0x1c4>
 800136c:	197d      	adds	r5, r7, r5
 800136e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001372:	d274      	bcs.n	800145e <__udivmoddi4+0x2a6>
 8001374:	45a9      	cmp	r9, r5
 8001376:	d972      	bls.n	800145e <__udivmoddi4+0x2a6>
 8001378:	3902      	subs	r1, #2
 800137a:	443d      	add	r5, r7
 800137c:	eba5 0509 	sub.w	r5, r5, r9
 8001380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001384:	e778      	b.n	8001278 <__udivmoddi4+0xc0>
 8001386:	f1c1 0720 	rsb	r7, r1, #32
 800138a:	408b      	lsls	r3, r1
 800138c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001390:	ea4c 0c03 	orr.w	ip, ip, r3
 8001394:	fa25 f407 	lsr.w	r4, r5, r7
 8001398:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800139c:	fbb4 f9fe 	udiv	r9, r4, lr
 80013a0:	fa1f f88c 	uxth.w	r8, ip
 80013a4:	fb0e 4419 	mls	r4, lr, r9, r4
 80013a8:	fa20 f307 	lsr.w	r3, r0, r7
 80013ac:	fb09 fa08 	mul.w	sl, r9, r8
 80013b0:	408d      	lsls	r5, r1
 80013b2:	431d      	orrs	r5, r3
 80013b4:	0c2b      	lsrs	r3, r5, #16
 80013b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013ba:	45a2      	cmp	sl, r4
 80013bc:	fa02 f201 	lsl.w	r2, r2, r1
 80013c0:	fa00 f301 	lsl.w	r3, r0, r1
 80013c4:	d909      	bls.n	80013da <__udivmoddi4+0x222>
 80013c6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ca:	f109 30ff 	add.w	r0, r9, #4294967295
 80013ce:	d248      	bcs.n	8001462 <__udivmoddi4+0x2aa>
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	d946      	bls.n	8001462 <__udivmoddi4+0x2aa>
 80013d4:	f1a9 0902 	sub.w	r9, r9, #2
 80013d8:	4464      	add	r4, ip
 80013da:	eba4 040a 	sub.w	r4, r4, sl
 80013de:	fbb4 f0fe 	udiv	r0, r4, lr
 80013e2:	fb0e 4410 	mls	r4, lr, r0, r4
 80013e6:	fb00 fa08 	mul.w	sl, r0, r8
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013f0:	45a2      	cmp	sl, r4
 80013f2:	d908      	bls.n	8001406 <__udivmoddi4+0x24e>
 80013f4:	eb1c 0404 	adds.w	r4, ip, r4
 80013f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013fc:	d22d      	bcs.n	800145a <__udivmoddi4+0x2a2>
 80013fe:	45a2      	cmp	sl, r4
 8001400:	d92b      	bls.n	800145a <__udivmoddi4+0x2a2>
 8001402:	3802      	subs	r0, #2
 8001404:	4464      	add	r4, ip
 8001406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800140a:	fba0 8902 	umull	r8, r9, r0, r2
 800140e:	eba4 040a 	sub.w	r4, r4, sl
 8001412:	454c      	cmp	r4, r9
 8001414:	46c6      	mov	lr, r8
 8001416:	464d      	mov	r5, r9
 8001418:	d319      	bcc.n	800144e <__udivmoddi4+0x296>
 800141a:	d016      	beq.n	800144a <__udivmoddi4+0x292>
 800141c:	b15e      	cbz	r6, 8001436 <__udivmoddi4+0x27e>
 800141e:	ebb3 020e 	subs.w	r2, r3, lr
 8001422:	eb64 0405 	sbc.w	r4, r4, r5
 8001426:	fa04 f707 	lsl.w	r7, r4, r7
 800142a:	fa22 f301 	lsr.w	r3, r2, r1
 800142e:	431f      	orrs	r7, r3
 8001430:	40cc      	lsrs	r4, r1
 8001432:	e9c6 7400 	strd	r7, r4, [r6]
 8001436:	2100      	movs	r1, #0
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143c:	4631      	mov	r1, r6
 800143e:	4630      	mov	r0, r6
 8001440:	e70c      	b.n	800125c <__udivmoddi4+0xa4>
 8001442:	468c      	mov	ip, r1
 8001444:	e6eb      	b.n	800121e <__udivmoddi4+0x66>
 8001446:	4610      	mov	r0, r2
 8001448:	e6ff      	b.n	800124a <__udivmoddi4+0x92>
 800144a:	4543      	cmp	r3, r8
 800144c:	d2e6      	bcs.n	800141c <__udivmoddi4+0x264>
 800144e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001452:	eb69 050c 	sbc.w	r5, r9, ip
 8001456:	3801      	subs	r0, #1
 8001458:	e7e0      	b.n	800141c <__udivmoddi4+0x264>
 800145a:	4628      	mov	r0, r5
 800145c:	e7d3      	b.n	8001406 <__udivmoddi4+0x24e>
 800145e:	4611      	mov	r1, r2
 8001460:	e78c      	b.n	800137c <__udivmoddi4+0x1c4>
 8001462:	4681      	mov	r9, r0
 8001464:	e7b9      	b.n	80013da <__udivmoddi4+0x222>
 8001466:	4608      	mov	r0, r1
 8001468:	e773      	b.n	8001352 <__udivmoddi4+0x19a>
 800146a:	4608      	mov	r0, r1
 800146c:	e749      	b.n	8001302 <__udivmoddi4+0x14a>
 800146e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001472:	443d      	add	r5, r7
 8001474:	e713      	b.n	800129e <__udivmoddi4+0xe6>
 8001476:	3802      	subs	r0, #2
 8001478:	443c      	add	r4, r7
 800147a:	e724      	b.n	80012c6 <__udivmoddi4+0x10e>

0800147c <__aeabi_idiv0>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	4604      	mov	r4, r0
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 8001484:	88c6      	ldrh	r6, [r0, #6]
 8001486:	8883      	ldrh	r3, [r0, #4]
{
 8001488:	4615      	mov	r5, r2
	if (total < 0)
 800148a:	1b9b      	subs	r3, r3, r6
		total += (2 * circ_buf->size);
 800148c:	bf48      	it	mi
 800148e:	8922      	ldrhmi	r2, [r4, #8]
{
 8001490:	4608      	mov	r0, r1
		total += (2 * circ_buf->size);
 8001492:	bf48      	it	mi
 8001494:	eb03 0342 	addmi.w	r3, r3, r2, lsl #1

	if (total == 0)
 8001498:	b1d3      	cbz	r3, 80014d0 <__circ_gbuf_pop+0x50>
		return -1; // Empty

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
			* circ_buf->element_size);

	if (elem)
 800149a:	b159      	cbz	r1, 80014b4 <__circ_gbuf_pop+0x34>
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 800149c:	8923      	ldrh	r3, [r4, #8]
			* circ_buf->element_size);
 800149e:	8962      	ldrh	r2, [r4, #10]
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80014a4:	fb03 6611 	mls	r6, r3, r1, r6
 80014a8:	6821      	ldr	r1, [r4, #0]
 80014aa:	b2b6      	uxth	r6, r6
		memcpy(elem, tail, circ_buf->element_size);
 80014ac:	fb02 1106 	mla	r1, r2, r6, r1
 80014b0:	f005 fbd8 	bl	8006c64 <memcpy>

	if (!read_only) {
 80014b4:	b955      	cbnz	r5, 80014cc <__circ_gbuf_pop+0x4c>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 80014b6:	88e3      	ldrh	r3, [r4, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 80014b8:	8922      	ldrh	r2, [r4, #8]
		circ_buf->pop_count++;
 80014ba:	3301      	adds	r3, #1
 80014bc:	b29b      	uxth	r3, r3
		if (circ_buf->pop_count >= (2*circ_buf->size))
 80014be:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
		circ_buf->pop_count++;
 80014c2:	80e3      	strh	r3, [r4, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 80014c4:	db02      	blt.n	80014cc <__circ_gbuf_pop+0x4c>
			circ_buf->pop_count = 0;
	}
	return 0;
 80014c6:	4628      	mov	r0, r5
			circ_buf->pop_count = 0;
 80014c8:	80e5      	strh	r5, [r4, #6]
}
 80014ca:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 80014cc:	2000      	movs	r0, #0
}
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
		return -1; // Empty
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
 80014d6:	bf00      	nop

080014d8 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	4604      	mov	r4, r0
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 80014dc:	8880      	ldrh	r0, [r0, #4]
 80014de:	88e2      	ldrh	r2, [r4, #6]
	if (total < 0)
		total += (2 * circ_buf->size);
 80014e0:	8925      	ldrh	r5, [r4, #8]
	if (total < 0)
 80014e2:	1a82      	subs	r2, r0, r2
		total += (2 * circ_buf->size);
 80014e4:	bf48      	it	mi
 80014e6:	eb02 0245 	addmi.w	r2, r2, r5, lsl #1

	if (total >=  circ_buf->size)
 80014ea:	42aa      	cmp	r2, r5
 80014ec:	da16      	bge.n	800151c <__circ_gbuf_push+0x44>
		return -1; // Full

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80014ee:	fbb0 f3f5 	udiv	r3, r0, r5
 80014f2:	fb05 0313 	mls	r3, r5, r3, r0
			* circ_buf->element_size );
 80014f6:	8962      	ldrh	r2, [r4, #10]
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 80014f8:	6820      	ldr	r0, [r4, #0]
 80014fa:	b29b      	uxth	r3, r3
	memcpy(head, elem, circ_buf->element_size);
 80014fc:	fb02 0003 	mla	r0, r2, r3, r0
 8001500:	f005 fbb0 	bl	8006c64 <memcpy>
	circ_buf->push_count++;
 8001504:	88a3      	ldrh	r3, [r4, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 8001506:	8922      	ldrh	r2, [r4, #8]
	circ_buf->push_count++;
 8001508:	3301      	adds	r3, #1
 800150a:	b29b      	uxth	r3, r3
	if (circ_buf->push_count >= (2*circ_buf->size))
 800150c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
		circ_buf->push_count = 0;
 8001510:	f04f 0000 	mov.w	r0, #0
	circ_buf->push_count++;
 8001514:	80a3      	strh	r3, [r4, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 8001516:	db00      	blt.n	800151a <__circ_gbuf_push+0x42>
		circ_buf->push_count = 0;
 8001518:	80a0      	strh	r0, [r4, #4]
	return 0;
}
 800151a:	bd38      	pop	{r3, r4, r5, pc}
		return -1; // Full
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001520:	bd38      	pop	{r3, r4, r5, pc}
 8001522:	bf00      	nop

08001524 <DAC_Write>:
#include "dac_and_dds_func.h"

//==============================================================================================
void DAC_Write(uint32_t value)
{
 8001524:	b538      	push	{r3, r4, r5, lr}

	DAC_tx_buffer=0x01000000; // Write DAC-DATA
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <DAC_Write+0x40>)

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001528:	4c0f      	ldr	r4, [pc, #60]	; (8001568 <DAC_Write+0x44>)
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 800152a:	ea03 1300 	and.w	r3, r3, r0, lsl #4
 800152e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);

	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001532:	4d0e      	ldr	r5, [pc, #56]	; (800156c <DAC_Write+0x48>)
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <DAC_Write+0x4c>)
	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001536:	0c19      	lsrs	r1, r3, #16
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001538:	4628      	mov	r0, r5
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 800153a:	6013      	str	r3, [r2, #0]
	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800153c:	8021      	strh	r1, [r4, #0]
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2110      	movs	r1, #16
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001542:	8063      	strh	r3, [r4, #2]
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001544:	f001 fad2 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001548:	2302      	movs	r3, #2
 800154a:	4621      	mov	r1, r4
 800154c:	461a      	mov	r2, r3
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <DAC_Write+0x50>)
 8001550:	f002 fecc 	bl	80042ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001554:	4628      	mov	r0, r5
}
 8001556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2110      	movs	r1, #16
 800155e:	f001 bac5 	b.w	8002aec <HAL_GPIO_WritePin>
 8001562:	bf00      	nop
 8001564:	00fffff0 	.word	0x00fffff0
 8001568:	2000086c 	.word	0x2000086c
 800156c:	40020000 	.word	0x40020000
 8001570:	20000870 	.word	0x20000870
 8001574:	20000924 	.word	0x20000924

08001578 <DAC_Write_FAST>:

//==============================================================================================
void DAC_Write_FAST(void)
{
 8001578:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800157a:	4c09      	ldr	r4, [pc, #36]	; (80015a0 <DAC_Write_FAST+0x28>)
 800157c:	2200      	movs	r2, #0
 800157e:	4620      	mov	r0, r4
 8001580:	2110      	movs	r1, #16
 8001582:	f001 fab3 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 8001586:	2302      	movs	r3, #2
 8001588:	4906      	ldr	r1, [pc, #24]	; (80015a4 <DAC_Write_FAST+0x2c>)
 800158a:	461a      	mov	r2, r3
 800158c:	4806      	ldr	r0, [pc, #24]	; (80015a8 <DAC_Write_FAST+0x30>)
 800158e:	f002 fead 	bl	80042ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001592:	4620      	mov	r0, r4
}
 8001594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2110      	movs	r1, #16
 800159c:	f001 baa6 	b.w	8002aec <HAL_GPIO_WritePin>
 80015a0:	40020000 	.word	0x40020000
 80015a4:	2000086c 	.word	0x2000086c
 80015a8:	20000924 	.word	0x20000924

080015ac <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 80015ac:	b570      	push	{r4, r5, r6, lr}

	DAC_tx_buffer=0x02000000; // Write CONFIG1
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80015ae:	4a24      	ldr	r2, [pc, #144]	; (8001640 <DAC_SendInit+0x94>)

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80015b0:	4c24      	ldr	r4, [pc, #144]	; (8001644 <DAC_SendInit+0x98>)
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80015b2:	7993      	ldrb	r3, [r2, #6]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80015b4:	7951      	ldrb	r1, [r2, #5]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80015b6:	7915      	ldrb	r5, [r2, #4]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80015b8:	029b      	lsls	r3, r3, #10
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80015ba:	02c9      	lsls	r1, r1, #11
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80015bc:	78d0      	ldrb	r0, [r2, #3]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 80015be:	f401 6100 	and.w	r1, r1, #2048	; 0x800
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015c6:	430b      	orrs	r3, r1
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80015c8:	032d      	lsls	r5, r5, #12
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80015ca:	7891      	ldrb	r1, [r2, #2]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 80015cc:	f405 5580 	and.w	r5, r5, #4096	; 0x1000
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015d0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80015d4:	0340      	lsls	r0, r0, #13
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015d6:	442b      	add	r3, r5
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 80015d8:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80015dc:	0389      	lsls	r1, r1, #14
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 80015de:	7856      	ldrb	r6, [r2, #1]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015e0:	4403      	add	r3, r0
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 80015e2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015e6:	7815      	ldrb	r5, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 80015e8:	79d0      	ldrb	r0, [r2, #7]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015ea:	440b      	add	r3, r1
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 80015ec:	7a11      	ldrb	r1, [r2, #8]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 80015ee:	04b6      	lsls	r6, r6, #18
 80015f0:	f406 2640 	and.w	r6, r6, #786432	; 0xc0000
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015f4:	05ed      	lsls	r5, r5, #23
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 80015f6:	010a      	lsls	r2, r1, #4
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 80015f8:	0181      	lsls	r1, r0, #6
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 80015fa:	4433      	add	r3, r6
 80015fc:	f405 0000 	and.w	r0, r5, #8388608	; 0x800000
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 8001600:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001604:	f002 0210 	and.w	r2, r2, #16
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001608:	430a      	orrs	r2, r1
 800160a:	4403      	add	r3, r0
 800160c:	4413      	add	r3, r2
	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800160e:	4d0e      	ldr	r5, [pc, #56]	; (8001648 <DAC_SendInit+0x9c>)
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <DAC_SendInit+0xa0>)
	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001612:	0c19      	lsrs	r1, r3, #16
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001614:	4620      	mov	r0, r4
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001616:	6013      	str	r3, [r2, #0]
	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001618:	8029      	strh	r1, [r5, #0]
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2110      	movs	r1, #16
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 800161e:	806b      	strh	r3, [r5, #2]
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001620:	f001 fa64 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,5);
 8001624:	4629      	mov	r1, r5
 8001626:	2202      	movs	r2, #2
 8001628:	2305      	movs	r3, #5
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <DAC_SendInit+0xa4>)
 800162c:	f002 fe5e 	bl	80042ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001630:	4620      	mov	r0, r4

}
 8001632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001636:	2201      	movs	r2, #1
 8001638:	2110      	movs	r1, #16
 800163a:	f001 ba57 	b.w	8002aec <HAL_GPIO_WritePin>
 800163e:	bf00      	nop
 8001640:	20000860 	.word	0x20000860
 8001644:	40020000 	.word	0x40020000
 8001648:	2000086c 	.word	0x2000086c
 800164c:	20000870 	.word	0x20000870
 8001650:	20000924 	.word	0x20000924

08001654 <DDS_Init>:
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, count_tmp); // Back LDAC signal state
}

//==============================================================================================
void DDS_Init(void)
{
 8001654:	b570      	push	{r4, r5, r6, lr}
	uint16_t DDS_tx_buffer[6];

	DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed);
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <DDS_Init+0xc4>)
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <DDS_Init+0xc8>)
{
 800165a:	b084      	sub	sp, #16
	DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed);
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	6810      	ldr	r0, [r2, #0]
 8001660:	f7ff fc28 	bl	8000eb4 <__aeabi_fdiv>
 8001664:	4601      	mov	r1, r0
 8001666:	482e      	ldr	r0, [pc, #184]	; (8001720 <DDS_Init+0xcc>)
 8001668:	f7ff fc24 	bl	8000eb4 <__aeabi_fdiv>

	if((DDS_target_frequecny*256)>500000)
 800166c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
	DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed);
 8001670:	4605      	mov	r5, r0
	if((DDS_target_frequecny*256)>500000)
 8001672:	f7ff fb6b 	bl	8000d4c <__aeabi_fmul>
 8001676:	492b      	ldr	r1, [pc, #172]	; (8001724 <DDS_Init+0xd0>)
 8001678:	4604      	mov	r4, r0
 800167a:	f7ff fd23 	bl	80010c4 <__aeabi_fcmpgt>
 800167e:	2800      	cmp	r0, #0
 8001680:	d135      	bne.n	80016ee <DDS_Init+0x9a>
	{
		DDS_target_multipiller=(DDS_target_frequecny*256)/500000;
		DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed)/DDS_target_multipiller;
	} else DDS_target_multipiller = 1;
 8001682:	2601      	movs	r6, #1
	DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed);
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <DDS_Init+0xd4>)
 8001686:	601d      	str	r5, [r3, #0]
 8001688:	4a28      	ldr	r2, [pc, #160]	; (800172c <DDS_Init+0xd8>)

	float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*0xFFFFFFFF;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <DDS_Init+0xdc>)
 800168c:	6016      	str	r6, [r2, #0]
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff fc0f 	bl	8000eb4 <__aeabi_fdiv>
 8001696:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 800169a:	f7ff fb57 	bl	8000d4c <__aeabi_fmul>

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 800169e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016a2:	f8ad 3004 	strh.w	r3, [sp, #4]

	DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 80016a6:	f7ff fd17 	bl	80010d8 <__aeabi_f2uiz>
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;

	DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);

	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 80016aa:	f44f 4640 	mov.w	r6, #49152	; 0xc000
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 80016ae:	0e02      	lsrs	r2, r0, #24
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 80016b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 80016b4:	f3c0 2507 	ubfx	r5, r0, #8, #8
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 80016b8:	f502 524c 	add.w	r2, r2, #13056	; 0x3300
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 80016bc:	b2c0      	uxtb	r0, r0
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 80016be:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 80016c2:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 80016c6:	f8ad 2006 	strh.w	r2, [sp, #6]
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 80016ca:	f8ad 1008 	strh.w	r1, [sp, #8]

	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 80016ce:	2364      	movs	r3, #100	; 0x64
 80016d0:	2206      	movs	r2, #6
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 80016d2:	f505 5544 	add.w	r5, r5, #12544	; 0x3100
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 80016d6:	a901      	add	r1, sp, #4
 80016d8:	4816      	ldr	r0, [pc, #88]	; (8001734 <DDS_Init+0xe0>)
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 80016da:	f8ad 500a 	strh.w	r5, [sp, #10]
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 80016de:	f8ad 400c 	strh.w	r4, [sp, #12]
	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 80016e2:	f8ad 600e 	strh.w	r6, [sp, #14]
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 80016e6:	f002 fe01 	bl	80042ec <HAL_SPI_Transmit>

}
 80016ea:	b004      	add	sp, #16
 80016ec:	bd70      	pop	{r4, r5, r6, pc}
		DDS_target_multipiller=(DDS_target_frequecny*256)/500000;
 80016ee:	490d      	ldr	r1, [pc, #52]	; (8001724 <DDS_Init+0xd0>)
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7ff fbdf 	bl	8000eb4 <__aeabi_fdiv>
 80016f6:	f7ff fcef 	bl	80010d8 <__aeabi_f2uiz>
 80016fa:	4606      	mov	r6, r0
		DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed)/DDS_target_multipiller;
 80016fc:	f7ff face 	bl	8000c9c <__aeabi_ui2f>
 8001700:	4601      	mov	r1, r0
 8001702:	4628      	mov	r0, r5
 8001704:	f7ff fbd6 	bl	8000eb4 <__aeabi_fdiv>
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <DDS_Init+0xd4>)
 800170a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800170e:	6018      	str	r0, [r3, #0]
 8001710:	f7ff fb1c 	bl	8000d4c <__aeabi_fmul>
 8001714:	4604      	mov	r4, r0
 8001716:	e7b7      	b.n	8001688 <DDS_Init+0x34>
 8001718:	200008a0 	.word	0x200008a0
 800171c:	200008c4 	.word	0x200008c4
 8001720:	497ffff0 	.word	0x497ffff0
 8001724:	48f42400 	.word	0x48f42400
 8001728:	20000878 	.word	0x20000878
 800172c:	20000004 	.word	0x20000004
 8001730:	20000000 	.word	0x20000000
 8001734:	200008cc 	.word	0x200008cc

08001738 <DDS_prepare_to_tempcal>:

//==============================================================================================
void DDS_prepare_to_tempcal(void)
{
 8001738:	b510      	push	{r4, lr}
	uint16_t DDS_tx_buffer[6];

	DDS_target_frequecny=0.1;
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <DDS_prepare_to_tempcal+0x98>)

	float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*0xFFFFFFFF;
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <DDS_prepare_to_tempcal+0x9c>)
	DDS_target_frequecny=0.1;
 800173e:	4926      	ldr	r1, [pc, #152]	; (80017d8 <DDS_prepare_to_tempcal+0xa0>)
{
 8001740:	b084      	sub	sp, #16
	DDS_target_frequecny=0.1;
 8001742:	6011      	str	r1, [r2, #0]
	float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*0xFFFFFFFF;
 8001744:	4825      	ldr	r0, [pc, #148]	; (80017dc <DDS_prepare_to_tempcal+0xa4>)
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	f7ff fbb4 	bl	8000eb4 <__aeabi_fdiv>
 800174c:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8001750:	f7ff fafc 	bl	8000d4c <__aeabi_fmul>

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 8001754:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001758:	f8ad 3004 	strh.w	r3, [sp, #4]

	DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 800175c:	f7ff fcbc 	bl	80010d8 <__aeabi_f2uiz>
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;

	DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);

	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 8001760:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001764:	0e01      	lsrs	r1, r0, #24
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001766:	f3c0 4307 	ubfx	r3, r0, #16, #8
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 800176a:	f3c0 2207 	ubfx	r2, r0, #8, #8
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 800176e:	b2c0      	uxtb	r0, r0
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001770:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001774:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 8001778:	f502 5244 	add.w	r2, r2, #12544	; 0x3100
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 800177c:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001780:	f8ad 1006 	strh.w	r1, [sp, #6]
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 8001784:	f8ad 3008 	strh.w	r3, [sp, #8]

	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 8001788:	a901      	add	r1, sp, #4
 800178a:	2364      	movs	r3, #100	; 0x64
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 800178c:	f8ad 200a 	strh.w	r2, [sp, #10]
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 8001790:	f8ad 000c 	strh.w	r0, [sp, #12]
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 8001794:	2206      	movs	r2, #6
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <DDS_prepare_to_tempcal+0xa8>)
	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 8001798:	f8ad 400e 	strh.w	r4, [sp, #14]
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 800179c:	f002 fda6 	bl	80042ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 80017a0:	2200      	movs	r2, #0
 80017a2:	2108      	movs	r1, #8
 80017a4:	480f      	ldr	r0, [pc, #60]	; (80017e4 <DDS_prepare_to_tempcal+0xac>)
 80017a6:	f001 f9a1 	bl	8002aec <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(CPU_LDAC_GPIO_Port, CPU_LDAC_Pin)==GPIO_PIN_RESET); // Waiting LDAC become high
 80017aa:	4c0f      	ldr	r4, [pc, #60]	; (80017e8 <DDS_prepare_to_tempcal+0xb0>)
 80017ac:	2104      	movs	r1, #4
 80017ae:	4620      	mov	r0, r4
 80017b0:	f001 f996 	bl	8002ae0 <HAL_GPIO_ReadPin>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d0f9      	beq.n	80017ac <DDS_prepare_to_tempcal+0x74>

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 80017b8:	f44f 4478 	mov.w	r4, #63488	; 0xf800
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,100);
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	2201      	movs	r2, #1
 80017c0:	a901      	add	r1, sp, #4
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <DDS_prepare_to_tempcal+0xa8>)
	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 80017c4:	f8ad 4004 	strh.w	r4, [sp, #4]
	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,1,100);
 80017c8:	f002 fd90 	bl	80042ec <HAL_SPI_Transmit>

}
 80017cc:	b004      	add	sp, #16
 80017ce:	bd10      	pop	{r4, pc}
 80017d0:	20000878 	.word	0x20000878
 80017d4:	20000000 	.word	0x20000000
 80017d8:	3dcccccd 	.word	0x3dcccccd
 80017dc:	41cccccd 	.word	0x41cccccd
 80017e0:	200008cc 	.word	0x200008cc
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020000 	.word	0x40020000

080017ec <DAC_TEMP_CAL>:
{
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 80017ee:	2700      	movs	r7, #0
{
 80017f0:	b08d      	sub	sp, #52	; 0x34
	uint8_t OK[]="OK\n\r";
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <DAC_TEMP_CAL+0x118>)
	uint8_t run_cal[]="\r\nCalibration in progress..";
 80017f4:	4d44      	ldr	r5, [pc, #272]	; (8001908 <DAC_TEMP_CAL+0x11c>)
 80017f6:	ac05      	add	r4, sp, #20
	uint8_t OK[]="OK\n\r";
 80017f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017fc:	9003      	str	r0, [sp, #12]
 80017fe:	f88d 1010 	strb.w	r1, [sp, #16]
	uint8_t run_cal[]="\r\nCalibration in progress..";
 8001802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001806:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800180a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t count_tmp=HAL_GPIO_ReadPin(COUNT_EN_GPIO_Port, COUNT_EN_Pin); // Save LDAC signal state
 800180e:	2108      	movs	r1, #8
 8001810:	483e      	ldr	r0, [pc, #248]	; (800190c <DAC_TEMP_CAL+0x120>)
	cfg.EN_TMP_CAL=1;
 8001812:	2401      	movs	r4, #1
	uint16_t spi_receive[2]={0x0,0x0},DAC_tx_tmp_buffer2[2],ALM=0;
 8001814:	9701      	str	r7, [sp, #4]
	uint8_t count_tmp=HAL_GPIO_ReadPin(COUNT_EN_GPIO_Port, COUNT_EN_Pin); // Save LDAC signal state
 8001816:	f001 f963 	bl	8002ae0 <HAL_GPIO_ReadPin>
 800181a:	4606      	mov	r6, r0
	DDS_prepare_to_tempcal();
 800181c:	f7ff ff8c 	bl	8001738 <DDS_prepare_to_tempcal>
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001820:	4622      	mov	r2, r4
 8001822:	2108      	movs	r1, #8
 8001824:	4839      	ldr	r0, [pc, #228]	; (800190c <DAC_TEMP_CAL+0x120>)
 8001826:	f001 f961 	bl	8002aec <HAL_GPIO_WritePin>
	cfg.EN_TMP_CAL=1;
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <DAC_TEMP_CAL+0x124>)
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 800182c:	4d39      	ldr	r5, [pc, #228]	; (8001914 <DAC_TEMP_CAL+0x128>)
	cfg.EN_TMP_CAL=1;
 800182e:	701c      	strb	r4, [r3, #0]
	DAC_SendInit();
 8001830:	f7ff febc 	bl	80015ac <DAC_SendInit>
	HAL_Delay(10);
 8001834:	200a      	movs	r0, #10
 8001836:	f000 fe31 	bl	800249c <HAL_Delay>
	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800183a:	f44f 4005 	mov.w	r0, #34048	; 0x8500
	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <DAC_TEMP_CAL+0x12c>)
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001840:	463a      	mov	r2, r7
 8001842:	2110      	movs	r1, #16
	DAC_tx_tmp_buffer2[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001844:	9002      	str	r0, [sp, #8]
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001846:	4835      	ldr	r0, [pc, #212]	; (800191c <DAC_TEMP_CAL+0x130>)
	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001848:	9300      	str	r3, [sp, #0]
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 800184a:	f001 f94f 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,2,2);
 800184e:	2302      	movs	r3, #2
 8001850:	4669      	mov	r1, sp
 8001852:	461a      	mov	r2, r3
 8001854:	482f      	ldr	r0, [pc, #188]	; (8001914 <DAC_TEMP_CAL+0x128>)
 8001856:	f002 fd49 	bl	80042ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800185a:	4622      	mov	r2, r4
 800185c:	2110      	movs	r1, #16
 800185e:	482f      	ldr	r0, [pc, #188]	; (800191c <DAC_TEMP_CAL+0x130>)
 8001860:	f001 f944 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f000 fe19 	bl	800249c <HAL_Delay>
	CDC_Transmit_FS(run_cal, strlen((const char *)run_cal));
 800186a:	a805      	add	r0, sp, #20
 800186c:	f7fe fc92 	bl	8000194 <strlen>
 8001870:	4601      	mov	r1, r0
 8001872:	a805      	add	r0, sp, #20
 8001874:	b289      	uxth	r1, r1
 8001876:	f004 ffa5 	bl	80067c4 <CDC_Transmit_FS>
	HAL_Delay(500); // Wait some time....
 800187a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187e:	f000 fe0d 	bl	800249c <HAL_Delay>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001882:	4c26      	ldr	r4, [pc, #152]	; (800191c <DAC_TEMP_CAL+0x130>)
 8001884:	2200      	movs	r2, #0
 8001886:	2110      	movs	r1, #16
 8001888:	4620      	mov	r0, r4
 800188a:	f001 f92f 	bl	8002aec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer2,2,2);
 800188e:	2302      	movs	r3, #2
 8001890:	a902      	add	r1, sp, #8
 8001892:	461a      	mov	r2, r3
 8001894:	4628      	mov	r0, r5
 8001896:	f002 fd29 	bl	80042ec <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2110      	movs	r1, #16
 800189e:	4620      	mov	r0, r4
 80018a0:	f001 f924 	bl	8002aec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2110      	movs	r1, #16
 80018a8:	4620      	mov	r0, r4
 80018aa:	f001 f91f 	bl	8002aec <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1,(uint8_t *)spi_receive, 2, 2);
 80018ae:	2302      	movs	r3, #2
 80018b0:	a901      	add	r1, sp, #4
 80018b2:	461a      	mov	r2, r3
 80018b4:	4628      	mov	r0, r5
 80018b6:	f002 ffc1 	bl	800483c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2110      	movs	r1, #16
 80018be:	4620      	mov	r0, r4
 80018c0:	f001 f914 	bl	8002aec <HAL_GPIO_WritePin>
		if(ALM!=1)HAL_Delay(1000);
 80018c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80018c8:	04db      	lsls	r3, r3, #19
 80018ca:	d516      	bpl.n	80018fa <DAC_TEMP_CAL+0x10e>
	HAL_Delay(10);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f000 fde5 	bl	800249c <HAL_Delay>
	CDC_Transmit_FS(OK, strlen((const char *)OK));
 80018d2:	a803      	add	r0, sp, #12
 80018d4:	f7fe fc5e 	bl	8000194 <strlen>
 80018d8:	4601      	mov	r1, r0
 80018da:	a803      	add	r0, sp, #12
 80018dc:	b289      	uxth	r1, r1
 80018de:	f004 ff71 	bl	80067c4 <CDC_Transmit_FS>
	HAL_Delay(10);
 80018e2:	200a      	movs	r0, #10
 80018e4:	f000 fdda 	bl	800249c <HAL_Delay>
	DDS_Init();
 80018e8:	f7ff feb4 	bl	8001654 <DDS_Init>
	HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, count_tmp); // Back LDAC signal state
 80018ec:	4632      	mov	r2, r6
 80018ee:	2108      	movs	r1, #8
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <DAC_TEMP_CAL+0x120>)
 80018f2:	f001 f8fb 	bl	8002aec <HAL_GPIO_WritePin>
}
 80018f6:	b00d      	add	sp, #52	; 0x34
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(ALM!=1)HAL_Delay(1000);
 80018fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018fe:	f000 fdcd 	bl	800249c <HAL_Delay>
	}while(ALM!=1);
 8001902:	e7bf      	b.n	8001884 <DAC_TEMP_CAL+0x98>
 8001904:	08009a28 	.word	0x08009a28
 8001908:	08009a30 	.word	0x08009a30
 800190c:	40020400 	.word	0x40020400
 8001910:	20000860 	.word	0x20000860
 8001914:	20000924 	.word	0x20000924
 8001918:	01000400 	.word	0x01000400
 800191c:	40020000 	.word	0x40020000

08001920 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	2400      	movs	r4, #0
{
 8001926:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800192c:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001930:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <MX_GPIO_Init+0xe8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001934:	69da      	ldr	r2, [r3, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 8001936:	4d35      	ldr	r5, [pc, #212]	; (8001a0c <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	61da      	str	r2, [r3, #28]
 800193e:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET);
 8001940:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001a10 <MX_GPIO_Init+0xf0>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001944:	f002 0220 	and.w	r2, r2, #32
 8001948:	9201      	str	r2, [sp, #4]
 800194a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 800194e:	4628      	mov	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	61da      	str	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	69d9      	ldr	r1, [r3, #28]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 800195a:	2703      	movs	r7, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4011      	ands	r1, r2
 800195e:	9102      	str	r1, [sp, #8]
 8001960:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	69de      	ldr	r6, [r3, #28]
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 8001964:	2111      	movs	r1, #17
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	f046 0602 	orr.w	r6, r6, #2
 800196a:	61de      	str	r6, [r3, #28]
 800196c:	69db      	ldr	r3, [r3, #28]
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 800196e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	9303      	str	r3, [sp, #12]
 8001976:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 8001978:	f001 f8b8 	bl	8002aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET);
 800197c:	4640      	mov	r0, r8
 800197e:	2201      	movs	r2, #1
 8001980:	2108      	movs	r1, #8
 8001982:	f001 f8b3 	bl	8002aec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 8001986:	2201      	movs	r2, #1
 8001988:	2311      	movs	r3, #17
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 800198a:	4628      	mov	r0, r5
 800198c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 800198e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001992:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 8001996:	f000 ffbb 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800199a:	2202      	movs	r2, #2
 800199c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	4628      	mov	r0, r5
 80019a0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f000 ffb2 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ac:	f04f 0c01 	mov.w	ip, #1
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 80019b0:	2204      	movs	r2, #4
 80019b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 80019b6:	4628      	mov	r0, r5
 80019b8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ba:	f8cd c018 	str.w	ip, [sp, #24]
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 80019be:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f000 ffa5 	bl	8002910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 80019c6:	2210      	movs	r2, #16
 80019c8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 80019ca:	4628      	mov	r0, r5
 80019cc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 80019ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80019d2:	e9cd 2304 	strd	r2, r3, [sp, #16]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 80019d6:	2608      	movs	r6, #8
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f000 ff9a 	bl	8002910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 80019dc:	2701      	movs	r7, #1
 80019de:	2303      	movs	r3, #3
 80019e0:	2200      	movs	r2, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(COUNT_EN_GPIO_Port, &GPIO_InitStruct);
 80019e2:	4640      	mov	r0, r8
 80019e4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 80019e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80019ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(COUNT_EN_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f000 ff8f 	bl	8002910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80019f2:	4622      	mov	r2, r4
 80019f4:	4621      	mov	r1, r4
 80019f6:	2008      	movs	r0, #8
 80019f8:	f000 fd74 	bl	80024e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80019fc:	2008      	movs	r0, #8
 80019fe:	f000 fda9 	bl	8002554 <HAL_NVIC_EnableIRQ>

}
 8001a02:	b00a      	add	sp, #40	; 0x28
 8001a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020400 	.word	0x40020400

08001a14 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a14:	2300      	movs	r3, #0
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a16:	2001      	movs	r0, #1
 8001a18:	2101      	movs	r1, #1
{
 8001a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2702      	movs	r7, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001a22:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a26:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
{
 8001a2a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8001a30:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001a34:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001a3c:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <SystemClock_Config+0x7c>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a50:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a52:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a56:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a58:	e9cd 760f 	strd	r7, r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a5c:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f001 ffee 	bl	8003a40 <HAL_RCC_OscConfig>
 8001a64:	b108      	cbz	r0, 8001a6a <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a66:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a68:	e7fe      	b.n	8001a68 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6c:	260f      	movs	r6, #15
 8001a6e:	2703      	movs	r7, #3
 8001a70:	2400      	movs	r4, #0
 8001a72:	2500      	movs	r5, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a74:	4668      	mov	r0, sp
 8001a76:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a78:	e9cd 6700 	strd	r6, r7, [sp]
 8001a7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a80:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a82:	f002 fa49 	bl	8003f18 <HAL_RCC_ClockConfig>
 8001a86:	b108      	cbz	r0, 8001a8c <SystemClock_Config+0x78>
 8001a88:	b672      	cpsid	i
	while (1)
 8001a8a:	e7fe      	b.n	8001a8a <SystemClock_Config+0x76>
}
 8001a8c:	b015      	add	sp, #84	; 0x54
 8001a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a90:	40007000 	.word	0x40007000

08001a94 <HAL_GPIO_EXTI_Callback>:
{
 8001a94:	b538      	push	{r3, r4, r5, lr}
 8001a96:	4604      	mov	r4, r0
	DAC_Write_FAST();
 8001a98:	f7ff fd6e 	bl	8001578 <DAC_Write_FAST>
	if(GPIO_Pin == GPIO_PIN_2)
 8001a9c:	2c04      	cmp	r4, #4
 8001a9e:	d000      	beq.n	8001aa2 <HAL_GPIO_EXTI_Callback+0xe>
}
 8001aa0:	bd38      	pop	{r3, r4, r5, pc}
		if(DAC_code_direction)
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x80>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b99b      	cbnz	r3, 8001ad0 <HAL_GPIO_EXTI_Callback+0x3c>
			if(DAC_code>=DDS_target_multipiller)
 8001aa8:	491b      	ldr	r1, [pc, #108]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001aac:	680a      	ldr	r2, [r1, #0]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	4282      	cmp	r2, r0
 8001ab2:	d31a      	bcc.n	8001aea <HAL_GPIO_EXTI_Callback+0x56>
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x8c>)
				DAC_code-=DDS_target_multipiller;
 8001ab6:	1a12      	subs	r2, r2, r0
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8001ab8:	ea03 1302 	and.w	r3, r3, r2, lsl #4
 8001abc:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001ac0:	4818      	ldr	r0, [pc, #96]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x90>)
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8001ac2:	4d19      	ldr	r5, [pc, #100]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x94>)
				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001ac4:	0c1c      	lsrs	r4, r3, #16
				DAC_code-=DDS_target_multipiller;
 8001ac6:	600a      	str	r2, [r1, #0]
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8001ac8:	602b      	str	r3, [r5, #0]
				DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFFFF0000)>>16;
 8001aca:	8004      	strh	r4, [r0, #0]
				DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x0000FFFF);
 8001acc:	8043      	strh	r3, [r0, #2]
}
 8001ace:	bd38      	pop	{r3, r4, r5, pc}
			if(DAC_code<=(0xFFFFF-DDS_target_multipiller))
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x88>)
 8001ad2:	4911      	ldr	r1, [pc, #68]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	6808      	ldr	r0, [r1, #0]
 8001ad8:	f5c2 237f 	rsb	r3, r2, #1044480	; 0xff000
 8001adc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001ae0:	4283      	cmp	r3, r0
 8001ae2:	d302      	bcc.n	8001aea <HAL_GPIO_EXTI_Callback+0x56>
				DAC_tx_buffer+=(DAC_code & 0xFFFFF)<<4;
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x8c>)
				DAC_code+=DDS_target_multipiller;
 8001ae6:	4402      	add	r2, r0
 8001ae8:	e7e6      	b.n	8001ab8 <HAL_GPIO_EXTI_Callback+0x24>
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001aea:	2108      	movs	r1, #8
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x98>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	f000 fffc 	bl	8002aec <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001af4:	2200      	movs	r2, #0
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001af8:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001afa:	f7ff fd57 	bl	80015ac <DAC_SendInit>
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b00:	f7fe fb48 	bl	8000194 <strlen>
}
 8001b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001b08:	4601      	mov	r1, r0
 8001b0a:	480a      	ldr	r0, [pc, #40]	; (8001b34 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b0c:	b289      	uxth	r1, r1
 8001b0e:	f004 be59 	b.w	80067c4 <CDC_Transmit_FS>
 8001b12:	bf00      	nop
 8001b14:	200008c8 	.word	0x200008c8
 8001b18:	2000062c 	.word	0x2000062c
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	00fffff0 	.word	0x00fffff0
 8001b24:	2000086c 	.word	0x2000086c
 8001b28:	20000870 	.word	0x20000870
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	20000860 	.word	0x20000860
 8001b34:	20000008 	.word	0x20000008

08001b38 <Write_to_circ_buffer>:
{
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b510      	push	{r4, lr}
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8001b3c:	4c06      	ldr	r4, [pc, #24]	; (8001b58 <Write_to_circ_buffer+0x20>)
{
 8001b3e:	b082      	sub	sp, #8
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8001b40:	4620      	mov	r0, r4
 8001b42:	f10d 0107 	add.w	r1, sp, #7
{
 8001b46:	f88d 3007 	strb.w	r3, [sp, #7]
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8001b4a:	f7ff fcc5 	bl	80014d8 <__circ_gbuf_push>
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8001b4e:	b108      	cbz	r0, 8001b54 <Write_to_circ_buffer+0x1c>
 8001b50:	2300      	movs	r3, #0
 8001b52:	6063      	str	r3, [r4, #4]
}
 8001b54:	b002      	add	sp, #8
 8001b56:	bd10      	pop	{r4, pc}
 8001b58:	200002ac 	.word	0x200002ac
 8001b5c:	00000000 	.word	0x00000000

08001b60 <Parsing_command>:
{
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
	found = strtok((char *)command_buffer," ");
 8001b62:	49b7      	ldr	r1, [pc, #732]	; (8001e40 <Parsing_command+0x2e0>)
{
 8001b64:	b091      	sub	sp, #68	; 0x44
	found = strtok((char *)command_buffer," ");
 8001b66:	48b7      	ldr	r0, [pc, #732]	; (8001e44 <Parsing_command+0x2e4>)
 8001b68:	f005 fec6 	bl	80078f8 <strtok>
	if(found!=NULL)
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d068      	beq.n	8001c42 <Parsing_command+0xe2>
		strcpy(decoded_string_1,found);
 8001b70:	4601      	mov	r1, r0
 8001b72:	4668      	mov	r0, sp
 8001b74:	f005 f895 	bl	8006ca2 <strcpy>
	found = strtok(NULL,"\r");
 8001b78:	49b3      	ldr	r1, [pc, #716]	; (8001e48 <Parsing_command+0x2e8>)
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f005 febc 	bl	80078f8 <strtok>
	if(found!=NULL)
 8001b80:	4601      	mov	r1, r0
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d05d      	beq.n	8001c42 <Parsing_command+0xe2>
		strcpy(decoded_string_2,found);
 8001b86:	ae08      	add	r6, sp, #32
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f005 f881 	bl	8006c90 <stpcpy>
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8001b8e:	1b80      	subs	r0, r0, r6
 8001b90:	d009      	beq.n	8001ba6 <Parsing_command+0x46>
 8001b92:	2400      	movs	r4, #0
 8001b94:	4635      	mov	r5, r6
 8001b96:	4627      	mov	r7, r4
 8001b98:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d030      	beq.n	8001c02 <Parsing_command+0xa2>
 8001ba0:	3401      	adds	r4, #1
 8001ba2:	42a0      	cmp	r0, r4
 8001ba4:	d8f8      	bhi.n	8001b98 <Parsing_command+0x38>
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	49a8      	ldr	r1, [pc, #672]	; (8001e4c <Parsing_command+0x2ec>)
 8001baa:	f7fe fae9 	bl	8000180 <strcmp>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d135      	bne.n	8001c1e <Parsing_command+0xbe>
		if(!(strcmp(decoded_string_2,"START"))){
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	49a6      	ldr	r1, [pc, #664]	; (8001e50 <Parsing_command+0x2f0>)
 8001bb6:	f7fe fae3 	bl	8000180 <strcmp>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	f000 80ae 	beq.w	8001d1e <Parsing_command+0x1be>
			if(!(strcmp(decoded_string_2,"STOP"))){
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	49a3      	ldr	r1, [pc, #652]	; (8001e54 <Parsing_command+0x2f4>)
 8001bc6:	f7fe fadb 	bl	8000180 <strcmp>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d138      	bne.n	8001c42 <Parsing_command+0xe2>
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001bd0:	48a1      	ldr	r0, [pc, #644]	; (8001e58 <Parsing_command+0x2f8>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	f000 ff89 	bl	8002aec <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001bda:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <Parsing_command+0x2fc>)
 8001bdc:	709c      	strb	r4, [r3, #2]
				DAC_SendInit();
 8001bde:	f7ff fce5 	bl	80015ac <DAC_SendInit>
				HAL_Delay(10);
 8001be2:	200a      	movs	r0, #10
				HAL_Delay(10);
 8001be4:	f000 fc5a 	bl	800249c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001be8:	489d      	ldr	r0, [pc, #628]	; (8001e60 <Parsing_command+0x300>)
 8001bea:	f7fe fad3 	bl	8000194 <strlen>
 8001bee:	4601      	mov	r1, r0
 8001bf0:	489b      	ldr	r0, [pc, #620]	; (8001e60 <Parsing_command+0x300>)
 8001bf2:	b289      	uxth	r1, r1
 8001bf4:	f004 fde6 	bl	80067c4 <CDC_Transmit_FS>
				HAL_Delay(10);
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f000 fc4f 	bl	800249c <HAL_Delay>
}
 8001bfe:	b011      	add	sp, #68	; 0x44
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(int i=0;i<strlen(decoded_string_2);i++)if(decoded_string_2[i]==' ')decoded_string_2[i]='\0';
 8001c02:	4630      	mov	r0, r6
 8001c04:	f805 7c01 	strb.w	r7, [r5, #-1]
 8001c08:	f7fe fac4 	bl	8000194 <strlen>
 8001c0c:	3401      	adds	r4, #1
 8001c0e:	4284      	cmp	r4, r0
 8001c10:	d3c2      	bcc.n	8001b98 <Parsing_command+0x38>
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8001c12:	4668      	mov	r0, sp
 8001c14:	498d      	ldr	r1, [pc, #564]	; (8001e4c <Parsing_command+0x2ec>)
 8001c16:	f7fe fab3 	bl	8000180 <strcmp>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d0c9      	beq.n	8001bb2 <Parsing_command+0x52>
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8001c1e:	4668      	mov	r0, sp
 8001c20:	4990      	ldr	r1, [pc, #576]	; (8001e64 <Parsing_command+0x304>)
 8001c22:	f7fe faad 	bl	8000180 <strcmp>
 8001c26:	4604      	mov	r4, r0
 8001c28:	b1d8      	cbz	r0, 8001c62 <Parsing_command+0x102>
	if(!(strcmp(decoded_string_1,"DAC_CAL_TEMP")))
 8001c2a:	4668      	mov	r0, sp
 8001c2c:	498e      	ldr	r1, [pc, #568]	; (8001e68 <Parsing_command+0x308>)
 8001c2e:	f7fe faa7 	bl	8000180 <strcmp>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d147      	bne.n	8001cc6 <Parsing_command+0x166>
		if(!(strcmp(decoded_string_2,"START"))){
 8001c36:	4630      	mov	r0, r6
 8001c38:	4985      	ldr	r1, [pc, #532]	; (8001e50 <Parsing_command+0x2f0>)
 8001c3a:	f7fe faa1 	bl	8000180 <strcmp>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d07d      	beq.n	8001d3e <Parsing_command+0x1de>
			HAL_Delay(10);
 8001c42:	200a      	movs	r0, #10
 8001c44:	f000 fc2a 	bl	800249c <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001c48:	4888      	ldr	r0, [pc, #544]	; (8001e6c <Parsing_command+0x30c>)
 8001c4a:	f7fe faa3 	bl	8000194 <strlen>
 8001c4e:	4601      	mov	r1, r0
 8001c50:	4886      	ldr	r0, [pc, #536]	; (8001e6c <Parsing_command+0x30c>)
 8001c52:	b289      	uxth	r1, r1
 8001c54:	f004 fdb6 	bl	80067c4 <CDC_Transmit_FS>
			HAL_Delay(10);
 8001c58:	200a      	movs	r0, #10
 8001c5a:	f000 fc1f 	bl	800249c <HAL_Delay>
}
 8001c5e:	b011      	add	sp, #68	; 0x44
 8001c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(!(strcmp(decoded_string_2,"TOP"))){
 8001c62:	4630      	mov	r0, r6
 8001c64:	4982      	ldr	r1, [pc, #520]	; (8001e70 <Parsing_command+0x310>)
 8001c66:	f7fe fa8b 	bl	8000180 <strcmp>
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	f000 80d8 	beq.w	8001e20 <Parsing_command+0x2c0>
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8001c70:	4630      	mov	r0, r6
 8001c72:	4980      	ldr	r1, [pc, #512]	; (8001e74 <Parsing_command+0x314>)
 8001c74:	f7fe fa84 	bl	8000180 <strcmp>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	f000 80c3 	beq.w	8001e04 <Parsing_command+0x2a4>
				atof_tmp=atof(decoded_string_2);
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f004 ffc2 	bl	8006c08 <atof>
 8001c84:	f7fe ff04 	bl	8000a90 <__aeabi_d2f>
				if(atof_tmp>=cal_DAC_down_voltage && atof_tmp<=cal_DAC_up_voltage)
 8001c88:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <Parsing_command+0x318>)
				atof_tmp=atof(decoded_string_2);
 8001c8a:	4605      	mov	r5, r0
				if(atof_tmp>=cal_DAC_down_voltage && atof_tmp<=cal_DAC_up_voltage)
 8001c8c:	681e      	ldr	r6, [r3, #0]
 8001c8e:	4601      	mov	r1, r0
 8001c90:	4630      	mov	r0, r6
 8001c92:	f7ff fa03 	bl	800109c <__aeabi_fcmple>
 8001c96:	b138      	cbz	r0, 8001ca8 <Parsing_command+0x148>
 8001c98:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <Parsing_command+0x31c>)
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	681f      	ldr	r7, [r3, #0]
 8001c9e:	4638      	mov	r0, r7
 8001ca0:	f7ff fa06 	bl	80010b0 <__aeabi_fcmpge>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d155      	bne.n	8001d54 <Parsing_command+0x1f4>
			HAL_Delay(10);
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f000 fbf7 	bl	800249c <HAL_Delay>
			CDC_Transmit_FS(Error2, strlen((const char *)Error2));  // SEND ERROR TO CDC!!!
 8001cae:	4874      	ldr	r0, [pc, #464]	; (8001e80 <Parsing_command+0x320>)
 8001cb0:	f7fe fa70 	bl	8000194 <strlen>
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	4872      	ldr	r0, [pc, #456]	; (8001e80 <Parsing_command+0x320>)
 8001cb8:	b289      	uxth	r1, r1
 8001cba:	f004 fd83 	bl	80067c4 <CDC_Transmit_FS>
			HAL_Delay(10);
 8001cbe:	200a      	movs	r0, #10
 8001cc0:	f000 fbec 	bl	800249c <HAL_Delay>
			return;
 8001cc4:	e7cb      	b.n	8001c5e <Parsing_command+0xfe>
	if(!(strcmp(decoded_string_1,"DAC_CAL_TOP")))
 8001cc6:	4668      	mov	r0, sp
 8001cc8:	496e      	ldr	r1, [pc, #440]	; (8001e84 <Parsing_command+0x324>)
 8001cca:	f7fe fa59 	bl	8000180 <strcmp>
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	f000 80f0 	beq.w	8001eb4 <Parsing_command+0x354>
	if(!(strcmp(decoded_string_1,"DAC_CAL_DOWN")))
 8001cd4:	4668      	mov	r0, sp
 8001cd6:	496c      	ldr	r1, [pc, #432]	; (8001e88 <Parsing_command+0x328>)
 8001cd8:	f7fe fa52 	bl	8000180 <strcmp>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d056      	beq.n	8001d8e <Parsing_command+0x22e>
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8001ce0:	4668      	mov	r0, sp
 8001ce2:	496a      	ldr	r1, [pc, #424]	; (8001e8c <Parsing_command+0x32c>)
 8001ce4:	f7fe fa4c 	bl	8000180 <strcmp>
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	f000 8124 	beq.w	8001f36 <Parsing_command+0x3d6>
	if(!(strcmp(decoded_string_1,"SWEEP_DIRECTION")))
 8001cee:	4668      	mov	r0, sp
 8001cf0:	4967      	ldr	r1, [pc, #412]	; (8001e90 <Parsing_command+0x330>)
 8001cf2:	f7fe fa45 	bl	8000180 <strcmp>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1a3      	bne.n	8001c42 <Parsing_command+0xe2>
		if(!(strcmp(decoded_string_2,"UP"))){
 8001cfa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001cfe:	2b55      	cmp	r3, #85	; 0x55
 8001d00:	f040 810d 	bne.w	8001f1e <Parsing_command+0x3be>
 8001d04:	7873      	ldrb	r3, [r6, #1]
 8001d06:	2b50      	cmp	r3, #80	; 0x50
 8001d08:	f040 8109 	bne.w	8001f1e <Parsing_command+0x3be>
 8001d0c:	78b3      	ldrb	r3, [r6, #2]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 8105 	bne.w	8001f1e <Parsing_command+0x3be>
			DAC_code_direction=1;
 8001d14:	2201      	movs	r2, #1
 8001d16:	4b5f      	ldr	r3, [pc, #380]	; (8001e94 <Parsing_command+0x334>)
			HAL_Delay(10);
 8001d18:	200a      	movs	r0, #10
			DAC_code_direction=1;
 8001d1a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(10);
 8001d1c:	e762      	b.n	8001be4 <Parsing_command+0x84>
			DAC_TEMP_CAL();
 8001d1e:	f7ff fd65 	bl	80017ec <DAC_TEMP_CAL>
			HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 8001d22:	484d      	ldr	r0, [pc, #308]	; (8001e58 <Parsing_command+0x2f8>)
 8001d24:	2108      	movs	r1, #8
 8001d26:	4622      	mov	r2, r4
 8001d28:	f000 fee0 	bl	8002aec <HAL_GPIO_WritePin>
			cfg.LDACMODE=1;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <Parsing_command+0x2fc>)
 8001d30:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8001d32:	f7ff fc3b 	bl	80015ac <DAC_SendInit>
			DDS_Init();
 8001d36:	f7ff fc8d 	bl	8001654 <DDS_Init>
			HAL_Delay(10);
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	e752      	b.n	8001be4 <Parsing_command+0x84>
			DAC_code=0x7FFFF;
 8001d3e:	4856      	ldr	r0, [pc, #344]	; (8001e98 <Parsing_command+0x338>)
 8001d40:	4c56      	ldr	r4, [pc, #344]	; (8001e9c <Parsing_command+0x33c>)
 8001d42:	6020      	str	r0, [r4, #0]
			DAC_Write(DAC_code);
 8001d44:	f7ff fbee 	bl	8001524 <DAC_Write>
			DAC_TEMP_CAL();
 8001d48:	f7ff fd50 	bl	80017ec <DAC_TEMP_CAL>
			DAC_Write(DAC_code);
 8001d4c:	6820      	ldr	r0, [r4, #0]
 8001d4e:	f7ff fbe9 	bl	8001524 <DAC_Write>
			return;
 8001d52:	e784      	b.n	8001c5e <Parsing_command+0xfe>
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8001d54:	4628      	mov	r0, r5
 8001d56:	4631      	mov	r1, r6
 8001d58:	f7fe feee 	bl	8000b38 <__aeabi_fsub>
					dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8001d5c:	4631      	mov	r1, r6
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8001d5e:	4605      	mov	r5, r0
					dac_resolution=(cal_DAC_up_voltage-cal_DAC_down_voltage)/0xFFFFF; // Calculate 1 LSB resolution
 8001d60:	4638      	mov	r0, r7
 8001d62:	f7fe fee9 	bl	8000b38 <__aeabi_fsub>
 8001d66:	494e      	ldr	r1, [pc, #312]	; (8001ea0 <Parsing_command+0x340>)
 8001d68:	f7ff f8a4 	bl	8000eb4 <__aeabi_fdiv>
 8001d6c:	4601      	mov	r1, r0
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8001d6e:	4628      	mov	r0, r5
 8001d70:	f7ff f8a0 	bl	8000eb4 <__aeabi_fdiv>
 8001d74:	f7ff f9b0 	bl	80010d8 <__aeabi_f2uiz>
 8001d78:	4d48      	ldr	r5, [pc, #288]	; (8001e9c <Parsing_command+0x33c>)
					cfg.LDACMODE=0;
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <Parsing_command+0x2fc>)
					DAC_code=(uint32_t)((atof_tmp-cal_DAC_down_voltage)/dac_resolution);
 8001d7c:	6028      	str	r0, [r5, #0]
					cfg.LDACMODE=0;
 8001d7e:	709c      	strb	r4, [r3, #2]
					DAC_TEMP_CAL();
 8001d80:	f7ff fd34 	bl	80017ec <DAC_TEMP_CAL>
					DAC_Write(DAC_code);
 8001d84:	6828      	ldr	r0, [r5, #0]
 8001d86:	f7ff fbcd 	bl	8001524 <DAC_Write>
					HAL_Delay(10);
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	e72a      	b.n	8001be4 <Parsing_command+0x84>
		atof_tmp=atof(decoded_string_2);
 8001d8e:	4630      	mov	r0, r6
 8001d90:	f004 ff3a 	bl	8006c08 <atof>
 8001d94:	f7fe fe7c 	bl	8000a90 <__aeabi_d2f>
 8001d98:	4606      	mov	r6, r0
		if(atof_tmp>-10.1 && atof_tmp<-9.9)
 8001d9a:	f7fe fb67 	bl	800046c <__aeabi_f2d>
 8001d9e:	a324      	add	r3, pc, #144	; (adr r3, 8001e30 <Parsing_command+0x2d0>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	4604      	mov	r4, r0
 8001da6:	460d      	mov	r5, r1
 8001da8:	f7fe fe48 	bl	8000a3c <__aeabi_dcmpgt>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	f43f af7b 	beq.w	8001ca8 <Parsing_command+0x148>
 8001db2:	a321      	add	r3, pc, #132	; (adr r3, 8001e38 <Parsing_command+0x2d8>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe fe20 	bl	8000a00 <__aeabi_dcmplt>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	f43f af71 	beq.w	8001ca8 <Parsing_command+0x148>
			cal_DAC_down_voltage=atof_tmp;
 8001dc6:	4d2c      	ldr	r5, [pc, #176]	; (8001e78 <Parsing_command+0x318>)
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8001dc8:	4f36      	ldr	r7, [pc, #216]	; (8001ea4 <Parsing_command+0x344>)
			cal_DAC_down_voltage=atof_tmp;
 8001dca:	602e      	str	r6, [r5, #0]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8001dcc:	f000 fc6e 	bl	80026ac <HAL_FLASHEx_DATAEEPROM_Unlock>
			EEPROM_write(0x08,(uint32_t)(cal_DAC_down_voltage*-1000000)); // Write top voltage calibration to EEPROM in uV value
 8001dd0:	4935      	ldr	r1, [pc, #212]	; (8001ea8 <Parsing_command+0x348>)
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	f7fe ffba 	bl	8000d4c <__aeabi_fmul>
 8001dd8:	f7ff f97e 	bl	80010d8 <__aeabi_f2uiz>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8001ddc:	4639      	mov	r1, r7
			EEPROM_write(0x08,(uint32_t)(cal_DAC_down_voltage*-1000000)); // Write top voltage calibration to EEPROM in uV value
 8001dde:	4602      	mov	r2, r0
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8001de0:	2002      	movs	r0, #2
 8001de2:	f000 fc7f 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
 8001de6:	4604      	mov	r4, r0
	HAL_FLASHEx_DATAEEPROM_Lock();
 8001de8:	f000 fc72 	bl	80026d0 <HAL_FLASHEx_DATAEEPROM_Lock>
	if(FLASHStatus != HAL_OK)
 8001dec:	b904      	cbnz	r4, 8001df0 <Parsing_command+0x290>
	if(*(__IO uint32_t *) Address != data)
 8001dee:	683b      	ldr	r3, [r7, #0]
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <Parsing_command+0x31c>)
 8001df2:	6829      	ldr	r1, [r5, #0]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	f7fe fe9f 	bl	8000b38 <__aeabi_fsub>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <Parsing_command+0x34c>)
			HAL_Delay(10);
 8001dfe:	200a      	movs	r0, #10
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8001e00:	601a      	str	r2, [r3, #0]
			HAL_Delay(10);
 8001e02:	e6ef      	b.n	8001be4 <Parsing_command+0x84>
				DAC_code_direction=1;
 8001e04:	2101      	movs	r1, #1
 8001e06:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <Parsing_command+0x334>)
				DAC_code=0x0;
 8001e08:	4c24      	ldr	r4, [pc, #144]	; (8001e9c <Parsing_command+0x33c>)
				cfg.LDACMODE=0;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <Parsing_command+0x2fc>)
				DAC_code_direction=1;
 8001e0c:	7011      	strb	r1, [r2, #0]
				DAC_code=0x0;
 8001e0e:	6020      	str	r0, [r4, #0]
				cfg.LDACMODE=0;
 8001e10:	7098      	strb	r0, [r3, #2]
				DAC_SendInit();
 8001e12:	f7ff fbcb 	bl	80015ac <DAC_SendInit>
				DAC_Write(DAC_code);
 8001e16:	6820      	ldr	r0, [r4, #0]
 8001e18:	f7ff fb84 	bl	8001524 <DAC_Write>
				HAL_Delay(10);
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	e6e1      	b.n	8001be4 <Parsing_command+0x84>
			DAC_code=0xFFFFF;
 8001e20:	4c1e      	ldr	r4, [pc, #120]	; (8001e9c <Parsing_command+0x33c>)
 8001e22:	4923      	ldr	r1, [pc, #140]	; (8001eb0 <Parsing_command+0x350>)
			DAC_code_direction=0;
 8001e24:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <Parsing_command+0x334>)
			cfg.LDACMODE=0;
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <Parsing_command+0x2fc>)
			DAC_code=0xFFFFF;
 8001e28:	6021      	str	r1, [r4, #0]
			DAC_code_direction=0;
 8001e2a:	7010      	strb	r0, [r2, #0]
			cfg.LDACMODE=0;
 8001e2c:	e7f0      	b.n	8001e10 <Parsing_command+0x2b0>
 8001e2e:	bf00      	nop
 8001e30:	33333333 	.word	0x33333333
 8001e34:	c0243333 	.word	0xc0243333
 8001e38:	cccccccd 	.word	0xcccccccd
 8001e3c:	c023cccc 	.word	0xc023cccc
 8001e40:	08009a4c 	.word	0x08009a4c
 8001e44:	200008a4 	.word	0x200008a4
 8001e48:	08009a50 	.word	0x08009a50
 8001e4c:	08009a54 	.word	0x08009a54
 8001e50:	08009a5c 	.word	0x08009a5c
 8001e54:	08009a64 	.word	0x08009a64
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	20000860 	.word	0x20000860
 8001e60:	20000294 	.word	0x20000294
 8001e64:	08009a6c 	.word	0x08009a6c
 8001e68:	08009a74 	.word	0x08009a74
 8001e6c:	20000020 	.word	0x20000020
 8001e70:	08009a8c 	.word	0x08009a8c
 8001e74:	08009a98 	.word	0x08009a98
 8001e78:	20000874 	.word	0x20000874
 8001e7c:	2000089c 	.word	0x2000089c
 8001e80:	20000268 	.word	0x20000268
 8001e84:	08009a84 	.word	0x08009a84
 8001e88:	08009a90 	.word	0x08009a90
 8001e8c:	08009aa0 	.word	0x08009aa0
 8001e90:	08009aac 	.word	0x08009aac
 8001e94:	200008c8 	.word	0x200008c8
 8001e98:	0007ffff 	.word	0x0007ffff
 8001e9c:	2000062c 	.word	0x2000062c
 8001ea0:	497ffff0 	.word	0x497ffff0
 8001ea4:	08080008 	.word	0x08080008
 8001ea8:	c9742400 	.word	0xc9742400
 8001eac:	200008a0 	.word	0x200008a0
 8001eb0:	000fffff 	.word	0x000fffff
		atof_tmp=atof(decoded_string_2);
 8001eb4:	4630      	mov	r0, r6
 8001eb6:	f004 fea7 	bl	8006c08 <atof>
 8001eba:	f7fe fde9 	bl	8000a90 <__aeabi_d2f>
 8001ebe:	4606      	mov	r6, r0
		if(atof_tmp>9.9 && atof_tmp<10.1)
 8001ec0:	f7fe fad4 	bl	800046c <__aeabi_f2d>
 8001ec4:	a32c      	add	r3, pc, #176	; (adr r3, 8001f78 <Parsing_command+0x418>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	f7fe fdb5 	bl	8000a3c <__aeabi_dcmpgt>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	f43f aee8 	beq.w	8001ca8 <Parsing_command+0x148>
 8001ed8:	a329      	add	r3, pc, #164	; (adr r3, 8001f80 <Parsing_command+0x420>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe fd8d 	bl	8000a00 <__aeabi_dcmplt>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	f43f aede 	beq.w	8001ca8 <Parsing_command+0x148>
			cal_DAC_up_voltage=atof_tmp;
 8001eec:	4d28      	ldr	r5, [pc, #160]	; (8001f90 <Parsing_command+0x430>)
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8001eee:	4f29      	ldr	r7, [pc, #164]	; (8001f94 <Parsing_command+0x434>)
			cal_DAC_up_voltage=atof_tmp;
 8001ef0:	602e      	str	r6, [r5, #0]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8001ef2:	f000 fbdb 	bl	80026ac <HAL_FLASHEx_DATAEEPROM_Unlock>
			EEPROM_write(0x00,(uint32_t)(cal_DAC_up_voltage*1000000)); // Write top voltage calibration to EEPROM in uV value
 8001ef6:	4928      	ldr	r1, [pc, #160]	; (8001f98 <Parsing_command+0x438>)
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f7fe ff27 	bl	8000d4c <__aeabi_fmul>
 8001efe:	f7ff f8eb 	bl	80010d8 <__aeabi_f2uiz>
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8001f02:	4639      	mov	r1, r7
			EEPROM_write(0x00,(uint32_t)(cal_DAC_up_voltage*1000000)); // Write top voltage calibration to EEPROM in uV value
 8001f04:	4602      	mov	r2, r0
	FLASHStatus = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, Address, data);
 8001f06:	2002      	movs	r0, #2
 8001f08:	f000 fbec 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
 8001f0c:	4604      	mov	r4, r0
	HAL_FLASHEx_DATAEEPROM_Lock();
 8001f0e:	f000 fbdf 	bl	80026d0 <HAL_FLASHEx_DATAEEPROM_Lock>
	if(FLASHStatus != HAL_OK)
 8001f12:	b904      	cbnz	r4, 8001f16 <Parsing_command+0x3b6>
	if(*(__IO uint32_t *) Address != data)
 8001f14:	683b      	ldr	r3, [r7, #0]
			DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <Parsing_command+0x43c>)
 8001f18:	6828      	ldr	r0, [r5, #0]
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	e76b      	b.n	8001df6 <Parsing_command+0x296>
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8001f1e:	4630      	mov	r0, r6
 8001f20:	491f      	ldr	r1, [pc, #124]	; (8001fa0 <Parsing_command+0x440>)
 8001f22:	f7fe f92d 	bl	8000180 <strcmp>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	f47f ae8a 	bne.w	8001c42 <Parsing_command+0xe2>
				DAC_code_direction=0;
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <Parsing_command+0x444>)
				HAL_Delay(10);
 8001f30:	200a      	movs	r0, #10
				DAC_code_direction=0;
 8001f32:	7013      	strb	r3, [r2, #0]
 8001f34:	e656      	b.n	8001be4 <Parsing_command+0x84>
		atof_tmp=atof(decoded_string_2);
 8001f36:	4630      	mov	r0, r6
 8001f38:	f004 fe66 	bl	8006c08 <atof>
 8001f3c:	f7fe fda8 	bl	8000a90 <__aeabi_d2f>
 8001f40:	4604      	mov	r4, r0
		if(atof_tmp<0.001 || atof_tmp>1)
 8001f42:	f7fe fa93 	bl	800046c <__aeabi_f2d>
 8001f46:	a310      	add	r3, pc, #64	; (adr r3, 8001f88 <Parsing_command+0x428>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fd58 	bl	8000a00 <__aeabi_dcmplt>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	f47f ae76 	bne.w	8001c42 <Parsing_command+0xe2>
 8001f56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff f8b2 	bl	80010c4 <__aeabi_fcmpgt>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	f47f ae6e 	bne.w	8001c42 <Parsing_command+0xe2>
			DAC_target_speed=atof_tmp;
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <Parsing_command+0x448>)
 8001f68:	601c      	str	r4, [r3, #0]
			DDS_Init();
 8001f6a:	f7ff fb73 	bl	8001654 <DDS_Init>
			HAL_Delay(10);
 8001f6e:	200a      	movs	r0, #10
 8001f70:	e638      	b.n	8001be4 <Parsing_command+0x84>
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	cccccccd 	.word	0xcccccccd
 8001f7c:	4023cccc 	.word	0x4023cccc
 8001f80:	33333333 	.word	0x33333333
 8001f84:	40243333 	.word	0x40243333
 8001f88:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f8c:	3f50624d 	.word	0x3f50624d
 8001f90:	2000089c 	.word	0x2000089c
 8001f94:	08080000 	.word	0x08080000
 8001f98:	49742400 	.word	0x49742400
 8001f9c:	20000874 	.word	0x20000874
 8001fa0:	08009a98 	.word	0x08009a98
 8001fa4:	200008c8 	.word	0x200008c8
 8001fa8:	200008c4 	.word	0x200008c4

08001fac <main>:
{
 8001fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	cfg.PDN=0; // DAC power up
 8001fb0:	f04f 0a00 	mov.w	sl, #0
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <main+0xdc>)
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8001fb6:	4835      	ldr	r0, [pc, #212]	; (800208c <main+0xe0>)
	DAC_target_speed=0.001; //  V/s
 8001fb8:	4a35      	ldr	r2, [pc, #212]	; (8002090 <main+0xe4>)
 8001fba:	4936      	ldr	r1, [pc, #216]	; (8002094 <main+0xe8>)
	DAC_code_direction=0;
 8001fbc:	4c36      	ldr	r4, [pc, #216]	; (8002098 <main+0xec>)
	DAC_code=0x7FFFF;
 8001fbe:	4d37      	ldr	r5, [pc, #220]	; (800209c <main+0xf0>)
	cfg.PDN=0; // DAC power up
 8001fc0:	f883 a008 	strb.w	sl, [r3, #8]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8001fc4:	f8c3 a000 	str.w	sl, [r3]
 8001fc8:	6058      	str	r0, [r3, #4]
	DAC_code=0x7FFFF;
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <main+0xf4>)
	DAC_target_speed=0.001; //  V/s
 8001fcc:	6011      	str	r1, [r2, #0]
	DAC_code=0x7FFFF;
 8001fce:	602b      	str	r3, [r5, #0]
	DAC_code_direction=0;
 8001fd0:	f884 a000 	strb.w	sl, [r4]
  HAL_Init();
 8001fd4:	f000 fa40 	bl	8002458 <HAL_Init>
  SystemClock_Config();
 8001fd8:	f7ff fd1c 	bl	8001a14 <SystemClock_Config>
  MX_GPIO_Init();
 8001fdc:	f7ff fca0 	bl	8001920 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001fe0:	f000 f878 	bl	80020d4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001fe4:	f000 f89c 	bl	8002120 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001fe8:	f004 fb52 	bl	8006690 <MX_USB_DEVICE_Init>
	return *(__IO uint32_t *) Address;
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <main+0xf8>)
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8001fee:	4e2e      	ldr	r6, [pc, #184]	; (80020a8 <main+0xfc>)
	return *(__IO uint32_t *) Address;
 8001ff0:	6818      	ldr	r0, [r3, #0]
	cal_DAC_up_voltage=((float)EEPROM_read(0x00))/1000000; // Read top voltage calibration from EEPROM in uV value
 8001ff2:	f7fe fe53 	bl	8000c9c <__aeabi_ui2f>
 8001ff6:	492d      	ldr	r1, [pc, #180]	; (80020ac <main+0x100>)
 8001ff8:	f7fe ff5c 	bl	8000eb4 <__aeabi_fdiv>
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	; (80020b0 <main+0x104>)
	return *(__IO uint32_t *) Address;
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <main+0x108>)
	cal_DAC_up_voltage=((float)EEPROM_read(0x00))/1000000; // Read top voltage calibration from EEPROM in uV value
 8002000:	6010      	str	r0, [r2, #0]
 8002002:	4604      	mov	r4, r0
	return *(__IO uint32_t *) Address;
 8002004:	6818      	ldr	r0, [r3, #0]
	cal_DAC_down_voltage=((float)EEPROM_read(0x08))/-1000000; // Read top voltage calibration from EEPROM in uV value
 8002006:	f7fe fe49 	bl	8000c9c <__aeabi_ui2f>
 800200a:	492b      	ldr	r1, [pc, #172]	; (80020b8 <main+0x10c>)
 800200c:	f7fe ff52 	bl	8000eb4 <__aeabi_fdiv>
 8002010:	4601      	mov	r1, r0
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <main+0x110>)
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002014:	4620      	mov	r0, r4
	cal_DAC_down_voltage=((float)EEPROM_read(0x08))/-1000000; // Read top voltage calibration from EEPROM in uV value
 8002016:	6019      	str	r1, [r3, #0]
	DAC_fullrange_voltage=cal_DAC_up_voltage-cal_DAC_down_voltage;
 8002018:	f7fe fd8e 	bl	8000b38 <__aeabi_fsub>
 800201c:	6030      	str	r0, [r6, #0]
	DDS_Init();
 800201e:	f7ff fb19 	bl	8001654 <DDS_Init>
	DAC_SendInit();
 8002022:	f7ff fac3 	bl	80015ac <DAC_SendInit>
	DAC_Write(DAC_code); //Middle
 8002026:	6828      	ldr	r0, [r5, #0]
 8002028:	f7ff fa7c 	bl	8001524 <DAC_Write>
	HAL_Delay(10);
 800202c:	200a      	movs	r0, #10
 800202e:	f000 fa35 	bl	800249c <HAL_Delay>
	CDC_Transmit_FS(clear, strlen((const char *)clear));
 8002032:	4823      	ldr	r0, [pc, #140]	; (80020c0 <main+0x114>)
 8002034:	f7fe f8ae 	bl	8000194 <strlen>
 8002038:	4601      	mov	r1, r0
 800203a:	4821      	ldr	r0, [pc, #132]	; (80020c0 <main+0x114>)
 800203c:	b289      	uxth	r1, r1
 800203e:	f004 fbc1 	bl	80067c4 <CDC_Transmit_FS>
	HAL_Delay(10);
 8002042:	200a      	movs	r0, #10
 8002044:	f000 fa2a 	bl	800249c <HAL_Delay>
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8002048:	f04f 090a 	mov.w	r9, #10
 800204c:	4e1d      	ldr	r6, [pc, #116]	; (80020c4 <main+0x118>)
 800204e:	4f1e      	ldr	r7, [pc, #120]	; (80020c8 <main+0x11c>)
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8002050:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80020cc <main+0x120>
		if(USB_CDC_End_Line_Received)
 8002054:	7833      	ldrb	r3, [r6, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0fc      	beq.n	8002054 <main+0xa8>
			USB_CDC_End_Line_Received=0;
 800205a:	2500      	movs	r5, #0
 800205c:	f886 a000 	strb.w	sl, [r6]
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 8002060:	b2ec      	uxtb	r4, r5
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 8002062:	2200      	movs	r2, #0
 8002064:	4640      	mov	r0, r8
 8002066:	1939      	adds	r1, r7, r4
 8002068:	f7ff fa0a 	bl	8001480 <__circ_gbuf_pop>
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 800206c:	3501      	adds	r5, #1
				if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 800206e:	b120      	cbz	r0, 800207a <main+0xce>
 8002070:	f807 9004 	strb.w	r9, [r7, r4]
			Parsing_command();
 8002074:	f7ff fd74 	bl	8001b60 <Parsing_command>
 8002078:	e7ec      	b.n	8002054 <main+0xa8>
				if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 800207a:	5d3b      	ldrb	r3, [r7, r4]
 800207c:	2b0a      	cmp	r3, #10
 800207e:	d0f9      	beq.n	8002074 <main+0xc8>
 8002080:	2b0d      	cmp	r3, #13
 8002082:	d1ed      	bne.n	8002060 <main+0xb4>
 8002084:	e7f6      	b.n	8002074 <main+0xc8>
 8002086:	bf00      	nop
 8002088:	20000860 	.word	0x20000860
 800208c:	08010100 	.word	0x08010100
 8002090:	200008c4 	.word	0x200008c4
 8002094:	3a83126f 	.word	0x3a83126f
 8002098:	200008c8 	.word	0x200008c8
 800209c:	2000062c 	.word	0x2000062c
 80020a0:	0007ffff 	.word	0x0007ffff
 80020a4:	08080000 	.word	0x08080000
 80020a8:	200008a0 	.word	0x200008a0
 80020ac:	49742400 	.word	0x49742400
 80020b0:	2000089c 	.word	0x2000089c
 80020b4:	08080008 	.word	0x08080008
 80020b8:	c9742400 	.word	0xc9742400
 80020bc:	20000874 	.word	0x20000874
 80020c0:	200002b8 	.word	0x200002b8
 80020c4:	200008c3 	.word	0x200008c3
 80020c8:	200008a4 	.word	0x200008a4
 80020cc:	200002ac 	.word	0x200002ac

080020d0 <Error_Handler>:
 80020d0:	b672      	cpsid	i
	while (1)
 80020d2:	e7fe      	b.n	80020d2 <Error_Handler+0x2>

080020d4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020d6:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020da:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80020dc:	f44f 6700 	mov.w	r7, #2048	; 0x800
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020e0:	2501      	movs	r5, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020e2:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020e6:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80020e8:	220a      	movs	r2, #10
  hspi1.Instance = SPI1;
 80020ea:	480b      	ldr	r0, [pc, #44]	; (8002118 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020ec:	6046      	str	r6, [r0, #4]
  hspi1.Instance = SPI1;
 80020ee:	4e0b      	ldr	r6, [pc, #44]	; (800211c <MX_SPI1_Init+0x48>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020f0:	e9c0 5405 	strd	r5, r4, [r0, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020f4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80020f8:	60c7      	str	r7, [r0, #12]
  hspi1.Instance = SPI1;
 80020fa:	6006      	str	r6, [r0, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020fc:	61c1      	str	r1, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 80020fe:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002100:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002102:	6103      	str	r3, [r0, #16]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002104:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002106:	f002 f89b 	bl	8004240 <HAL_SPI_Init>
 800210a:	b900      	cbnz	r0, 800210e <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800210e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002112:	f7ff bfdd 	b.w	80020d0 <Error_Handler>
 8002116:	bf00      	nop
 8002118:	20000924 	.word	0x20000924
 800211c:	40013000 	.word	0x40013000

08002120 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002122:	2130      	movs	r1, #48	; 0x30
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002124:	2300      	movs	r3, #0
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002126:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800212a:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800212e:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8002132:	220a      	movs	r2, #10
  hspi2.Instance = SPI2;
 8002134:	480a      	ldr	r0, [pc, #40]	; (8002160 <MX_SPI2_Init+0x40>)
 8002136:	4e0b      	ldr	r6, [pc, #44]	; (8002164 <MX_SPI2_Init+0x44>)
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002138:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi2.Instance = SPI2;
 800213c:	e9c0 6700 	strd	r6, r7, [r0]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002140:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002144:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002148:	60c5      	str	r5, [r0, #12]
  hspi2.Init.CRCPolynomial = 10;
 800214a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800214c:	6083      	str	r3, [r0, #8]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002150:	f002 f876 	bl	8004240 <HAL_SPI_Init>
 8002154:	b900      	cbnz	r0, 8002158 <MX_SPI2_Init+0x38>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002158:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 800215c:	f7ff bfb8 	b.w	80020d0 <Error_Handler>
 8002160:	200008cc 	.word	0x200008cc
 8002164:	40003800 	.word	0x40003800

08002168 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	2300      	movs	r3, #0
{
 800216a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(spiHandle->Instance==SPI1)
 800216c:	6802      	ldr	r2, [r0, #0]
 800216e:	492d      	ldr	r1, [pc, #180]	; (8002224 <HAL_SPI_MspInit+0xbc>)
{
 8002170:	b08b      	sub	sp, #44	; 0x2c
  if(spiHandle->Instance==SPI1)
 8002172:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002178:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800217c:	9308      	str	r3, [sp, #32]
  if(spiHandle->Instance==SPI1)
 800217e:	d004      	beq.n	800218a <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_SPI_MspInit+0xc0>)
 8002182:	429a      	cmp	r2, r3
 8002184:	d026      	beq.n	80021d4 <HAL_SPI_MspInit+0x6c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002186:	b00b      	add	sp, #44	; 0x2c
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800218a:	f04f 0c05 	mov.w	ip, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800218e:	26e0      	movs	r6, #224	; 0xe0
 8002190:	2702      	movs	r7, #2
 8002192:	2400      	movs	r4, #0
 8002194:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	4825      	ldr	r0, [pc, #148]	; (8002230 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800219a:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 800219e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021a2:	621a      	str	r2, [r3, #32]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021aa:	9200      	str	r2, [sp, #0]
 80021ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	61da      	str	r2, [r3, #28]
 80021b6:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c8:	f8cd c020 	str.w	ip, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	f000 fba0 	bl	8002910 <HAL_GPIO_Init>
}
 80021d0:	b00b      	add	sp, #44	; 0x2c
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021d4:	f04f 0c05 	mov.w	ip, #5
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80021d8:	f44f 4630 	mov.w	r6, #45056	; 0xb000
 80021dc:	2702      	movs	r7, #2
 80021de:	2400      	movs	r4, #0
 80021e0:	2503      	movs	r5, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80021e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	4812      	ldr	r0, [pc, #72]	; (8002234 <HAL_SPI_MspInit+0xcc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24
 80021f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021f4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021f8:	9202      	str	r2, [sp, #8]
 80021fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	f042 0202 	orr.w	r2, r2, #2
 8002202:	61da      	str	r2, [r3, #28]
 8002204:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002206:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002210:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002216:	f8cd c020 	str.w	ip, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	f000 fb79 	bl	8002910 <HAL_GPIO_Init>
}
 800221e:	b00b      	add	sp, #44	; 0x2c
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002222:	bf00      	nop
 8002224:	40013000 	.word	0x40013000
 8002228:	40003800 	.word	0x40003800
 800222c:	40023800 	.word	0x40023800
 8002230:	40020000 	.word	0x40020000
 8002234:	40020400 	.word	0x40020400

08002238 <HAL_MspInit>:
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002238:	2101      	movs	r1, #1
  __HAL_RCC_COMP_CLK_ENABLE();
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_MspInit+0x88>)
{
 800223c:	b510      	push	{r4, lr}
  __HAL_RCC_COMP_CLK_ENABLE();
 800223e:	6a58      	ldr	r0, [r3, #36]	; 0x24
{
 8002240:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8002242:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002246:	6258      	str	r0, [r3, #36]	; 0x24
 8002248:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800224a:	2200      	movs	r2, #0
  __HAL_RCC_COMP_CLK_ENABLE();
 800224c:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8002250:	9401      	str	r4, [sp, #4]
 8002252:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002254:	6a1c      	ldr	r4, [r3, #32]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002256:	f06f 000b 	mvn.w	r0, #11
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	430c      	orrs	r4, r1
 800225c:	621c      	str	r4, [r3, #32]
 800225e:	6a1c      	ldr	r4, [r3, #32]
 8002260:	400c      	ands	r4, r1
 8002262:	9402      	str	r4, [sp, #8]
 8002264:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002268:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800226c:	625c      	str	r4, [r3, #36]	; 0x24
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	9303      	str	r3, [sp, #12]
 8002276:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8002278:	f000 f934 	bl	80024e4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2101      	movs	r1, #1
 8002280:	f06f 000a 	mvn.w	r0, #10
 8002284:	f000 f92e 	bl	80024e4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2101      	movs	r1, #1
 800228c:	f06f 0009 	mvn.w	r0, #9
 8002290:	f000 f928 	bl	80024e4 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2101      	movs	r1, #1
 8002298:	f06f 0004 	mvn.w	r0, #4
 800229c:	f000 f922 	bl	80024e4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2101      	movs	r1, #1
 80022a4:	f06f 0003 	mvn.w	r0, #3
 80022a8:	f000 f91c 	bl	80024e4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2101      	movs	r1, #1
 80022b0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b4:	b004      	add	sp, #16
 80022b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80022ba:	f000 b913 	b.w	80024e4 <HAL_NVIC_SetPriority>
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler>
 80022c6:	bf00      	nop

080022c8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <HardFault_Handler>
 80022ca:	bf00      	nop

080022cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <MemManage_Handler>
 80022ce:	bf00      	nop

080022d0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <BusFault_Handler>
 80022d2:	bf00      	nop

080022d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler>
 80022d6:	bf00      	nop

080022d8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop

080022dc <DebugMon_Handler>:
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <PendSV_Handler>:
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop

080022e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e4:	f000 b8c8 	b.w	8002478 <HAL_IncTick>

080022e8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 80022e8:	2004      	movs	r0, #4
 80022ea:	f000 bc03 	b.w	8002af4 <HAL_GPIO_EXTI_IRQHandler>
 80022ee:	bf00      	nop

080022f0 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022f0:	4801      	ldr	r0, [pc, #4]	; (80022f8 <USB_LP_IRQHandler+0x8>)
 80022f2:	f000 bc7f 	b.w	8002bf4 <HAL_PCD_IRQHandler>
 80022f6:	bf00      	nop
 80022f8:	20001604 	.word	0x20001604

080022fc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80022fc:	2001      	movs	r0, #1
 80022fe:	4770      	bx	lr

08002300 <_kill>:

int _kill(int pid, int sig)
{
 8002300:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002302:	f004 fc85 	bl	8006c10 <__errno>
 8002306:	2216      	movs	r2, #22
 8002308:	4603      	mov	r3, r0
	return -1;
}
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bd08      	pop	{r3, pc}
 8002312:	bf00      	nop

08002314 <_exit>:

void _exit (int status)
{
 8002314:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002316:	f004 fc7b 	bl	8006c10 <__errno>
 800231a:	2316      	movs	r3, #22
 800231c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800231e:	e7fe      	b.n	800231e <_exit+0xa>

08002320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002320:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	1e16      	subs	r6, r2, #0
 8002324:	dd07      	ble.n	8002336 <_read+0x16>
 8002326:	460c      	mov	r4, r1
 8002328:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800232a:	f3af 8000 	nop.w
 800232e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	42a5      	cmp	r5, r4
 8002334:	d1f9      	bne.n	800232a <_read+0xa>
	}

return len;
}
 8002336:	4630      	mov	r0, r6
 8002338:	bd70      	pop	{r4, r5, r6, pc}
 800233a:	bf00      	nop

0800233c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	1e16      	subs	r6, r2, #0
 8002340:	dd07      	ble.n	8002352 <_write+0x16>
 8002342:	460c      	mov	r4, r1
 8002344:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002346:	f814 0b01 	ldrb.w	r0, [r4], #1
 800234a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	42ac      	cmp	r4, r5
 8002350:	d1f9      	bne.n	8002346 <_write+0xa>
	}
	return len;
}
 8002352:	4630      	mov	r0, r6
 8002354:	bd70      	pop	{r4, r5, r6, pc}
 8002356:	bf00      	nop

08002358 <_close>:

int _close(int file)
{
	return -1;
}
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002364:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002366:	604b      	str	r3, [r1, #4]
}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800236c:	2001      	movs	r0, #1
 800236e:	4770      	bx	lr

08002370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002370:	2000      	movs	r0, #0
 8002372:	4770      	bx	lr

08002374 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	490d      	ldr	r1, [pc, #52]	; (80023ac <_sbrk+0x38>)
{
 8002376:	4603      	mov	r3, r0
 8002378:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800237a:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <_sbrk+0x3c>)
 800237c:	4c0d      	ldr	r4, [pc, #52]	; (80023b4 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800237e:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002380:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002382:	b120      	cbz	r0, 800238e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002384:	4403      	add	r3, r0
 8002386:	4293      	cmp	r3, r2
 8002388:	d807      	bhi.n	800239a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800238a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800238c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800238e:	4c0a      	ldr	r4, [pc, #40]	; (80023b8 <_sbrk+0x44>)
 8002390:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4403      	add	r3, r0
 8002394:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8002396:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002398:	d9f7      	bls.n	800238a <_sbrk+0x16>
    errno = ENOMEM;
 800239a:	f004 fc39 	bl	8006c10 <__errno>
 800239e:	220c      	movs	r2, #12
 80023a0:	4603      	mov	r3, r0
    return (void *)-1;
 80023a2:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	bf00      	nop
 80023ac:	20000630 	.word	0x20000630
 80023b0:	20004000 	.word	0x20004000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	20001900 	.word	0x20001900

080023bc <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023c2:	490d      	ldr	r1, [pc, #52]	; (80023f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d8:	4c0a      	ldr	r4, [pc, #40]	; (8002404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023e6:	f7ff ffe9 	bl	80023bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ea:	f004 fc17 	bl	8006c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ee:	f7ff fddd 	bl	8001fac <main>
  bx lr
 80023f2:	4770      	bx	lr
  ldr r0, =_sdata
 80023f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f8:	20000610 	.word	0x20000610
  ldr r2, =_sidata
 80023fc:	08009fc0 	.word	0x08009fc0
  ldr r2, =_sbss
 8002400:	20000610 	.word	0x20000610
  ldr r4, =_ebss
 8002404:	20001900 	.word	0x20001900

08002408 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC1_IRQHandler>
	...

0800240c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_InitTick+0x40>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b90b      	cbnz	r3, 8002418 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002414:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002416:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002418:	4605      	mov	r5, r0
 800241a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800241e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <HAL_InitTick+0x44>)
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	fbb0 f0f3 	udiv	r0, r0, r3
 800242a:	f000 f8a1 	bl	8002570 <HAL_SYSTICK_Config>
 800242e:	4604      	mov	r4, r0
 8002430:	2800      	cmp	r0, #0
 8002432:	d1ef      	bne.n	8002414 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002434:	2d0f      	cmp	r5, #15
 8002436:	d8ed      	bhi.n	8002414 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	4602      	mov	r2, r0
 800243a:	4629      	mov	r1, r5
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 f850 	bl	80024e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_InitTick+0x48>)
 8002446:	4620      	mov	r0, r4
 8002448:	601d      	str	r5, [r3, #0]
}
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	200002c4 	.word	0x200002c4
 8002450:	200002c0 	.word	0x200002c0
 8002454:	200002c8 	.word	0x200002c8

08002458 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
{
 800245a:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	f000 f830 	bl	80024c0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002460:	200f      	movs	r0, #15
 8002462:	f7ff ffd3 	bl	800240c <HAL_InitTick>
 8002466:	b110      	cbz	r0, 800246e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002468:	2401      	movs	r4, #1
}
 800246a:	4620      	mov	r0, r4
 800246c:	bd10      	pop	{r4, pc}
 800246e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002470:	f7ff fee2 	bl	8002238 <HAL_MspInit>
}
 8002474:	4620      	mov	r0, r4
 8002476:	bd10      	pop	{r4, pc}

08002478 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002478:	4a03      	ldr	r2, [pc, #12]	; (8002488 <HAL_IncTick+0x10>)
 800247a:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_IncTick+0x14>)
 800247c:	6813      	ldr	r3, [r2, #0]
 800247e:	6809      	ldr	r1, [r1, #0]
 8002480:	440b      	add	r3, r1
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	2000097c 	.word	0x2000097c
 800248c:	200002c4 	.word	0x200002c4

08002490 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002490:	4b01      	ldr	r3, [pc, #4]	; (8002498 <HAL_GetTick+0x8>)
 8002492:	6818      	ldr	r0, [r3, #0]
}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	2000097c 	.word	0x2000097c

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff fff6 	bl	8002490 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80024a6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80024a8:	d002      	beq.n	80024b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_Delay+0x20>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024b0:	f7ff ffee 	bl	8002490 <HAL_GetTick>
 80024b4:	1b40      	subs	r0, r0, r5
 80024b6:	42a0      	cmp	r0, r4
 80024b8:	d3fa      	bcc.n	80024b0 <HAL_Delay+0x14>
  {
  }
}
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	200002c4 	.word	0x200002c4

080024c0 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80024d2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80024da:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e6:	b430      	push	{r4, r5}
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ee:	f1c3 0507 	rsb	r5, r3, #7
 80024f2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	bf28      	it	cs
 80024fa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fc:	2c06      	cmp	r4, #6
 80024fe:	d919      	bls.n	8002534 <HAL_NVIC_SetPriority+0x50>
 8002500:	f04f 34ff 	mov.w	r4, #4294967295
 8002504:	3b03      	subs	r3, #3
 8002506:	409c      	lsls	r4, r3
 8002508:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 34ff 	mov.w	r4, #4294967295
 8002510:	40ac      	lsls	r4, r5
 8002512:	ea21 0104 	bic.w	r1, r1, r4
 8002516:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002518:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800251e:	db0c      	blt.n	800253a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	0109      	lsls	r1, r1, #4
 8002522:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002526:	b2c9      	uxtb	r1, r1
 8002528:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800252c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002530:	bc30      	pop	{r4, r5}
 8002532:	4770      	bx	lr
 8002534:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	4613      	mov	r3, r2
 8002538:	e7e8      	b.n	800250c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_NVIC_SetPriority+0x6c>)
 800253c:	f000 000f 	and.w	r0, r0, #15
 8002540:	0109      	lsls	r1, r1, #4
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	4403      	add	r3, r0
 8002546:	7619      	strb	r1, [r3, #24]
 8002548:	bc30      	pop	{r4, r5}
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00
 8002550:	e000ecfc 	.word	0xe000ecfc

08002554 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002554:	2800      	cmp	r0, #0
 8002556:	db07      	blt.n	8002568 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002558:	2301      	movs	r3, #1
 800255a:	f000 011f 	and.w	r1, r0, #31
 800255e:	4a03      	ldr	r2, [pc, #12]	; (800256c <HAL_NVIC_EnableIRQ+0x18>)
 8002560:	408b      	lsls	r3, r1
 8002562:	0940      	lsrs	r0, r0, #5
 8002564:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100

08002570 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	3801      	subs	r0, #1
 8002572:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002576:	d20d      	bcs.n	8002594 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002578:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800257c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	4c06      	ldr	r4, [pc, #24]	; (800259c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002584:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258a:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 800258c:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002590:	6019      	str	r1, [r3, #0]
 8002592:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002594:	2001      	movs	r0, #1
 8002596:	4770      	bx	lr
 8002598:	e000e010 	.word	0xe000e010
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <FLASH_SetErrorCode+0xa0>)
{
 80025a2:	b4f0      	push	{r4, r5, r6, r7}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80025aa:	d03a      	beq.n	8002622 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <FLASH_SetErrorCode+0xa4>)
 80025ae:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 80025b2:	6953      	ldr	r3, [r2, #20]
 80025b4:	f44f 67e0 	mov.w	r7, #1792	; 0x700
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	6153      	str	r3, [r2, #20]
 80025be:	f44f 6630 	mov.w	r6, #2816	; 0xb00
 80025c2:	f44f 6050 	mov.w	r0, #3328	; 0xd00
 80025c6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80025ca:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80025ce:	f44f 7540 	mov.w	r5, #768	; 0x300
    flags |= FLASH_FLAG_WRPERR;
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80025d6:	4c1a      	ldr	r4, [pc, #104]	; (8002640 <FLASH_SetErrorCode+0xa0>)
 80025d8:	69a4      	ldr	r4, [r4, #24]
 80025da:	05a4      	lsls	r4, r4, #22
 80025dc:	d508      	bpl.n	80025f0 <FLASH_SetErrorCode+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025de:	4660      	mov	r0, ip
 80025e0:	463a      	mov	r2, r7
 80025e2:	4631      	mov	r1, r6
    flags |= FLASH_FLAG_PGAERR;
 80025e4:	462b      	mov	r3, r5
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025e6:	4d17      	ldr	r5, [pc, #92]	; (8002644 <FLASH_SetErrorCode+0xa4>)
 80025e8:	696c      	ldr	r4, [r5, #20]
 80025ea:	f044 0401 	orr.w	r4, r4, #1
 80025ee:	616c      	str	r4, [r5, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80025f0:	4c13      	ldr	r4, [pc, #76]	; (8002640 <FLASH_SetErrorCode+0xa0>)
 80025f2:	69a4      	ldr	r4, [r4, #24]
 80025f4:	0524      	lsls	r4, r4, #20
 80025f6:	d506      	bpl.n	8002606 <FLASH_SetErrorCode+0x66>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80025f8:	4602      	mov	r2, r0
 80025fa:	4812      	ldr	r0, [pc, #72]	; (8002644 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_OPTVERR;
 80025fc:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80025fe:	6941      	ldr	r1, [r0, #20]
 8002600:	f041 0104 	orr.w	r1, r1, #4
 8002604:	6141      	str	r1, [r0, #20]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <FLASH_SetErrorCode+0xa0>)
 8002608:	6989      	ldr	r1, [r1, #24]
 800260a:	0549      	lsls	r1, r1, #21
 800260c:	d505      	bpl.n	800261a <FLASH_SetErrorCode+0x7a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800260e:	490d      	ldr	r1, [pc, #52]	; (8002644 <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_SIZERR;
 8002610:	4613      	mov	r3, r2
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002612:	694a      	ldr	r2, [r1, #20]
 8002614:	f042 0208 	orr.w	r2, r2, #8
 8002618:	614a      	str	r2, [r1, #20]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800261a:	4a09      	ldr	r2, [pc, #36]	; (8002640 <FLASH_SetErrorCode+0xa0>)
}
 800261c:	bcf0      	pop	{r4, r5, r6, r7}
  __HAL_FLASH_CLEAR_FLAG(flags);
 800261e:	6193      	str	r3, [r2, #24]
}
 8002620:	4770      	bx	lr
 8002622:	f44f 6c60 	mov.w	ip, #3584	; 0xe00
 8002626:	f44f 67c0 	mov.w	r7, #1536	; 0x600
 800262a:	f44f 6620 	mov.w	r6, #2560	; 0xa00
 800262e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800263a:	f44f 7500 	mov.w	r5, #512	; 0x200
 800263e:	e7ca      	b.n	80025d6 <FLASH_SetErrorCode+0x36>
 8002640:	40023c00 	.word	0x40023c00
 8002644:	20000980 	.word	0x20000980

08002648 <FLASH_WaitForLastOperation>:
{
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff ff20 	bl	8002490 <HAL_GetTick>
 8002650:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002652:	4e15      	ldr	r6, [pc, #84]	; (80026a8 <FLASH_WaitForLastOperation+0x60>)
 8002654:	1c60      	adds	r0, r4, #1
 8002656:	d11c      	bne.n	8002692 <FLASH_WaitForLastOperation+0x4a>
 8002658:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <FLASH_WaitForLastOperation+0x60>)
 800265a:	6993      	ldr	r3, [r2, #24]
 800265c:	07d9      	lsls	r1, r3, #31
 800265e:	d4fc      	bmi.n	800265a <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <FLASH_WaitForLastOperation+0x60>)
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	0794      	lsls	r4, r2, #30
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002666:	bf44      	itt	mi
 8002668:	2202      	movmi	r2, #2
 800266a:	619a      	strmi	r2, [r3, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800266c:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <FLASH_WaitForLastOperation+0x60>)
 800266e:	699a      	ldr	r2, [r3, #24]
 8002670:	05d0      	lsls	r0, r2, #23
 8002672:	d40a      	bmi.n	800268a <FLASH_WaitForLastOperation+0x42>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002674:	699a      	ldr	r2, [r3, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002676:	0511      	lsls	r1, r2, #20
 8002678:	d407      	bmi.n	800268a <FLASH_WaitForLastOperation+0x42>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800267a:	699a      	ldr	r2, [r3, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800267c:	0552      	lsls	r2, r2, #21
 800267e:	d404      	bmi.n	800268a <FLASH_WaitForLastOperation+0x42>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002680:	6998      	ldr	r0, [r3, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8002682:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8002686:	d100      	bne.n	800268a <FLASH_WaitForLastOperation+0x42>
}
 8002688:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800268a:	f7ff ff89 	bl	80025a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800268e:	2001      	movs	r0, #1
}
 8002690:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002692:	69b3      	ldr	r3, [r6, #24]
 8002694:	07db      	lsls	r3, r3, #31
 8002696:	d5e3      	bpl.n	8002660 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002698:	b124      	cbz	r4, 80026a4 <FLASH_WaitForLastOperation+0x5c>
 800269a:	f7ff fef9 	bl	8002490 <HAL_GetTick>
 800269e:	1b40      	subs	r0, r0, r5
 80026a0:	42a0      	cmp	r0, r4
 80026a2:	d9d7      	bls.n	8002654 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 80026a4:	2003      	movs	r0, #3
}
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	40023c00 	.word	0x40023c00

080026ac <HAL_FLASHEx_DATAEEPROM_Unlock>:
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x18>)
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	07d2      	lsls	r2, r2, #31
 80026b2:	d505      	bpl.n	80026c0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x14>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
    FLASH->PEKEYR = FLASH_PEKEY2;
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>)
    FLASH->PEKEYR = FLASH_PEKEY1;
 80026b8:	60d9      	str	r1, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 80026ba:	2000      	movs	r0, #0
    FLASH->PEKEYR = FLASH_PEKEY2;
 80026bc:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80026be:	4770      	bx	lr
    return HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
}
 80026c2:	4770      	bx	lr
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	89abcdef 	.word	0x89abcdef
 80026cc:	02030405 	.word	0x02030405

080026d0 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)

  return HAL_OK;
}
 80026d2:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80026d4:	6853      	ldr	r3, [r2, #4]
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6053      	str	r3, [r2, #4]
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00

080026e4 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80026e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026e8:	4e87      	ldr	r6, [pc, #540]	; (8002908 <HAL_FLASHEx_DATAEEPROM_Program+0x224>)
 80026ea:	7c33      	ldrb	r3, [r6, #16]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d01f      	beq.n	8002730 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>
 80026f0:	2701      	movs	r7, #1
 80026f2:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026f8:	4688      	mov	r8, r1
 80026fa:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80026fc:	7437      	strb	r7, [r6, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026fe:	f7ff ffa3 	bl	8002648 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8002702:	4604      	mov	r4, r0
 8002704:	b978      	cbnz	r0, 8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8002706:	2d02      	cmp	r5, #2
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002708:	6170      	str	r0, [r6, #20]
    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800270a:	d045      	beq.n	8002798 <HAL_FLASHEx_DATAEEPROM_Program+0xb4>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800270c:	2d01      	cmp	r5, #1
 800270e:	d052      	beq.n	80027b6 <HAL_FLASHEx_DATAEEPROM_Program+0xd2>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8002710:	b195      	cbz	r5, 8002738 <HAL_FLASHEx_DATAEEPROM_Program+0x54>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8002712:	2d04      	cmp	r5, #4
 8002714:	f000 8083 	beq.w	800281e <HAL_FLASHEx_DATAEEPROM_Program+0x13a>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8002718:	2d08      	cmp	r5, #8
 800271a:	f000 80ab 	beq.w	8002874 <HAL_FLASHEx_DATAEEPROM_Program+0x190>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 800271e:	2d10      	cmp	r5, #16
 8002720:	f000 80c9 	beq.w	80028b6 <HAL_FLASHEx_DATAEEPROM_Program+0x1d2>
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
    }
    else
    {
      status = HAL_ERROR;
 8002724:	463c      	mov	r4, r7
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002726:	2300      	movs	r3, #0

  return status;
}
 8002728:	4620      	mov	r0, r4
  __HAL_UNLOCK(&pFlash);
 800272a:	7433      	strb	r3, [r6, #16]
}
 800272c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8002730:	2402      	movs	r4, #2
}
 8002732:	4620      	mov	r0, r4
 8002734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002738:	f24c 3050 	movw	r0, #50000	; 0xc350
 800273c:	f7ff ff84 	bl	8002648 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8002740:	4604      	mov	r4, r0
 8002742:	2800      	cmp	r0, #0
 8002744:	d1ef      	bne.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
#if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
    if(Data != (uint8_t) 0x00U)
 8002746:	f019 02ff 	ands.w	r2, r9, #255	; 0xff
 800274a:	f040 808b 	bne.w	8002864 <HAL_FLASHEx_DATAEEPROM_Program+0x180>
    }
    else
    {
      tmpaddr = Address & 0xFFFFFFFCU;
      tmp = * (__IO uint32_t *) tmpaddr;
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	f008 0303 	and.w	r3, r8, #3
      tmpaddr = Address & 0xFFFFFFFCU;
 8002754:	f028 0803 	bic.w	r8, r8, #3
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 8002758:	00db      	lsls	r3, r3, #3
      tmp = * (__IO uint32_t *) tmpaddr;
 800275a:	f8d8 4000 	ldr.w	r4, [r8]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800275e:	409a      	lsls	r2, r3
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002760:	f24c 3050 	movw	r0, #50000	; 0xc350
      tmp &= ~tmpaddr;
 8002764:	ea24 0402 	bic.w	r4, r4, r2
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002768:	f7ff ff6e 	bl	8002648 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800276c:	4603      	mov	r3, r0
 800276e:	b930      	cbnz	r0, 800277e <HAL_FLASHEx_DATAEEPROM_Program+0x9a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002770:	6173      	str	r3, [r6, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002772:	f24c 3050 	movw	r0, #50000	; 0xc350
      *(__IO uint32_t *) Address = 0x00000000U;
 8002776:	f8c8 3000 	str.w	r3, [r8]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800277a:	f7ff ff65 	bl	8002648 <FLASH_WaitForLastOperation>
      __HAL_UNLOCK(&pFlash);
 800277e:	2300      	movs	r3, #0
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8002780:	4622      	mov	r2, r4
 8002782:	4641      	mov	r1, r8
 8002784:	2010      	movs	r0, #16
      __HAL_UNLOCK(&pFlash);
 8002786:	7433      	strb	r3, [r6, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 8002788:	f7ff ffac 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
      __HAL_LOCK(&pFlash);
 800278c:	7c33      	ldrb	r3, [r6, #16]
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800278e:	4604      	mov	r4, r0
      __HAL_LOCK(&pFlash);
 8002790:	2b01      	cmp	r3, #1
 8002792:	d1c8      	bne.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
 8002794:	2402      	movs	r4, #2
 8002796:	e7c6      	b.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002798:	f24c 3050 	movw	r0, #50000	; 0xc350
 800279c:	f7ff ff54 	bl	8002648 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 80027a0:	4604      	mov	r4, r0
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d1bf      	bne.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  {
    *(__IO uint32_t *)Address = Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027a6:	f24c 3050 	movw	r0, #50000	; 0xc350
    *(__IO uint32_t *)Address = Data;
 80027aa:	f8c8 9000 	str.w	r9, [r8]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027ae:	f7ff ff4b 	bl	8002648 <FLASH_WaitForLastOperation>
 80027b2:	4604      	mov	r4, r0
 80027b4:	e7b7      	b.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027ba:	f7ff ff45 	bl	8002648 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80027be:	4604      	mov	r4, r0
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d1b0      	bne.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80027c4:	fa1f f289 	uxth.w	r2, r9
    if(Data != (uint16_t)0x0000U)
 80027c8:	2a00      	cmp	r2, #0
 80027ca:	f040 8089 	bne.w	80028e0 <HAL_FLASHEx_DATAEEPROM_Program+0x1fc>
      if((Address & 0x3U) != 0x3U)
 80027ce:	f008 0303 	and.w	r3, r8, #3
 80027d2:	2b03      	cmp	r3, #3
      __HAL_UNLOCK(&pFlash);
 80027d4:	7432      	strb	r2, [r6, #16]
      if((Address & 0x3U) != 0x3U)
 80027d6:	f000 808b 	beq.w	80028f0 <HAL_FLASHEx_DATAEEPROM_Program+0x20c>
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80027da:	f64f 72ff 	movw	r2, #65535	; 0xffff
        tmpaddr = Address & 0xFFFFFFFCU;
 80027de:	f028 0803 	bic.w	r8, r8, #3
        tmp = * (__IO uint32_t *) tmpaddr;
 80027e2:	f8d8 4000 	ldr.w	r4, [r8]
        tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027ec:	f24c 3050 	movw	r0, #50000	; 0xc350
        tmp &= ~tmpaddr;
 80027f0:	ea24 0403 	bic.w	r4, r4, r3
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027f4:	f7ff ff28 	bl	8002648 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80027f8:	4603      	mov	r3, r0
 80027fa:	b930      	cbnz	r0, 800280a <HAL_FLASHEx_DATAEEPROM_Program+0x126>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027fc:	6170      	str	r0, [r6, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027fe:	f24c 3050 	movw	r0, #50000	; 0xc350
      *(__IO uint32_t *) Address = 0x00000000U;
 8002802:	f8c8 3000 	str.w	r3, [r8]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002806:	f7ff ff1f 	bl	8002648 <FLASH_WaitForLastOperation>
        status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
 800280a:	4622      	mov	r2, r4
 800280c:	4641      	mov	r1, r8
 800280e:	2010      	movs	r0, #16
 8002810:	f7ff ff68 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
 8002814:	4604      	mov	r4, r0
      __HAL_LOCK(&pFlash);
 8002816:	7c33      	ldrb	r3, [r6, #16]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d184      	bne.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
 800281c:	e7ba      	b.n	8002794 <HAL_FLASHEx_DATAEEPROM_Program+0xb0>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800281e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002822:	f7ff ff11 	bl	8002648 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002826:	4604      	mov	r4, r0
 8002828:	2800      	cmp	r0, #0
 800282a:	f47f af7c 	bne.w	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800282e:	4a37      	ldr	r2, [pc, #220]	; (800290c <HAL_FLASHEx_DATAEEPROM_Program+0x228>)
 8002830:	6853      	ldr	r3, [r2, #4]
 8002832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002836:	6053      	str	r3, [r2, #4]
    if(Data != (uint8_t)0x00U)
 8002838:	f019 02ff 	ands.w	r2, r9, #255	; 0xff
 800283c:	d112      	bne.n	8002864 <HAL_FLASHEx_DATAEEPROM_Program+0x180>
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800283e:	23ff      	movs	r3, #255	; 0xff
 8002840:	f008 0203 	and.w	r2, r8, #3
      tmpaddr = Address & 0xFFFFFFFCU;
 8002844:	f028 0803 	bic.w	r8, r8, #3
      tmp = * (__IO uint32_t *) tmpaddr;
 8002848:	f8d8 4000 	ldr.w	r4, [r8]
      tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
 800284c:	00d2      	lsls	r2, r2, #3
 800284e:	4093      	lsls	r3, r2
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002850:	f24c 3050 	movw	r0, #50000	; 0xc350
      tmp &= ~tmpaddr;
 8002854:	ea24 0403 	bic.w	r4, r4, r3
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002858:	f7ff fef6 	bl	8002648 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800285c:	4603      	mov	r3, r0
 800285e:	2800      	cmp	r0, #0
 8002860:	d18d      	bne.n	800277e <HAL_FLASHEx_DATAEEPROM_Program+0x9a>
 8002862:	e785      	b.n	8002770 <HAL_FLASHEx_DATAEEPROM_Program+0x8c>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002864:	f24c 3050 	movw	r0, #50000	; 0xc350
      *(__IO uint8_t *)Address = Data;
 8002868:	f888 2000 	strb.w	r2, [r8]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800286c:	f7ff feec 	bl	8002648 <FLASH_WaitForLastOperation>
 8002870:	4604      	mov	r4, r0
 8002872:	e758      	b.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002874:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002878:	f7ff fee6 	bl	8002648 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800287c:	4604      	mov	r4, r0
 800287e:	2800      	cmp	r0, #0
 8002880:	f47f af51 	bne.w	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8002884:	4921      	ldr	r1, [pc, #132]	; (800290c <HAL_FLASHEx_DATAEEPROM_Program+0x228>)
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8002886:	fa1f f289 	uxth.w	r2, r9
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 800288a:	684b      	ldr	r3, [r1, #4]
 800288c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002890:	604b      	str	r3, [r1, #4]
    if(Data != (uint16_t)0x0000U)
 8002892:	bb2a      	cbnz	r2, 80028e0 <HAL_FLASHEx_DATAEEPROM_Program+0x1fc>
      if((Address & 0x3U) != 0x3U)
 8002894:	f008 0303 	and.w	r3, r8, #3
 8002898:	2b03      	cmp	r3, #3
      __HAL_UNLOCK(&pFlash);
 800289a:	7430      	strb	r0, [r6, #16]
      if((Address & 0x3U) != 0x3U)
 800289c:	d19d      	bne.n	80027da <HAL_FLASHEx_DATAEEPROM_Program+0xf6>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 800289e:	4641      	mov	r1, r8
 80028a0:	2200      	movs	r2, #0
 80028a2:	2004      	movs	r0, #4
 80028a4:	f7ff ff1e 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 80028a8:	2200      	movs	r2, #0
 80028aa:	f108 0101 	add.w	r1, r8, #1
 80028ae:	2004      	movs	r0, #4
 80028b0:	f7ff ff18 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
      __HAL_LOCK(&pFlash);
 80028b4:	e7af      	b.n	8002816 <HAL_FLASHEx_DATAEEPROM_Program+0x132>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028ba:	f7ff fec5 	bl	8002648 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80028be:	4604      	mov	r4, r0
 80028c0:	2800      	cmp	r0, #0
 80028c2:	f47f af30 	bne.w	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80028c6:	4a11      	ldr	r2, [pc, #68]	; (800290c <HAL_FLASHEx_DATAEEPROM_Program+0x228>)
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028c8:	f24c 3050 	movw	r0, #50000	; 0xc350
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 80028cc:	6853      	ldr	r3, [r2, #4]
 80028ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d2:	6053      	str	r3, [r2, #4]
    *(__IO uint32_t *)Address = Data;
 80028d4:	f8c8 9000 	str.w	r9, [r8]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028d8:	f7ff feb6 	bl	8002648 <FLASH_WaitForLastOperation>
 80028dc:	4604      	mov	r4, r0
 80028de:	e722      	b.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028e0:	f24c 3050 	movw	r0, #50000	; 0xc350
      *(__IO uint16_t *)Address = Data;
 80028e4:	f8a8 2000 	strh.w	r2, [r8]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028e8:	f7ff feae 	bl	8002648 <FLASH_WaitForLastOperation>
 80028ec:	4604      	mov	r4, r0
 80028ee:	e71a      	b.n	8002726 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
 80028f0:	4602      	mov	r2, r0
 80028f2:	4641      	mov	r1, r8
 80028f4:	2004      	movs	r0, #4
 80028f6:	f7ff fef5 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
 80028fa:	4622      	mov	r2, r4
 80028fc:	f108 0101 	add.w	r1, r8, #1
 8002900:	2004      	movs	r0, #4
 8002902:	f7ff feef 	bl	80026e4 <HAL_FLASHEx_DATAEEPROM_Program>
 8002906:	e786      	b.n	8002816 <HAL_FLASHEx_DATAEEPROM_Program+0x132>
 8002908:	20000980 	.word	0x20000980
 800290c:	40023c00 	.word	0x40023c00

08002910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002914:	680c      	ldr	r4, [r1, #0]
{
 8002916:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8002918:	2c00      	cmp	r4, #0
 800291a:	d07c      	beq.n	8002a16 <HAL_GPIO_Init+0x106>
  uint32_t position = 0x00;
 800291c:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800291e:	f04f 0a01 	mov.w	sl, #1
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002922:	4689      	mov	r9, r1
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002924:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8002adc <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002928:	fa0a fc03 	lsl.w	ip, sl, r3
    if (iocurrent)
 800292c:	ea1c 0804 	ands.w	r8, ip, r4
 8002930:	d06d      	beq.n	8002a0e <HAL_GPIO_Init+0xfe>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002932:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8002936:	f005 0203 	and.w	r2, r5, #3
 800293a:	1e51      	subs	r1, r2, #1
 800293c:	2901      	cmp	r1, #1
 800293e:	d96d      	bls.n	8002a1c <HAL_GPIO_Init+0x10c>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002940:	2a03      	cmp	r2, #3
 8002942:	f040 80ad 	bne.w	8002aa0 <HAL_GPIO_Init+0x190>
 8002946:	005f      	lsls	r7, r3, #1
 8002948:	40ba      	lsls	r2, r7
 800294a:	43d1      	mvns	r1, r2
 800294c:	9100      	str	r1, [sp, #0]
      temp = GPIOx->MODER;
 800294e:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002950:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002952:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002956:	ea01 0107 	and.w	r1, r1, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800295a:	ea42 0201 	orr.w	r2, r2, r1
      GPIOx->MODER = temp;
 800295e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002960:	d055      	beq.n	8002a0e <HAL_GPIO_Init+0xfe>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002962:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002964:	4e58      	ldr	r6, [pc, #352]	; (8002ac8 <HAL_GPIO_Init+0x1b8>)
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	6a31      	ldr	r1, [r6, #32]
 800296c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002970:	f041 0101 	orr.w	r1, r1, #1
 8002974:	6231      	str	r1, [r6, #32]
 8002976:	6a31      	ldr	r1, [r6, #32]
 8002978:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800297c:	f001 0101 	and.w	r1, r1, #1
 8002980:	9103      	str	r1, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002982:	f003 0103 	and.w	r1, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	9e03      	ldr	r6, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002988:	0089      	lsls	r1, r1, #2
        temp = SYSCFG->EXTICR[position >> 2];
 800298a:	6896      	ldr	r6, [r2, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800298c:	408f      	lsls	r7, r1
 800298e:	ea26 0607 	bic.w	r6, r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002992:	4f4e      	ldr	r7, [pc, #312]	; (8002acc <HAL_GPIO_Init+0x1bc>)
 8002994:	42b8      	cmp	r0, r7
 8002996:	d013      	beq.n	80029c0 <HAL_GPIO_Init+0xb0>
 8002998:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800299c:	42b8      	cmp	r0, r7
 800299e:	f000 808a 	beq.w	8002ab6 <HAL_GPIO_Init+0x1a6>
 80029a2:	4f4b      	ldr	r7, [pc, #300]	; (8002ad0 <HAL_GPIO_Init+0x1c0>)
 80029a4:	42b8      	cmp	r0, r7
 80029a6:	f000 808a 	beq.w	8002abe <HAL_GPIO_Init+0x1ae>
 80029aa:	4f4a      	ldr	r7, [pc, #296]	; (8002ad4 <HAL_GPIO_Init+0x1c4>)
 80029ac:	42b8      	cmp	r0, r7
 80029ae:	d07d      	beq.n	8002aac <HAL_GPIO_Init+0x19c>
 80029b0:	4f49      	ldr	r7, [pc, #292]	; (8002ad8 <HAL_GPIO_Init+0x1c8>)
 80029b2:	42b8      	cmp	r0, r7
 80029b4:	bf0c      	ite	eq
 80029b6:	2704      	moveq	r7, #4
 80029b8:	2705      	movne	r7, #5
 80029ba:	fa07 f101 	lsl.w	r1, r7, r1
 80029be:	430e      	orrs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80029c0:	6096      	str	r6, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029c2:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI->IMR;
 80029c6:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ca:	03e9      	lsls	r1, r5, #15
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029cc:	bf54      	ite	pl
 80029ce:	4032      	andpl	r2, r6
        {
          SET_BIT(temp, iocurrent);
 80029d0:	ea48 0202 	orrmi.w	r2, r8, r2
        }
        EXTI->IMR = temp;
 80029d4:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR;
 80029d8:	f8db 1004 	ldr.w	r1, [fp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029dc:	03aa      	lsls	r2, r5, #14
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029de:	bf54      	ite	pl
 80029e0:	4031      	andpl	r1, r6
        {
          SET_BIT(temp, iocurrent);
 80029e2:	ea48 0101 	orrmi.w	r1, r8, r1
        }
        EXTI->EMR = temp;
 80029e6:	f8cb 1004 	str.w	r1, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	f8db 1008 	ldr.w	r1, [fp, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ee:	02ef      	lsls	r7, r5, #11
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029f0:	bf54      	ite	pl
 80029f2:	4031      	andpl	r1, r6
        {
          SET_BIT(temp, iocurrent);
 80029f4:	ea48 0101 	orrmi.w	r1, r8, r1
        }
        EXTI->RTSR = temp;
 80029f8:	f8cb 1008 	str.w	r1, [fp, #8]

        temp = EXTI->FTSR;
 80029fc:	f8db 200c 	ldr.w	r2, [fp, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a00:	02a9      	lsls	r1, r5, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a02:	bf54      	ite	pl
 8002a04:	4032      	andpl	r2, r6
        {
          SET_BIT(temp, iocurrent);
 8002a06:	ea48 0202 	orrmi.w	r2, r8, r2
        }
        EXTI->FTSR = temp;
 8002a0a:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 8002a0e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a10:	fa34 f203 	lsrs.w	r2, r4, r3
 8002a14:	d188      	bne.n	8002928 <HAL_GPIO_Init+0x18>
  }
}
 8002a16:	b005      	add	sp, #20
 8002a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a1c:	2103      	movs	r1, #3
        temp = GPIOx->OSPEEDR;
 8002a1e:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a20:	005f      	lsls	r7, r3, #1
 8002a22:	40b9      	lsls	r1, r7
 8002a24:	ea26 0e01 	bic.w	lr, r6, r1
 8002a28:	43c9      	mvns	r1, r1
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a2a:	f8d9 600c 	ldr.w	r6, [r9, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a2e:	9100      	str	r1, [sp, #0]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a30:	40be      	lsls	r6, r7
 8002a32:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002a36:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a38:	f8d0 e004 	ldr.w	lr, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3c:	f3c5 1600 	ubfx	r6, r5, #4, #1
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002a40:	ea2e 0c0c 	bic.w	ip, lr, ip
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a44:	409e      	lsls	r6, r3
 8002a46:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OTYPER = temp;
 8002a4a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002a4c:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a50:	ea06 0c01 	and.w	ip, r6, r1
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002a54:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002a58:	fa06 f607 	lsl.w	r6, r6, r7
 8002a5c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->PUPDR = temp;
 8002a60:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	d001      	beq.n	8002a68 <HAL_GPIO_Init+0x158>
 8002a64:	40ba      	lsls	r2, r7
 8002a66:	e772      	b.n	800294e <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3];
 8002a68:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002a6c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002a70:	f8de 1020 	ldr.w	r1, [lr, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002a74:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8002a78:	9101      	str	r1, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002a80:	fa01 f60c 	lsl.w	r6, r1, ip
 8002a84:	9901      	ldr	r1, [sp, #4]
 8002a86:	40ba      	lsls	r2, r7
 8002a88:	ea21 0606 	bic.w	r6, r1, r6
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002a8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002a90:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002a92:	fa01 f60c 	lsl.w	r6, r1, ip
 8002a96:	9901      	ldr	r1, [sp, #4]
 8002a98:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3] = temp;
 8002a9a:	f8ce 6020 	str.w	r6, [lr, #32]
 8002a9e:	e756      	b.n	800294e <HAL_GPIO_Init+0x3e>
 8002aa0:	2103      	movs	r1, #3
 8002aa2:	005f      	lsls	r7, r3, #1
 8002aa4:	40b9      	lsls	r1, r7
 8002aa6:	43c9      	mvns	r1, r1
 8002aa8:	9100      	str	r1, [sp, #0]
 8002aaa:	e7cf      	b.n	8002a4c <HAL_GPIO_Init+0x13c>
 8002aac:	2703      	movs	r7, #3
 8002aae:	fa07 f101 	lsl.w	r1, r7, r1
 8002ab2:	430e      	orrs	r6, r1
 8002ab4:	e784      	b.n	80029c0 <HAL_GPIO_Init+0xb0>
 8002ab6:	fa0a f101 	lsl.w	r1, sl, r1
 8002aba:	430e      	orrs	r6, r1
 8002abc:	e780      	b.n	80029c0 <HAL_GPIO_Init+0xb0>
 8002abe:	2702      	movs	r7, #2
 8002ac0:	fa07 f101 	lsl.w	r1, r7, r1
 8002ac4:	430e      	orrs	r6, r1
 8002ac6:	e77b      	b.n	80029c0 <HAL_GPIO_Init+0xb0>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40010400 	.word	0x40010400

08002ae0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ae0:	6903      	ldr	r3, [r0, #16]
 8002ae2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ae4:	bf14      	ite	ne
 8002ae6:	2001      	movne	r0, #1
 8002ae8:	2000      	moveq	r0, #0
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aec:	b902      	cbnz	r2, 8002af0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002aee:	0409      	lsls	r1, r1, #16
 8002af0:	6181      	str	r1, [r0, #24]
  }
}
 8002af2:	4770      	bx	lr

08002af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002af6:	6951      	ldr	r1, [r2, #20]
 8002af8:	4201      	tst	r1, r0
 8002afa:	d100      	bne.n	8002afe <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002afc:	4770      	bx	lr
{
 8002afe:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b00:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b02:	f7fe ffc7 	bl	8001a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b06:	bd08      	pop	{r3, pc}
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d054      	beq.n	8002bba <HAL_PCD_Init+0xae>
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b12:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002b16:	4604      	mov	r4, r0
{
 8002b18:	b087      	sub	sp, #28
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d046      	beq.n	8002bb0 <HAL_PCD_Init+0xa4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b22:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b24:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b26:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002b2a:	f001 ff9d 	bl	8004a68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	6860      	ldr	r0, [r4, #4]
 8002b30:	b340      	cbz	r0, 8002b84 <HAL_PCD_Init+0x78>
 8002b32:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b34:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b36:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 8002b38:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002b3c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	1c55      	adds	r5, r2, #1
    hpcd->IN_ep[i].num = i;
 8002b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b46:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	b2ea      	uxtb	r2, r5
 8002b4a:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b4c:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8002b50:	f883 6029 	strb.w	r6, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b54:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b58:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5a:	d3ed      	bcc.n	8002b38 <HAL_PCD_Init+0x2c>
 8002b5c:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b5e:	4611      	mov	r1, r2
 8002b60:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002b64:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	1c55      	adds	r5, r2, #1
    hpcd->OUT_ep[i].num = i;
 8002b6a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6e:	b2ea      	uxtb	r2, r5
 8002b70:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b72:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8002b76:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7a:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b7e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b82:	d3ed      	bcc.n	8002b60 <HAL_PCD_Init+0x54>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b84:	4625      	mov	r5, r4
 8002b86:	466e      	mov	r6, sp
 8002b88:	f855 cb10 	ldr.w	ip, [r5], #16
 8002b8c:	1d27      	adds	r7, r4, #4
 8002b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002b92:	682d      	ldr	r5, [r5, #0]
 8002b94:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002b98:	4660      	mov	r0, ip
 8002b9a:	6035      	str	r5, [r6, #0]
 8002b9c:	f001 ff6e 	bl	8004a7c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ba0:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8002ba2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002ba4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ba8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8002bac:	b007      	add	sp, #28
 8002bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002bb0:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002bb4:	f003 fef2 	bl	800699c <HAL_PCD_MspInit>
 8002bb8:	e7b3      	b.n	8002b22 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bc0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002bc2:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d011      	beq.n	8002bee <HAL_PCD_Start+0x2e>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8002bce:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002bd0:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002bd4:	f001 ff3e 	bl	8004a54 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bd8:	4629      	mov	r1, r5
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f003 fed2 	bl	8006984 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	f002 ff61 	bl	8005aa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002bec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002bee:	2002      	movs	r0, #2
}
 8002bf0:	bd38      	pop	{r3, r4, r5, pc}
 8002bf2:	bf00      	nop

08002bf4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	b083      	sub	sp, #12
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002bfc:	6800      	ldr	r0, [r0, #0]
 8002bfe:	f002 ff55 	bl	8005aac <USB_ReadInterrupts>
 8002c02:	0406      	lsls	r6, r0, #16
 8002c04:	f100 80b1 	bmi.w	8002d6a <HAL_PCD_IRQHandler+0x176>
 8002c08:	6820      	ldr	r0, [r4, #0]
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002c0a:	f002 ff4f 	bl	8005aac <USB_ReadInterrupts>
 8002c0e:	0545      	lsls	r5, r0, #21
 8002c10:	f100 808d 	bmi.w	8002d2e <HAL_PCD_IRQHandler+0x13a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002c14:	6820      	ldr	r0, [r4, #0]
 8002c16:	f002 ff49 	bl	8005aac <USB_ReadInterrupts>
 8002c1a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c1e:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002c20:	d007      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x3e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c22:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c32:	f002 ff3b 	bl	8005aac <USB_ReadInterrupts>
 8002c36:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c3a:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c3c:	d11e      	bne.n	8002c7c <HAL_PCD_IRQHandler+0x88>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c3e:	f002 ff35 	bl	8005aac <USB_ReadInterrupts>
 8002c42:	04c0      	lsls	r0, r0, #19
 8002c44:	d426      	bmi.n	8002c94 <HAL_PCD_IRQHandler+0xa0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c46:	6820      	ldr	r0, [r4, #0]
 8002c48:	f002 ff30 	bl	8005aac <USB_ReadInterrupts>
 8002c4c:	0501      	lsls	r1, r0, #20
 8002c4e:	d442      	bmi.n	8002cd6 <HAL_PCD_IRQHandler+0xe2>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	f002 ff2b 	bl	8005aac <USB_ReadInterrupts>
 8002c56:	0582      	lsls	r2, r0, #22
 8002c58:	d45c      	bmi.n	8002d14 <HAL_PCD_IRQHandler+0x120>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	f002 ff26 	bl	8005aac <USB_ReadInterrupts>
 8002c60:	05c3      	lsls	r3, r0, #23
 8002c62:	d508      	bpl.n	8002c76 <HAL_PCD_IRQHandler+0x82>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8002c76:	b003      	add	sp, #12
 8002c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c7c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c8c:	f002 ff0e 	bl	8005aac <USB_ReadInterrupts>
 8002c90:	04c0      	lsls	r0, r0, #19
 8002c92:	d5d8      	bpl.n	8002c46 <HAL_PCD_IRQHandler+0x52>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c94:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002c96:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c98:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ca8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cac:	f023 0308 	bic.w	r3, r3, #8
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002cb8:	f003 fed0 	bl	8006a5c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cbc:	6820      	ldr	r0, [r4, #0]
 8002cbe:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002cce:	f002 feed 	bl	8005aac <USB_ReadInterrupts>
 8002cd2:	0501      	lsls	r1, r0, #20
 8002cd4:	d5bc      	bpl.n	8002c50 <HAL_PCD_IRQHandler+0x5c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cd6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8002cd8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002cda:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ce8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	0c1b      	lsrs	r3, r3, #16
 8002cf4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002cf8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002d06:	f003 fe99 	bl	8006a3c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d0a:	6820      	ldr	r0, [r4, #0]
 8002d0c:	f002 fece 	bl	8005aac <USB_ReadInterrupts>
 8002d10:	0582      	lsls	r2, r0, #22
 8002d12:	d5a2      	bpl.n	8002c5a <HAL_PCD_IRQHandler+0x66>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d14:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8002d16:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d18:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002d28:	f003 fe72 	bl	8006a10 <HAL_PCD_SOFCallback>
 8002d2c:	e795      	b.n	8002c5a <HAL_PCD_IRQHandler+0x66>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d2e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002d30:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d32:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002d42:	f003 fe69 	bl	8006a18 <HAL_PCD_ResetCallback>
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8002d46:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	f43f af62 	beq.w	8002c14 <HAL_PCD_IRQHandler+0x20>
  hpcd->USB_Address = address;
 8002d50:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8002d52:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d54:	4629      	mov	r1, r5
 8002d56:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002d58:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002d5c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d60:	f002 fe9c 	bl	8005a9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d64:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8

  return HAL_OK;
 8002d68:	e754      	b.n	8002c14 <HAL_PCD_IRQHandler+0x20>
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d6a:	6825      	ldr	r5, [r4, #0]
 8002d6c:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 8002d70:	4628      	mov	r0, r5
 8002d72:	041d      	lsls	r5, r3, #16
 8002d74:	f57f af49 	bpl.w	8002c0a <HAL_PCD_IRQHandler+0x16>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d78:	4602      	mov	r2, r0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d7a:	f8df a9b0 	ldr.w	sl, [pc, #2480]	; 800372c <HAL_PCD_IRQHandler+0xb38>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d7e:	f8df b9b0 	ldr.w	fp, [pc, #2480]	; 8003730 <HAL_PCD_IRQHandler+0xb3c>
 8002d82:	e011      	b.n	8002da8 <HAL_PCD_IRQHandler+0x1b4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d84:	f011 0110 	ands.w	r1, r1, #16
 8002d88:	f000 8131 	beq.w	8002fee <HAL_PCD_IRQHandler+0x3fa>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d8c:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d8e:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d92:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d94:	f040 8156 	bne.w	8003044 <HAL_PCD_IRQHandler+0x450>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d98:	0419      	lsls	r1, r3, #16
 8002d9a:	f100 81b3 	bmi.w	8003104 <HAL_PCD_IRQHandler+0x510>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d9e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002da2:	041e      	lsls	r6, r3, #16
 8002da4:	f140 8121 	bpl.w	8002fea <HAL_PCD_IRQHandler+0x3f6>
    wIstr = hpcd->Instance->ISTR;
 8002da8:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8002dac:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8002dae:	f015 050f 	ands.w	r5, r5, #15
 8002db2:	d0e7      	beq.n	8002d84 <HAL_PCD_IRQHandler+0x190>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002db4:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002db8:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dba:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dbc:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dc0:	f100 80a2 	bmi.w	8002f08 <HAL_PCD_IRQHandler+0x314>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002dc4:	f018 0f80 	tst.w	r8, #128	; 0x80
 8002dc8:	d0e9      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x1aa>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002dca:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8002dce:	1977      	adds	r7, r6, r5
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	ea03 030a 	and.w	r3, r3, sl
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002dde:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8002de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	f000 80d2 	beq.w	8002f90 <HAL_PCD_IRQHandler+0x39c>
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80cf 	beq.w	8002f90 <HAL_PCD_IRQHandler+0x39c>
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d103      	bne.n	8002dfe <HAL_PCD_IRQHandler+0x20a>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002df6:	f418 7f80 	tst.w	r8, #256	; 0x100
 8002dfa:	f000 80c9 	beq.w	8002f90 <HAL_PCD_IRQHandler+0x39c>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dfe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002e02:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e0c:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e14:	f000 81ee 	beq.w	80031f4 <HAL_PCD_IRQHandler+0x600>
    if (ep->xfer_len > TxByteNbre)
 8002e18:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e1c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8002e20:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002e24:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8002e2c:	459e      	cmp	lr, r3
 8002e2e:	f240 8304 	bls.w	800343a <HAL_PCD_IRQHandler+0x846>
      ep->xfer_len -= TxByteNbre;
 8002e32:	ebae 0e03 	sub.w	lr, lr, r3
 8002e36:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002e3a:	f1be 0f00 	cmp.w	lr, #0
 8002e3e:	f000 82ff 	beq.w	8003440 <HAL_PCD_IRQHandler+0x84c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e42:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8002e46:	d00f      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x274>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e48:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8002e4c:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8002e50:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8002e54:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8002e58:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8002e5c:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8002e60:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8002e64:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002e68:	eb06 0c05 	add.w	ip, r6, r5
 8002e6c:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8002e70:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 8002e74:	2901      	cmp	r1, #1
 8002e76:	f040 82d0 	bne.w	800341a <HAL_PCD_IRQHandler+0x826>
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e7a:	e9dc 2e11 	ldrd	r2, lr, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8002e7e:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e82:	f8dc 8038 	ldr.w	r8, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002e86:	4419      	add	r1, r3
        ep->xfer_count += TxByteNbre;
 8002e88:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e8a:	45c6      	cmp	lr, r8
        ep->xfer_buff += TxByteNbre;
 8002e8c:	9101      	str	r1, [sp, #4]
 8002e8e:	f8cc 103c 	str.w	r1, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002e92:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e96:	f0c0 83a4 	bcc.w	80035e2 <HAL_PCD_IRQHandler+0x9ee>
          ep->xfer_len_db -= len;
 8002e9a:	ebae 0308 	sub.w	r3, lr, r8
 8002e9e:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 8002ea2:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ea6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	f040 8389 	bne.w	80035c2 <HAL_PCD_IRQHandler+0x9ce>
 8002eb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002eb4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8002eb8:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8002ebc:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8002ec0:	fa1f fc8c 	uxth.w	ip, ip
 8002ec4:	eb02 090c 	add.w	r9, r2, ip
 8002ec8:	f1b8 0f00 	cmp.w	r8, #0
 8002ecc:	f040 8401 	bne.w	80036d2 <HAL_PCD_IRQHandler+0xade>
 8002ed0:	f832 e00c 	ldrh.w	lr, [r2, ip]
 8002ed4:	f42e 4ef8 	bic.w	lr, lr, #31744	; 0x7c00
 8002ed8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8002edc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8002ee0:	f822 e00c 	strh.w	lr, [r2, ip]
 8002ee4:	f832 e00c 	ldrh.w	lr, [r2, ip]
 8002ee8:	fa1f fe8e 	uxth.w	lr, lr
 8002eec:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
 8002ef0:	f822 e00c 	strh.w	lr, [r2, ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ef4:	1972      	adds	r2, r6, r5
 8002ef6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002efa:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002efc:	9901      	ldr	r1, [sp, #4]
 8002efe:	f002 fdd9 	bl	8005ab4 <USB_WritePMA>
 8002f02:	6820      	ldr	r0, [r4, #0]
 8002f04:	4602      	mov	r2, r0
 8002f06:	e288      	b.n	800341a <HAL_PCD_IRQHandler+0x826>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f0c:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002f10:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f12:	4013      	ands	r3, r2
 8002f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f18:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002f1c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002f20:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 80b0 	bne.w	800308a <HAL_PCD_IRQHandler+0x496>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f2a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f2e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3306      	adds	r3, #6
 8002f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f3a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f3e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (count != 0U)
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 8143 	bne.w	80031d2 <HAL_PCD_IRQHandler+0x5de>
 8002f4c:	461f      	mov	r7, r3
        ep->xfer_count += count;
 8002f4e:	1971      	adds	r1, r6, r5
 8002f50:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8002f54:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002f58:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
        ep->xfer_count += count;
 8002f5c:	4438      	add	r0, r7
 8002f5e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f62:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
        ep->xfer_buff += count;
 8002f66:	443a      	add	r2, r7
        ep->xfer_count += count;
 8002f68:	00c9      	lsls	r1, r1, #3
        ep->xfer_buff += count;
 8002f6a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f6e:	b120      	cbz	r0, 8002f7a <HAL_PCD_IRQHandler+0x386>
 8002f70:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002f74:	42bb      	cmp	r3, r7
 8002f76:	f240 8134 	bls.w	80031e2 <HAL_PCD_IRQHandler+0x5ee>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f7a:	1973      	adds	r3, r6, r5
 8002f7c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002f80:	4620      	mov	r0, r4
 8002f82:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002f86:	f003 fd2f 	bl	80069e8 <HAL_PCD_DataOutStageCallback>
 8002f8a:	6820      	ldr	r0, [r4, #0]
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	e719      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1d0>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002f94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8002f9e:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fa0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002fa4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8002fa8:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8002fac:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	f240 809c 	bls.w	80030f0 <HAL_PCD_IRQHandler+0x4fc>
            ep->xfer_len -= TxByteNbre;
 8002fb8:	1ad2      	subs	r2, r2, r3
 8002fba:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	f000 8099 	beq.w	80030f4 <HAL_PCD_IRQHandler+0x500>
            ep->xfer_count += TxByteNbre;
 8002fc2:	6c72      	ldr	r2, [r6, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8002fc4:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8002fc6:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8002fc8:	441f      	add	r7, r3
        ep = &hpcd->IN_ep[epindex];
 8002fca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8002fce:	4413      	add	r3, r2
 8002fd0:	6473      	str	r3, [r6, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8002fd2:	63f7      	str	r7, [r6, #60]	; 0x3c
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fd4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002fd8:	f001 ffdc 	bl	8004f94 <USB_EPStartXfer>
 8002fdc:	6820      	ldr	r0, [r4, #0]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fde:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	041e      	lsls	r6, r3, #16
 8002fe6:	f53f aedf 	bmi.w	8002da8 <HAL_PCD_IRQHandler+0x1b4>
 8002fea:	4610      	mov	r0, r2
 8002fec:	e60d      	b.n	8002c0a <HAL_PCD_IRQHandler+0x16>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fee:	8803      	ldrh	r3, [r0, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	ea03 030a 	and.w	r3, r3, sl
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffa:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ffc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003000:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003004:	b29b      	uxth	r3, r3
 8003006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800300a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800300e:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8003012:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003014:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8003018:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800301a:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800301c:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 800301e:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003020:	f003 fcec 	bl	80069fc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003024:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003028:	b363      	cbz	r3, 8003084 <HAL_PCD_IRQHandler+0x490>
 800302a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800302c:	bb53      	cbnz	r3, 8003084 <HAL_PCD_IRQHandler+0x490>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800302e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8003032:	6820      	ldr	r0, [r4, #0]
 8003034:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003038:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 800303c:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 800303e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8003042:	e6ac      	b.n	8002d9e <HAL_PCD_IRQHandler+0x1aa>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003044:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003048:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800304c:	b29b      	uxth	r3, r3
 800304e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003052:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003056:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800305a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800305e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003062:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003066:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800306a:	f002 fd33 	bl	8005ad4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800306e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003072:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003074:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003076:	8811      	ldrh	r1, [r2, #0]
 8003078:	400b      	ands	r3, r1
 800307a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003080:	f003 fcac 	bl	80069dc <HAL_PCD_SetupStageCallback>
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	4602      	mov	r2, r0
 8003088:	e689      	b.n	8002d9e <HAL_PCD_IRQHandler+0x1aa>
          if (ep->type == EP_TYPE_BULK)
 800308a:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 800308e:	2b02      	cmp	r3, #2
 8003090:	f000 8133 	beq.w	80032fa <HAL_PCD_IRQHandler+0x706>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003094:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003098:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800309c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030b4:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80030b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80030bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80030c4:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030c6:	d070      	beq.n	80031aa <HAL_PCD_IRQHandler+0x5b6>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030c8:	3302      	adds	r3, #2
 80030ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80030d2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80030d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f43f af36 	beq.w	8002f4c <HAL_PCD_IRQHandler+0x358>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030e0:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80030e4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80030e8:	461f      	mov	r7, r3
 80030ea:	f002 fcf3 	bl	8005ad4 <USB_ReadPMA>
 80030ee:	e72e      	b.n	8002f4e <HAL_PCD_IRQHandler+0x35a>
 80030f0:	2300      	movs	r3, #0
 80030f2:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f4:	4620      	mov	r0, r4
 80030f6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80030fa:	f003 fc7f 	bl	80069fc <HAL_PCD_DataInStageCallback>
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	4602      	mov	r2, r0
 8003102:	e64c      	b.n	8002d9e <HAL_PCD_IRQHandler+0x1aa>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003104:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003108:	8802      	ldrh	r2, [r0, #0]
 800310a:	4013      	ands	r3, r2
 800310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003110:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003112:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003116:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800311a:	b29b      	uxth	r3, r3
 800311c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003120:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003124:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8003128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800312c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003130:	b193      	cbz	r3, 8003158 <HAL_PCD_IRQHandler+0x564>
 8003132:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8003136:	b179      	cbz	r1, 8003158 <HAL_PCD_IRQHandler+0x564>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003138:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800313c:	f002 fcca 	bl	8005ad4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003144:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003148:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800314a:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800314c:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800314e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003152:	f003 fc49 	bl	80069e8 <HAL_PCD_DataOutStageCallback>
 8003156:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003158:	8803      	ldrh	r3, [r0, #0]
 800315a:	4602      	mov	r2, r0
 800315c:	051b      	lsls	r3, r3, #20
 800315e:	f53f ae1e 	bmi.w	8002d9e <HAL_PCD_IRQHandler+0x1aa>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003162:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003166:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 800316a:	b29b      	uxth	r3, r3
 800316c:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8003170:	2900      	cmp	r1, #0
 8003172:	f040 80b7 	bne.w	80032e4 <HAL_PCD_IRQHandler+0x6f0>
 8003176:	5ae9      	ldrh	r1, [r5, r3]
 8003178:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800317c:	0409      	lsls	r1, r1, #16
 800317e:	0c09      	lsrs	r1, r1, #16
 8003180:	52e9      	strh	r1, [r5, r3]
 8003182:	5ae9      	ldrh	r1, [r5, r3]
 8003184:	b289      	uxth	r1, r1
 8003186:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800318a:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800318c:	8803      	ldrh	r3, [r0, #0]
 800318e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a6:	8003      	strh	r3, [r0, #0]
 80031a8:	e5f9      	b.n	8002d9e <HAL_PCD_IRQHandler+0x1aa>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031aa:	3306      	adds	r3, #6
 80031ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80031b4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80031b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f43f aec5 	beq.w	8002f4c <HAL_PCD_IRQHandler+0x358>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031c2:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 80031c6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80031ca:	461f      	mov	r7, r3
 80031cc:	f002 fc82 	bl	8005ad4 <USB_ReadPMA>
 80031d0:	e6bd      	b.n	8002f4e <HAL_PCD_IRQHandler+0x35a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031d2:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 80031d6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80031da:	461f      	mov	r7, r3
 80031dc:	f002 fc7a 	bl	8005ad4 <USB_ReadPMA>
 80031e0:	e6b5      	b.n	8002f4e <HAL_PCD_IRQHandler+0x35a>
        ep = &hpcd->OUT_ep[epindex];
 80031e2:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	4421      	add	r1, r4
 80031ea:	f001 fed3 	bl	8004f94 <USB_EPStartXfer>
 80031ee:	6820      	ldr	r0, [r4, #0]
 80031f0:	4602      	mov	r2, r0
 80031f2:	e5e7      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x1d0>
    if (ep->xfer_len >= TxByteNbre)
 80031f4:	eb06 0e05 	add.w	lr, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031f8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 80031fc:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8003200:	f8de 9040 	ldr.w	r9, [lr, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003204:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8003208:	4599      	cmp	r9, r3
 800320a:	f0c0 80b9 	bcc.w	8003380 <HAL_PCD_IRQHandler+0x78c>
      ep->xfer_len -= TxByteNbre;
 800320e:	eba9 0903 	sub.w	r9, r9, r3
 8003212:	f8ce 9040 	str.w	r9, [lr, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003216:	f1b9 0f00 	cmp.w	r9, #0
 800321a:	f000 80b3 	beq.w	8003384 <HAL_PCD_IRQHandler+0x790>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800321e:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8003222:	d10f      	bne.n	8003244 <HAL_PCD_IRQHandler+0x650>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003224:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8003228:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 800322c:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8003230:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8003234:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003238:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 800323c:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8003240:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003244:	eb06 0c05 	add.w	ip, r6, r5
 8003248:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 800324c:	f89c 104c 	ldrb.w	r1, [ip, #76]	; 0x4c
 8003250:	2901      	cmp	r1, #1
 8003252:	f040 80e2 	bne.w	800341a <HAL_PCD_IRQHandler+0x826>
        if (ep->xfer_len_db >= ep->maxpacket)
 8003256:	e9dc 2e11 	ldrd	r2, lr, [ip, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800325a:	f8dc 103c 	ldr.w	r1, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800325e:	f8dc 8038 	ldr.w	r8, [ip, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8003262:	eb01 0903 	add.w	r9, r1, r3
        ep->xfer_count += TxByteNbre;
 8003266:	441a      	add	r2, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8003268:	45c6      	cmp	lr, r8
        ep->xfer_buff += TxByteNbre;
 800326a:	f8cc 903c 	str.w	r9, [ip, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800326e:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003272:	f0c0 81de 	bcc.w	8003632 <HAL_PCD_IRQHandler+0xa3e>
          ep->xfer_len_db -= len;
 8003276:	ebae 0308 	sub.w	r3, lr, r8
 800327a:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 800327e:	fa1f f388 	uxth.w	r3, r8
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003282:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003286:	2a00      	cmp	r2, #0
 8003288:	f040 81c3 	bne.w	8003612 <HAL_PCD_IRQHandler+0xa1e>
 800328c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003290:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8003294:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003298:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800329c:	fa1f fe8e 	uxth.w	lr, lr
 80032a0:	eb02 0c0e 	add.w	ip, r2, lr
 80032a4:	f1b8 0f00 	cmp.w	r8, #0
 80032a8:	f040 81ef 	bne.w	800368a <HAL_PCD_IRQHandler+0xa96>
 80032ac:	f832 c00e 	ldrh.w	ip, [r2, lr]
 80032b0:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 80032b4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80032b8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80032bc:	f822 c00e 	strh.w	ip, [r2, lr]
 80032c0:	f832 c00e 	ldrh.w	ip, [r2, lr]
 80032c4:	fa1f fc8c 	uxth.w	ip, ip
 80032c8:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 80032cc:	f822 c00e 	strh.w	ip, [r2, lr]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032d0:	1972      	adds	r2, r6, r5
 80032d2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80032d6:	4649      	mov	r1, r9
 80032d8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80032da:	f002 fbeb 	bl	8005ab4 <USB_WritePMA>
 80032de:	6820      	ldr	r0, [r4, #0]
 80032e0:	4602      	mov	r2, r0
 80032e2:	e09a      	b.n	800341a <HAL_PCD_IRQHandler+0x826>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032e4:	293e      	cmp	r1, #62	; 0x3e
 80032e6:	f200 80e6 	bhi.w	80034b6 <HAL_PCD_IRQHandler+0x8c2>
 80032ea:	084e      	lsrs	r6, r1, #1
 80032ec:	07cf      	lsls	r7, r1, #31
 80032ee:	bf48      	it	mi
 80032f0:	3601      	addmi	r6, #1
 80032f2:	02b6      	lsls	r6, r6, #10
 80032f4:	b2b6      	uxth	r6, r6
 80032f6:	52ee      	strh	r6, [r5, r3]
 80032f8:	e748      	b.n	800318c <HAL_PCD_IRQHandler+0x598>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032fa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032fe:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003302:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003306:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003308:	f000 80e0 	beq.w	80034cc <HAL_PCD_IRQHandler+0x8d8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800330c:	3302      	adds	r3, #2
 800330e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003312:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003316:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 800331a:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800331e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8003322:	459c      	cmp	ip, r3
 8003324:	461f      	mov	r7, r3
 8003326:	f0c0 8122 	bcc.w	800356e <HAL_PCD_IRQHandler+0x97a>
      ep->xfer_len -= count;
 800332a:	ebac 0c03 	sub.w	ip, ip, r3
 800332e:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8003332:	f1bc 0f00 	cmp.w	ip, #0
 8003336:	f000 811e 	beq.w	8003576 <HAL_PCD_IRQHandler+0x982>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800333a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800333e:	d012      	beq.n	8003366 <HAL_PCD_IRQHandler+0x772>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003340:	1972      	adds	r2, r6, r5
 8003342:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003346:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 800334a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800334e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003352:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003356:	0412      	lsls	r2, r2, #16
 8003358:	0c12      	lsrs	r2, r2, #16
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003362:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8003366:	2b00      	cmp	r3, #0
 8003368:	f43f adf0 	beq.w	8002f4c <HAL_PCD_IRQHandler+0x358>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800336c:	1971      	adds	r1, r6, r5
 800336e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003372:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003376:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800337a:	f002 fbab 	bl	8005ad4 <USB_ReadPMA>
 800337e:	e5e6      	b.n	8002f4e <HAL_PCD_IRQHandler+0x35a>
 8003380:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003384:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003388:	2b00      	cmp	r3, #0
 800338a:	f040 80d7 	bne.w	800353c <HAL_PCD_IRQHandler+0x948>
 800338e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003392:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003396:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800339a:	b292      	uxth	r2, r2
 800339c:	5a8b      	ldrh	r3, [r1, r2]
 800339e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	528b      	strh	r3, [r1, r2]
 80033a8:	5a8b      	ldrh	r3, [r1, r2]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b0:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 811a 	bne.w	80035f0 <HAL_PCD_IRQHandler+0x9fc>
 80033bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033c0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80033c4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 80033c8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 80033cc:	b292      	uxth	r2, r2
 80033ce:	5a83      	ldrh	r3, [r0, r2]
 80033d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	5283      	strh	r3, [r0, r2]
 80033da:	5a83      	ldrh	r3, [r0, r2]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	5283      	strh	r3, [r0, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033e4:	4620      	mov	r0, r4
 80033e6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80033ea:	f003 fb07 	bl	80069fc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033ee:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033f2:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033f4:	f47f af74 	bne.w	80032e0 <HAL_PCD_IRQHandler+0x6ec>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033f8:	4602      	mov	r2, r0
 80033fa:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80033fe:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800341a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800341e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003422:	b29b      	uxth	r3, r3
 8003424:	ea03 030b 	and.w	r3, r3, fp
 8003428:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800342c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8003438:	e4b1      	b.n	8002d9e <HAL_PCD_IRQHandler+0x1aa>
 800343a:	2300      	movs	r3, #0
 800343c:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003440:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 8086 	bne.w	8003556 <HAL_PCD_IRQHandler+0x962>
 800344a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800344e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003452:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8003456:	b292      	uxth	r2, r2
 8003458:	5a8b      	ldrh	r3, [r1, r2]
 800345a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800345e:	041b      	lsls	r3, r3, #16
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	528b      	strh	r3, [r1, r2]
 8003464:	5a8b      	ldrh	r3, [r1, r2]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346c:	528b      	strh	r3, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800346e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 80e4 	bne.w	8003640 <HAL_PCD_IRQHandler+0xa4c>
 8003478:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800347c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003480:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8003484:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003488:	b292      	uxth	r2, r2
 800348a:	5a83      	ldrh	r3, [r0, r2]
 800348c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	0c1b      	lsrs	r3, r3, #16
 8003494:	5283      	strh	r3, [r0, r2]
 8003496:	5a83      	ldrh	r3, [r0, r2]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349e:	5283      	strh	r3, [r0, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034a0:	4620      	mov	r0, r4
 80034a2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80034a6:	f003 faa9 	bl	80069fc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034aa:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034ae:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034b0:	d1a2      	bne.n	80033f8 <HAL_PCD_IRQHandler+0x804>
 80034b2:	4602      	mov	r2, r0
 80034b4:	e7b1      	b.n	800341a <HAL_PCD_IRQHandler+0x826>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034b6:	094e      	lsrs	r6, r1, #5
 80034b8:	06c9      	lsls	r1, r1, #27
 80034ba:	499b      	ldr	r1, [pc, #620]	; (8003728 <HAL_PCD_IRQHandler+0xb34>)
 80034bc:	bf08      	it	eq
 80034be:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80034c2:	ea41 2686 	orr.w	r6, r1, r6, lsl #10
 80034c6:	b2b6      	uxth	r6, r6
 80034c8:	52ee      	strh	r6, [r5, r3]
 80034ca:	e65f      	b.n	800318c <HAL_PCD_IRQHandler+0x598>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034cc:	3306      	adds	r3, #6
 80034ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80034d6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 80034da:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034de:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80034e2:	459e      	cmp	lr, r3
 80034e4:	461f      	mov	r7, r3
 80034e6:	d357      	bcc.n	8003598 <HAL_PCD_IRQHandler+0x9a4>
      ep->xfer_len -= count;
 80034e8:	ebae 0e03 	sub.w	lr, lr, r3
 80034ec:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80034f0:	f1be 0f00 	cmp.w	lr, #0
 80034f4:	d052      	beq.n	800359c <HAL_PCD_IRQHandler+0x9a8>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034f6:	f018 0f40 	tst.w	r8, #64	; 0x40
 80034fa:	d112      	bne.n	8003522 <HAL_PCD_IRQHandler+0x92e>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034fc:	1972      	adds	r2, r6, r5
 80034fe:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003502:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 8003506:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800350a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800350e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003512:	0412      	lsls	r2, r2, #16
 8003514:	0c12      	lsrs	r2, r2, #16
 8003516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800351a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800351e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8003522:	2b00      	cmp	r3, #0
 8003524:	f43f ad12 	beq.w	8002f4c <HAL_PCD_IRQHandler+0x358>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003528:	1971      	adds	r1, r6, r5
 800352a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800352e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003532:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003536:	f002 facd 	bl	8005ad4 <USB_ReadPMA>
 800353a:	e508      	b.n	8002f4e <HAL_PCD_IRQHandler+0x35a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800353c:	2b01      	cmp	r3, #1
 800353e:	f47f af51 	bne.w	80033e4 <HAL_PCD_IRQHandler+0x7f0>
 8003542:	2500      	movs	r5, #0
 8003544:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003548:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800354c:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8003550:	b29b      	uxth	r3, r3
 8003552:	52d5      	strh	r5, [r2, r3]
 8003554:	e72d      	b.n	80033b2 <HAL_PCD_IRQHandler+0x7be>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003556:	2b01      	cmp	r3, #1
 8003558:	d1a2      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x8ac>
 800355a:	2500      	movs	r5, #0
 800355c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003560:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 8003564:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8003568:	b29b      	uxth	r3, r3
 800356a:	52d5      	strh	r5, [r2, r3]
 800356c:	e77f      	b.n	800346e <HAL_PCD_IRQHandler+0x87a>
 800356e:	f04f 0c00 	mov.w	ip, #0
 8003572:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003576:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800357a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800357e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003582:	0409      	lsls	r1, r1, #16
 8003584:	0c09      	lsrs	r1, r1, #16
 8003586:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800358a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800358e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003592:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8003596:	e6d0      	b.n	800333a <HAL_PCD_IRQHandler+0x746>
 8003598:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800359c:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80035a0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80035a4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80035a8:	0409      	lsls	r1, r1, #16
 80035aa:	0c09      	lsrs	r1, r1, #16
 80035ac:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80035b0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80035b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80035b8:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80035bc:	e79b      	b.n	80034f6 <HAL_PCD_IRQHandler+0x902>
 80035be:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035c2:	2a01      	cmp	r2, #1
 80035c4:	f47f ac96 	bne.w	8002ef4 <HAL_PCD_IRQHandler+0x300>
 80035c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80035cc:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 80035d0:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80035d4:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80035d8:	fa1f fc8c 	uxth.w	ip, ip
 80035dc:	f822 300c 	strh.w	r3, [r2, ip]
 80035e0:	e488      	b.n	8002ef4 <HAL_PCD_IRQHandler+0x300>
        else if (ep->xfer_len_db == 0U)
 80035e2:	f1be 0f00 	cmp.w	lr, #0
 80035e6:	d15e      	bne.n	80036a6 <HAL_PCD_IRQHandler+0xab2>
          ep->xfer_fill_db = 0U;
 80035e8:	4698      	mov	r8, r3
 80035ea:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 80035ee:	e45a      	b.n	8002ea6 <HAL_PCD_IRQHandler+0x2b2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f47f aef7 	bne.w	80033e4 <HAL_PCD_IRQHandler+0x7f0>
 80035f6:	2100      	movs	r1, #0
 80035f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035fc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003600:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8003604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003608:	b292      	uxth	r2, r2
 800360a:	5299      	strh	r1, [r3, r2]
 800360c:	e6ea      	b.n	80033e4 <HAL_PCD_IRQHandler+0x7f0>
 800360e:	fa1f f38e 	uxth.w	r3, lr
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003612:	2a01      	cmp	r2, #1
 8003614:	f47f ae5c 	bne.w	80032d0 <HAL_PCD_IRQHandler+0x6dc>
 8003618:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800361c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8003620:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8003624:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8003628:	fa1f fc8c 	uxth.w	ip, ip
 800362c:	f822 300c 	strh.w	r3, [r2, ip]
 8003630:	e64e      	b.n	80032d0 <HAL_PCD_IRQHandler+0x6dc>
        else if (ep->xfer_len_db == 0U)
 8003632:	f1be 0f00 	cmp.w	lr, #0
 8003636:	d112      	bne.n	800365e <HAL_PCD_IRQHandler+0xa6a>
          ep->xfer_fill_db = 0U;
 8003638:	4698      	mov	r8, r3
 800363a:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 800363e:	e620      	b.n	8003282 <HAL_PCD_IRQHandler+0x68e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003640:	2b01      	cmp	r3, #1
 8003642:	f47f af2d 	bne.w	80034a0 <HAL_PCD_IRQHandler+0x8ac>
 8003646:	2100      	movs	r1, #0
 8003648:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800364c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003650:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8003654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003658:	b292      	uxth	r2, r2
 800365a:	5299      	strh	r1, [r3, r2]
 800365c:	e720      	b.n	80034a0 <HAL_PCD_IRQHandler+0x8ac>
          ep->xfer_len_db = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8003664:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003668:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800366c:	2a00      	cmp	r2, #0
 800366e:	d1ce      	bne.n	800360e <HAL_PCD_IRQHandler+0xa1a>
 8003670:	46f0      	mov	r8, lr
 8003672:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8003676:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800367a:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 800367e:	b29b      	uxth	r3, r3
 8003680:	f20c 4c0c 	addw	ip, ip, #1036	; 0x40c
 8003684:	449c      	add	ip, r3
 8003686:	fa1f f38e 	uxth.w	r3, lr
 800368a:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800368e:	d82e      	bhi.n	80036ee <HAL_PCD_IRQHandler+0xafa>
 8003690:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8003694:	f018 0f01 	tst.w	r8, #1
 8003698:	bf18      	it	ne
 800369a:	3201      	addne	r2, #1
 800369c:	0292      	lsls	r2, r2, #10
 800369e:	b292      	uxth	r2, r2
 80036a0:	f8ac 2000 	strh.w	r2, [ip]
 80036a4:	e614      	b.n	80032d0 <HAL_PCD_IRQHandler+0x6dc>
          ep->xfer_fill_db = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80036ac:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036b0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80036b4:	2a00      	cmp	r2, #0
 80036b6:	d182      	bne.n	80035be <HAL_PCD_IRQHandler+0x9ca>
 80036b8:	46f0      	mov	r8, lr
 80036ba:	f897 9028 	ldrb.w	r9, [r7, #40]	; 0x28
 80036be:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80036c2:	eb00 1909 	add.w	r9, r0, r9, lsl #4
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f209 4904 	addw	r9, r9, #1028	; 0x404
 80036cc:	4499      	add	r9, r3
 80036ce:	fa1f f38e 	uxth.w	r3, lr
 80036d2:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 80036d6:	d818      	bhi.n	800370a <HAL_PCD_IRQHandler+0xb16>
 80036d8:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80036dc:	f018 0f01 	tst.w	r8, #1
 80036e0:	bf18      	it	ne
 80036e2:	3201      	addne	r2, #1
 80036e4:	0292      	lsls	r2, r2, #10
 80036e6:	b292      	uxth	r2, r2
 80036e8:	f8a9 2000 	strh.w	r2, [r9]
 80036ec:	e402      	b.n	8002ef4 <HAL_PCD_IRQHandler+0x300>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036ee:	ea4f 1258 	mov.w	r2, r8, lsr #5
 80036f2:	490d      	ldr	r1, [pc, #52]	; (8003728 <HAL_PCD_IRQHandler+0xb34>)
 80036f4:	f018 0f1f 	tst.w	r8, #31
 80036f8:	bf08      	it	eq
 80036fa:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80036fe:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8003702:	b292      	uxth	r2, r2
 8003704:	f8ac 2000 	strh.w	r2, [ip]
 8003708:	e5e2      	b.n	80032d0 <HAL_PCD_IRQHandler+0x6dc>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800370a:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800370e:	4906      	ldr	r1, [pc, #24]	; (8003728 <HAL_PCD_IRQHandler+0xb34>)
 8003710:	f018 0f1f 	tst.w	r8, #31
 8003714:	bf08      	it	eq
 8003716:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800371a:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 800371e:	b292      	uxth	r2, r2
 8003720:	f8a9 2000 	strh.w	r2, [r9]
 8003724:	f7ff bbe6 	b.w	8002ef4 <HAL_PCD_IRQHandler+0x300>
 8003728:	ffff8000 	.word	0xffff8000
 800372c:	ffff8f0f 	.word	0xffff8f0f
 8003730:	ffff8fbf 	.word	0xffff8fbf

08003734 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003734:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8003738:	2a01      	cmp	r2, #1
 800373a:	d00d      	beq.n	8003758 <HAL_PCD_SetAddress+0x24>
 800373c:	2201      	movs	r2, #1
{
 800373e:	b510      	push	{r4, lr}
 8003740:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 8003742:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8003746:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800374a:	6800      	ldr	r0, [r0, #0]
 800374c:	f002 f9a6 	bl	8005a9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003750:	2000      	movs	r0, #0
 8003752:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003756:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003758:	2002      	movs	r0, #2
}
 800375a:	4770      	bx	lr

0800375c <HAL_PCD_EP_Open>:
{
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4606      	mov	r6, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003760:	0608      	lsls	r0, r1, #24
 8003762:	d423      	bmi.n	80037ac <HAL_PCD_EP_Open+0x50>
    ep->is_in = 0U;
 8003764:	2400      	movs	r4, #0
 8003766:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800376e:	00c0      	lsls	r0, r0, #3
 8003770:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8003774:	4430      	add	r0, r6
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003776:	4431      	add	r1, r6
    ep->is_in = 0U;
 8003778:	f880 4169 	strb.w	r4, [r0, #361]	; 0x169
  if (ep->is_in != 0U)
 800377c:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377e:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8003780:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8003782:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003784:	b100      	cbz	r0, 8003788 <HAL_PCD_EP_Open+0x2c>
    ep->tx_fifo_num = ep->num;
 8003786:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8003788:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800378a:	bf04      	itt	eq
 800378c:	2300      	moveq	r3, #0
 800378e:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003790:	f896 32a8 	ldrb.w	r3, [r6, #680]	; 0x2a8
 8003794:	2b01      	cmp	r3, #1
 8003796:	d013      	beq.n	80037c0 <HAL_PCD_EP_Open+0x64>
 8003798:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800379a:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 800379c:	f886 32a8 	strb.w	r3, [r6, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037a0:	f001 f980 	bl	8004aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f886 02a8 	strb.w	r0, [r6, #680]	; 0x2a8
}
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 80037ac:	2001      	movs	r0, #1
 80037ae:	f001 0507 	and.w	r5, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b2:	182c      	adds	r4, r5, r0
 80037b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80037b8:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
    ep->is_in = 1U;
 80037bc:	7048      	strb	r0, [r1, #1]
 80037be:	e7dd      	b.n	800377c <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 80037c0:	2002      	movs	r0, #2
}
 80037c2:	bd70      	pop	{r4, r5, r6, pc}

080037c4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80037c4:	060b      	lsls	r3, r1, #24
{
 80037c6:	b510      	push	{r4, lr}
 80037c8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80037ca:	d41a      	bmi.n	8003802 <HAL_PCD_EP_Close+0x3e>
    ep->is_in = 0U;
 80037cc:	2000      	movs	r0, #0
 80037ce:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80037d6:	00d2      	lsls	r2, r2, #3
 80037d8:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80037dc:	4421      	add	r1, r4
    ep->is_in = 0U;
 80037de:	4422      	add	r2, r4
 80037e0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037e4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80037e6:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d017      	beq.n	800381e <HAL_PCD_EP_Close+0x5a>
 80037ee:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037f0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80037f2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037f6:	f001 fad7 	bl	8004da8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037fa:	2000      	movs	r0, #0
 80037fc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003800:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8003802:	2201      	movs	r2, #1
 8003804:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003808:	1899      	adds	r1, r3, r2
 800380a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800380e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003812:	704a      	strb	r2, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003814:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003816:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800381a:	2b01      	cmp	r3, #1
 800381c:	d1e7      	bne.n	80037ee <HAL_PCD_EP_Close+0x2a>
 800381e:	2002      	movs	r0, #2
}
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop

08003824 <HAL_PCD_EP_Receive>:
{
 8003824:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 8003826:	2600      	movs	r6, #0
 8003828:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800382c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8003830:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  ep->xfer_len = len;
 8003834:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003838:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800383a:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800383e:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  ep->xfer_count = 0U;
 8003842:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8003846:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800384a:	f001 fba3 	bl	8004f94 <USB_EPStartXfer>
}
 800384e:	4630      	mov	r0, r6
 8003850:	bd70      	pop	{r4, r5, r6, pc}
 8003852:	bf00      	nop

08003854 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003854:	f001 0107 	and.w	r1, r1, #7
 8003858:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800385c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8003860:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <HAL_PCD_EP_Transmit>:
{
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_fill_db = 1U;
 800386a:	2701      	movs	r7, #1
  ep->xfer_count = 0U;
 800386c:	2600      	movs	r6, #0
 800386e:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8003872:	eb05 0485 	add.w	r4, r5, r5, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003876:	19e9      	adds	r1, r5, r7
  ep->xfer_buff = pBuf;
 8003878:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003880:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8003884:	63e2      	str	r2, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003886:	6800      	ldr	r0, [r0, #0]
  ep->xfer_len = len;
 8003888:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_len_db = len;
 800388a:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->num = ep_addr & EP_ADDR_MSK;
 800388c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  ep->xfer_fill_db = 1U;
 8003890:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
  ep->is_in = 1U;
 8003894:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 8003898:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800389a:	f001 fb7b 	bl	8004f94 <USB_EPStartXfer>
}
 800389e:	4630      	mov	r0, r6
 80038a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a2:	bf00      	nop

080038a4 <HAL_PCD_EP_SetStall>:
{
 80038a4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038a6:	6843      	ldr	r3, [r0, #4]
{
 80038a8:	4604      	mov	r4, r0
 80038aa:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038ae:	4298      	cmp	r0, r3
 80038b0:	d82b      	bhi.n	800390a <HAL_PCD_EP_SetStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 80038b2:	060b      	lsls	r3, r1, #24
 80038b4:	d419      	bmi.n	80038ea <HAL_PCD_EP_SetStall+0x46>
    ep->is_in = 0U;
 80038b6:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80038b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80038bc:	00c9      	lsls	r1, r1, #3
    ep->is_in = 0U;
 80038be:	1863      	adds	r3, r4, r1
 80038c0:	f883 5169 	strb.w	r5, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80038c4:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 80038c6:	f501 72b4 	add.w	r2, r1, #360	; 0x168
 80038ca:	18a1      	adds	r1, r4, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 80038cc:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 80038ce:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80038d0:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d016      	beq.n	8003906 <HAL_PCD_EP_SetStall+0x62>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038d8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80038da:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038de:	f002 f85d 	bl	800599c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80038e2:	2000      	movs	r0, #0
 80038e4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80038e8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80038ea:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ec:	18c1      	adds	r1, r0, r3
 80038ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80038f2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80038f6:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 80038f8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80038fa:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 80038fc:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80038fe:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8003902:	429a      	cmp	r2, r3
 8003904:	d1e8      	bne.n	80038d8 <HAL_PCD_EP_SetStall+0x34>
 8003906:	2002      	movs	r0, #2
}
 8003908:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800390a:	2001      	movs	r0, #1
}
 800390c:	bd38      	pop	{r3, r4, r5, pc}
 800390e:	bf00      	nop

08003910 <HAL_PCD_EP_ClrStall>:
{
 8003910:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003912:	6843      	ldr	r3, [r0, #4]
 8003914:	f001 020f 	and.w	r2, r1, #15
 8003918:	429a      	cmp	r2, r3
 800391a:	d831      	bhi.n	8003980 <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 800391c:	060b      	lsls	r3, r1, #24
 800391e:	4604      	mov	r4, r0
 8003920:	d41c      	bmi.n	800395c <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 0U;
 8003922:	2000      	movs	r0, #0
  ep->is_stall = 0U;
 8003924:	2500      	movs	r5, #0
 8003926:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8003934:	4421      	add	r1, r4
    ep->is_in = 0U;
 8003936:	4422      	add	r2, r4
 8003938:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800393c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800393e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003940:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003944:	2b01      	cmp	r3, #1
 8003946:	d019      	beq.n	800397c <HAL_PCD_EP_ClrStall+0x6c>
 8003948:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800394a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800394c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003950:	f002 f84c 	bl	80059ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003954:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8003958:	4628      	mov	r0, r5
}
 800395a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800395c:	2201      	movs	r2, #1
  ep->is_stall = 0U;
 800395e:	2500      	movs	r5, #0
 8003960:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003964:	1899      	adds	r1, r3, r2
 8003966:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800396a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800396e:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003970:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8003972:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003974:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8003978:	2b01      	cmp	r3, #1
 800397a:	d1e5      	bne.n	8003948 <HAL_PCD_EP_ClrStall+0x38>
 800397c:	2002      	movs	r0, #2
}
 800397e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
}
 8003982:	bd38      	pop	{r3, r4, r5, pc}

08003984 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003984:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003988:	d00b      	beq.n	80039a2 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398a:	f001 0107 	and.w	r1, r1, #7
 800398e:	3101      	adds	r1, #1
 8003990:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003994:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003998:	b95a      	cbnz	r2, 80039b2 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800399a:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800399c:	80cb      	strh	r3, [r1, #6]
 800399e:	730a      	strb	r2, [r1, #12]
}
 80039a0:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80039a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80039a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80039aa:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80039ae:	2a00      	cmp	r2, #0
 80039b0:	d0f3      	beq.n	800399a <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80039b2:	2201      	movs	r2, #1
}
 80039b4:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039b6:	608b      	str	r3, [r1, #8]
 80039b8:	730a      	strb	r2, [r1, #12]
}
 80039ba:	4770      	bx	lr

080039bc <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 80039be:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80039c6:	d116      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ca:	00d2      	lsls	r2, r2, #3
 80039cc:	d420      	bmi.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039d0:	4919      	ldr	r1, [pc, #100]	; (8003a38 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
 80039d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039da:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80039de:	9201      	str	r2, [sp, #4]
 80039e0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039e2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80039e6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80039ee:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f2:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80039f4:	d013      	beq.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039f6:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039f8:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80039fa:	6813      	ldr	r3, [r2, #0]
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	4303      	orrs	r3, r0
 8003a02:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a04:	6813      	ldr	r3, [r2, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003a0a:	4058      	eors	r0, r3
 8003a0c:	b002      	add	sp, #8
 8003a0e:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003a18:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8003a1c:	d1eb      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 8003a1e:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8003a22:	d1e8      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 8003a24:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 8003a26:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e7e2      	b.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003a40:	2800      	cmp	r0, #0
 8003a42:	f000 81fe 	beq.w	8003e42 <HAL_RCC_OscConfig+0x402>
{
 8003a46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4a:	4aac      	ldr	r2, [pc, #688]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a50:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	07d9      	lsls	r1, r3, #31
 8003a54:	4604      	mov	r4, r0
{
 8003a56:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a58:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a5c:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a60:	d52e      	bpl.n	8003ac0 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a62:	2d08      	cmp	r5, #8
 8003a64:	f000 8127 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x276>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a68:	2d0c      	cmp	r5, #12
 8003a6a:	f000 8121 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x270>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d00f      	beq.n	8003a94 <HAL_RCC_OscConfig+0x54>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8186 	beq.w	8003d86 <HAL_RCC_OscConfig+0x346>
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	4b9f      	ldr	r3, [pc, #636]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	f000 81e1 	beq.w	8003e46 <HAL_RCC_OscConfig+0x406>
 8003a84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e004      	b.n	8003a9e <HAL_RCC_OscConfig+0x5e>
 8003a94:	4a99      	ldr	r2, [pc, #612]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fcf7 	bl	8002490 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa2:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8003cfc <HAL_RCC_OscConfig+0x2bc>
        tickstart = HAL_GetTick();
 8003aa6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa8:	e005      	b.n	8003ab6 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aaa:	f7fe fcf1 	bl	8002490 <HAL_GetTick>
 8003aae:	1bc0      	subs	r0, r0, r7
 8003ab0:	2864      	cmp	r0, #100	; 0x64
 8003ab2:	f200 8164 	bhi.w	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8003aba:	039b      	lsls	r3, r3, #14
 8003abc:	d5f5      	bpl.n	8003aaa <HAL_RCC_OscConfig+0x6a>
 8003abe:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac0:	0799      	lsls	r1, r3, #30
 8003ac2:	d522      	bpl.n	8003b0a <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac4:	2d04      	cmp	r5, #4
 8003ac6:	f000 8106 	beq.w	8003cd6 <HAL_RCC_OscConfig+0x296>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aca:	2d0c      	cmp	r5, #12
 8003acc:	f000 8100 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x290>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad0:	68e3      	ldr	r3, [r4, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 817f 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x396>
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4b89      	ldr	r3, [pc, #548]	; (8003d00 <HAL_RCC_OscConfig+0x2c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003adc:	4f87      	ldr	r7, [pc, #540]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_HSI_ENABLE();
 8003ade:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fcd6 	bl	8002490 <HAL_GetTick>
 8003ae4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae6:	e005      	b.n	8003af4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fe fcd2 	bl	8002490 <HAL_GetTick>
 8003aec:	1b80      	subs	r0, r0, r6
 8003aee:	2802      	cmp	r0, #2
 8003af0:	f200 8145 	bhi.w	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	079b      	lsls	r3, r3, #30
 8003af8:	d5f6      	bpl.n	8003ae8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6922      	ldr	r2, [r4, #16]
 8003afe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b0a:	06d9      	lsls	r1, r3, #27
 8003b0c:	d525      	bpl.n	8003b5a <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0e:	2d00      	cmp	r5, #0
 8003b10:	f000 8097 	beq.w	8003c42 <HAL_RCC_OscConfig+0x202>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b14:	69a3      	ldr	r3, [r4, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8170 	beq.w	8003dfc <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_MSI_ENABLE();
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4b79      	ldr	r3, [pc, #484]	; (8003d04 <HAL_RCC_OscConfig+0x2c4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b20:	4e76      	ldr	r6, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
        __HAL_RCC_MSI_ENABLE();
 8003b22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b24:	f7fe fcb4 	bl	8002490 <HAL_GetTick>
 8003b28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b2a:	e005      	b.n	8003b38 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b2c:	f7fe fcb0 	bl	8002490 <HAL_GetTick>
 8003b30:	1bc0      	subs	r0, r0, r7
 8003b32:	2802      	cmp	r0, #2
 8003b34:	f200 8123 	bhi.w	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b38:	6833      	ldr	r3, [r6, #0]
 8003b3a:	059b      	lsls	r3, r3, #22
 8003b3c:	d5f6      	bpl.n	8003b2c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b3e:	6873      	ldr	r3, [r6, #4]
 8003b40:	6a22      	ldr	r2, [r4, #32]
 8003b42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b46:	4313      	orrs	r3, r2
 8003b48:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b4a:	6873      	ldr	r3, [r6, #4]
 8003b4c:	69e2      	ldr	r2, [r4, #28]
 8003b4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b56:	6073      	str	r3, [r6, #4]
 8003b58:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	0719      	lsls	r1, r3, #28
 8003b5c:	d515      	bpl.n	8003b8a <HAL_RCC_OscConfig+0x14a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b5e:	6963      	ldr	r3, [r4, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8128 	beq.w	8003db6 <HAL_RCC_OscConfig+0x376>
      __HAL_RCC_LSI_ENABLE();
 8003b66:	2201      	movs	r2, #1
 8003b68:	4b67      	ldr	r3, [pc, #412]	; (8003d08 <HAL_RCC_OscConfig+0x2c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b6a:	4f64      	ldr	r7, [pc, #400]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
      __HAL_RCC_LSI_ENABLE();
 8003b6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fc8f 	bl	8002490 <HAL_GetTick>
 8003b72:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b74:	e005      	b.n	8003b82 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fe fc8b 	bl	8002490 <HAL_GetTick>
 8003b7a:	1b80      	subs	r0, r0, r6
 8003b7c:	2802      	cmp	r0, #2
 8003b7e:	f200 80fe 	bhi.w	8003d7e <HAL_RCC_OscConfig+0x33e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	079a      	lsls	r2, r3, #30
 8003b86:	d5f6      	bpl.n	8003b76 <HAL_RCC_OscConfig+0x136>
 8003b88:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b8a:	075e      	lsls	r6, r3, #29
 8003b8c:	d53b      	bpl.n	8003c06 <HAL_RCC_OscConfig+0x1c6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b92:	00d0      	lsls	r0, r2, #3
 8003b94:	f100 8130 	bmi.w	8003df8 <HAL_RCC_OscConfig+0x3b8>
      pwrclkchanged = SET;
 8003b98:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4b57      	ldr	r3, [pc, #348]	; (8003d0c <HAL_RCC_OscConfig+0x2cc>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	05d1      	lsls	r1, r2, #23
 8003bb2:	f140 80d2 	bpl.w	8003d5a <HAL_RCC_OscConfig+0x31a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb6:	68a3      	ldr	r3, [r4, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	f000 817c 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x476>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80ae 	beq.w	8003d20 <HAL_RCC_OscConfig+0x2e0>
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bca:	f000 8192 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x4b2>
 8003bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bda:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003bdc:	f7fe fc58 	bl	8002490 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003be4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8003cfc <HAL_RCC_OscConfig+0x2bc>
 8003bea:	e005      	b.n	8003bf8 <HAL_RCC_OscConfig+0x1b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bec:	f7fe fc50 	bl	8002490 <HAL_GetTick>
 8003bf0:	1bc0      	subs	r0, r0, r7
 8003bf2:	4548      	cmp	r0, r9
 8003bf4:	f200 80c3 	bhi.w	8003d7e <HAL_RCC_OscConfig+0x33e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bf8:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8003bfc:	059b      	lsls	r3, r3, #22
 8003bfe:	d5f5      	bpl.n	8003bec <HAL_RCC_OscConfig+0x1ac>
    if(pwrclkchanged == SET)
 8003c00:	2e00      	cmp	r6, #0
 8003c02:	f040 8152 	bne.w	8003eaa <HAL_RCC_OscConfig+0x46a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c08:	b1b8      	cbz	r0, 8003c3a <HAL_RCC_OscConfig+0x1fa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c0a:	2d0c      	cmp	r5, #12
 8003c0c:	f000 8159 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x482>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c10:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_RCC_OscConfig+0x2d0>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c18:	f000 811d 	beq.w	8003e56 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c1e:	f7fe fc37 	bl	8002490 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c22:	4d36      	ldr	r5, [pc, #216]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8003c24:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c26:	e005      	b.n	8003c34 <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe fc32 	bl	8002490 <HAL_GetTick>
 8003c2c:	1b00      	subs	r0, r0, r4
 8003c2e:	2802      	cmp	r0, #2
 8003c30:	f200 80a5 	bhi.w	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	019b      	lsls	r3, r3, #6
 8003c38:	d4f6      	bmi.n	8003c28 <HAL_RCC_OscConfig+0x1e8>
  return HAL_OK;
 8003c3a:	2000      	movs	r0, #0
}
 8003c3c:	b003      	add	sp, #12
 8003c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c42:	4b2e      	ldr	r3, [pc, #184]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	059a      	lsls	r2, r3, #22
 8003c48:	d502      	bpl.n	8003c50 <HAL_RCC_OscConfig+0x210>
 8003c4a:	69a3      	ldr	r3, [r4, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03b      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x288>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c50:	4e2a      	ldr	r6, [pc, #168]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003c52:	6a20      	ldr	r0, [r4, #32]
 8003c54:	6873      	ldr	r3, [r6, #4]
 8003c56:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c5a:	4298      	cmp	r0, r3
 8003c5c:	f240 80de 	bls.w	8003e1c <HAL_RCC_OscConfig+0x3dc>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c60:	f7ff feac 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d12f      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x288>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c68:	6872      	ldr	r2, [r6, #4]
 8003c6a:	6a23      	ldr	r3, [r4, #32]
 8003c6c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c70:	431a      	orrs	r2, r3
 8003c72:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c74:	6872      	ldr	r2, [r6, #4]
 8003c76:	69e1      	ldr	r1, [r4, #28]
 8003c78:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c7c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c80:	6072      	str	r2, [r6, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c86:	491d      	ldr	r1, [pc, #116]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003c88:	4822      	ldr	r0, [pc, #136]	; (8003d14 <HAL_RCC_OscConfig+0x2d4>)
 8003c8a:	6889      	ldr	r1, [r1, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c8c:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c8e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8003c92:	5c40      	ldrb	r0, [r0, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c94:	3301      	adds	r3, #1
        status = HAL_InitTick(uwTickPrio);
 8003c96:	4920      	ldr	r1, [pc, #128]	; (8003d18 <HAL_RCC_OscConfig+0x2d8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_RCC_OscConfig+0x2dc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c9e:	40c3      	lsrs	r3, r0
        status = HAL_InitTick(uwTickPrio);
 8003ca0:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ca2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003ca4:	f7fe fbb2 	bl	800240c <HAL_InitTick>
        if(status != HAL_OK)
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d1c7      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1fc>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	e754      	b.n	8003b5a <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cb0:	2e00      	cmp	r6, #0
 8003cb2:	f43f aedc 	beq.w	8003a6e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb6:	4a11      	ldr	r2, [pc, #68]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	0392      	lsls	r2, r2, #14
 8003cbc:	f57f af00 	bpl.w	8003ac0 <HAL_RCC_OscConfig+0x80>
 8003cc0:	6862      	ldr	r2, [r4, #4]
 8003cc2:	2a00      	cmp	r2, #0
 8003cc4:	f47f aefc 	bne.w	8003ac0 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 8003cc8:	2001      	movs	r0, #1
}
 8003cca:	b003      	add	sp, #12
 8003ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cd0:	2e00      	cmp	r6, #0
 8003cd2:	f47f aefd 	bne.w	8003ad0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	0792      	lsls	r2, r2, #30
 8003cdc:	d502      	bpl.n	8003ce4 <HAL_RCC_OscConfig+0x2a4>
 8003cde:	68e2      	ldr	r2, [r4, #12]
 8003ce0:	2a01      	cmp	r2, #1
 8003ce2:	d1f1      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4905      	ldr	r1, [pc, #20]	; (8003cfc <HAL_RCC_OscConfig+0x2bc>)
 8003ce6:	6920      	ldr	r0, [r4, #16]
 8003ce8:	684a      	ldr	r2, [r1, #4]
 8003cea:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003cee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003cf2:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cf4:	06d9      	lsls	r1, r3, #27
 8003cf6:	f57f af30 	bpl.w	8003b5a <HAL_RCC_OscConfig+0x11a>
 8003cfa:	e708      	b.n	8003b0e <HAL_RCC_OscConfig+0xce>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	42470000 	.word	0x42470000
 8003d04:	42470020 	.word	0x42470020
 8003d08:	42470680 	.word	0x42470680
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	42470060 	.word	0x42470060
 8003d14:	08009abc 	.word	0x08009abc
 8003d18:	200002c8 	.word	0x200002c8
 8003d1c:	200002c0 	.word	0x200002c0
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	4b78      	ldr	r3, [pc, #480]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d28:	4698      	mov	r8, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003d38:	f7fe fbaa 	bl	8002490 <HAL_GetTick>
 8003d3c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d3e:	e004      	b.n	8003d4a <HAL_RCC_OscConfig+0x30a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f7fe fba6 	bl	8002490 <HAL_GetTick>
 8003d44:	1bc0      	subs	r0, r0, r7
 8003d46:	4548      	cmp	r0, r9
 8003d48:	d819      	bhi.n	8003d7e <HAL_RCC_OscConfig+0x33e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d4a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8003d4e:	0598      	lsls	r0, r3, #22
 8003d50:	d4f6      	bmi.n	8003d40 <HAL_RCC_OscConfig+0x300>
    if(pwrclkchanged == SET)
 8003d52:	2e00      	cmp	r6, #0
 8003d54:	f43f af57 	beq.w	8003c06 <HAL_RCC_OscConfig+0x1c6>
 8003d58:	e0a7      	b.n	8003eaa <HAL_RCC_OscConfig+0x46a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5a:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	4698      	mov	r8, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d64:	f7fe fb94 	bl	8002490 <HAL_GetTick>
 8003d68:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6e:	05da      	lsls	r2, r3, #23
 8003d70:	f53f af21 	bmi.w	8003bb6 <HAL_RCC_OscConfig+0x176>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d74:	f7fe fb8c 	bl	8002490 <HAL_GetTick>
 8003d78:	1bc0      	subs	r0, r0, r7
 8003d7a:	2864      	cmp	r0, #100	; 0x64
 8003d7c:	d9f5      	bls.n	8003d6a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003d7e:	2003      	movs	r0, #3
}
 8003d80:	b003      	add	sp, #12
 8003d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d86:	4b5f      	ldr	r3, [pc, #380]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d8a:	4698      	mov	r8, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d9a:	f7fe fb79 	bl	8002490 <HAL_GetTick>
 8003d9e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003da0:	e004      	b.n	8003dac <HAL_RCC_OscConfig+0x36c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da2:	f7fe fb75 	bl	8002490 <HAL_GetTick>
 8003da6:	1bc0      	subs	r0, r0, r7
 8003da8:	2864      	cmp	r0, #100	; 0x64
 8003daa:	d8e8      	bhi.n	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dac:	f8d8 3000 	ldr.w	r3, [r8]
 8003db0:	0398      	lsls	r0, r3, #14
 8003db2:	d4f6      	bmi.n	8003da2 <HAL_RCC_OscConfig+0x362>
 8003db4:	e683      	b.n	8003abe <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 8003db6:	4a54      	ldr	r2, [pc, #336]	; (8003f08 <HAL_RCC_OscConfig+0x4c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db8:	4f52      	ldr	r7, [pc, #328]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
      __HAL_RCC_LSI_DISABLE();
 8003dba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003dbc:	f7fe fb68 	bl	8002490 <HAL_GetTick>
 8003dc0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dc2:	e004      	b.n	8003dce <HAL_RCC_OscConfig+0x38e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fb64 	bl	8002490 <HAL_GetTick>
 8003dc8:	1b80      	subs	r0, r0, r6
 8003dca:	2802      	cmp	r0, #2
 8003dcc:	d8d7      	bhi.n	8003d7e <HAL_RCC_OscConfig+0x33e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd0:	079b      	lsls	r3, r3, #30
 8003dd2:	d4f7      	bmi.n	8003dc4 <HAL_RCC_OscConfig+0x384>
 8003dd4:	e6d8      	b.n	8003b88 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8003dd6:	4a4d      	ldr	r2, [pc, #308]	; (8003f0c <HAL_RCC_OscConfig+0x4cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dd8:	4f4a      	ldr	r7, [pc, #296]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_HSI_DISABLE();
 8003dda:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fb58 	bl	8002490 <HAL_GetTick>
 8003de0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003de2:	e004      	b.n	8003dee <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de4:	f7fe fb54 	bl	8002490 <HAL_GetTick>
 8003de8:	1b80      	subs	r0, r0, r6
 8003dea:	2802      	cmp	r0, #2
 8003dec:	d8c7      	bhi.n	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	0798      	lsls	r0, r3, #30
 8003df2:	d4f7      	bmi.n	8003de4 <HAL_RCC_OscConfig+0x3a4>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	e688      	b.n	8003b0a <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8003df8:	2600      	movs	r6, #0
 8003dfa:	e6d7      	b.n	8003bac <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_MSI_DISABLE();
 8003dfc:	4a44      	ldr	r2, [pc, #272]	; (8003f10 <HAL_RCC_OscConfig+0x4d0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003dfe:	4f41      	ldr	r7, [pc, #260]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_MSI_DISABLE();
 8003e00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e02:	f7fe fb45 	bl	8002490 <HAL_GetTick>
 8003e06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e08:	e004      	b.n	8003e14 <HAL_RCC_OscConfig+0x3d4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e0a:	f7fe fb41 	bl	8002490 <HAL_GetTick>
 8003e0e:	1b80      	subs	r0, r0, r6
 8003e10:	2802      	cmp	r0, #2
 8003e12:	d8b4      	bhi.n	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	0598      	lsls	r0, r3, #22
 8003e18:	d4f7      	bmi.n	8003e0a <HAL_RCC_OscConfig+0x3ca>
 8003e1a:	e747      	b.n	8003cac <HAL_RCC_OscConfig+0x26c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e1c:	6873      	ldr	r3, [r6, #4]
 8003e1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003e22:	4303      	orrs	r3, r0
 8003e24:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e26:	6873      	ldr	r3, [r6, #4]
 8003e28:	69e2      	ldr	r2, [r4, #28]
 8003e2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e32:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e34:	f7ff fdc2 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	f47f af45 	bne.w	8003cc8 <HAL_RCC_OscConfig+0x288>
 8003e3e:	6a23      	ldr	r3, [r4, #32]
 8003e40:	e71f      	b.n	8003c82 <HAL_RCC_OscConfig+0x242>
    return HAL_ERROR;
 8003e42:	2001      	movs	r0, #1
}
 8003e44:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e46:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e623      	b.n	8003a9e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 8003e56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e58:	f7fe fb1a 	bl	8002490 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e5c:	4e29      	ldr	r6, [pc, #164]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 8003e5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e60:	e004      	b.n	8003e6c <HAL_RCC_OscConfig+0x42c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fe fb15 	bl	8002490 <HAL_GetTick>
 8003e66:	1b40      	subs	r0, r0, r5
 8003e68:	2802      	cmp	r0, #2
 8003e6a:	d888      	bhi.n	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e6c:	6833      	ldr	r3, [r6, #0]
 8003e6e:	0199      	lsls	r1, r3, #6
 8003e70:	d4f7      	bmi.n	8003e62 <HAL_RCC_OscConfig+0x422>
        __HAL_RCC_PLL_ENABLE();
 8003e72:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e74:	e9d4 300a 	ldrd	r3, r0, [r4, #40]	; 0x28
 8003e78:	68b2      	ldr	r2, [r6, #8]
 8003e7a:	4303      	orrs	r3, r0
 8003e7c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8003e80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003e82:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003e84:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <HAL_RCC_OscConfig+0x4d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e86:	4303      	orrs	r3, r0
 8003e88:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8003e8a:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fb00 	bl	8002490 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e90:	4d1c      	ldr	r5, [pc, #112]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 8003e92:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e94:	e005      	b.n	8003ea2 <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fe fafb 	bl	8002490 <HAL_GetTick>
 8003e9a:	1b00      	subs	r0, r0, r4
 8003e9c:	2802      	cmp	r0, #2
 8003e9e:	f63f af6e 	bhi.w	8003d7e <HAL_RCC_OscConfig+0x33e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	019a      	lsls	r2, r3, #6
 8003ea6:	d5f6      	bpl.n	8003e96 <HAL_RCC_OscConfig+0x456>
 8003ea8:	e6c7      	b.n	8003c3a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4a16      	ldr	r2, [pc, #88]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6253      	str	r3, [r2, #36]	; 0x24
 8003eb4:	e6a7      	b.n	8003c06 <HAL_RCC_OscConfig+0x1c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec0:	e68c      	b.n	8003bdc <HAL_RCC_OscConfig+0x19c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec2:	2801      	cmp	r0, #1
 8003ec4:	f43f aeba 	beq.w	8003c3c <HAL_RCC_OscConfig+0x1fc>
        pll_config = RCC->CFGR;
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <HAL_RCC_OscConfig+0x4c4>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8003ecc:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003ed2:	4291      	cmp	r1, r2
 8003ed4:	f47f aef8 	bne.w	8003cc8 <HAL_RCC_OscConfig+0x288>
 8003ed8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003eda:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	f47f aef2 	bne.w	8003cc8 <HAL_RCC_OscConfig+0x288>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ee4:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003ee6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 8003eea:	1a18      	subs	r0, r3, r0
 8003eec:	bf18      	it	ne
 8003eee:	2001      	movne	r0, #1
 8003ef0:	e6a4      	b.n	8003c3c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8003ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34
 8003f00:	e66c      	b.n	8003bdc <HAL_RCC_OscConfig+0x19c>
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470680 	.word	0x42470680
 8003f0c:	42470000 	.word	0x42470000
 8003f10:	42470020 	.word	0x42470020
 8003f14:	42470060 	.word	0x42470060

08003f18 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	f000 80ca 	beq.w	80040b2 <HAL_RCC_ClockConfig+0x19a>
{
 8003f1e:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8003f22:	460c      	mov	r4, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f24:	498e      	ldr	r1, [pc, #568]	; (8004160 <HAL_RCC_ClockConfig+0x248>)
 8003f26:	4606      	mov	r6, r0
 8003f28:	680a      	ldr	r2, [r1, #0]
{
 8003f2a:	b082      	sub	sp, #8
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	f002 0201 	and.w	r2, r2, #1
 8003f30:	42a2      	cmp	r2, r4
 8003f32:	d214      	bcs.n	8003f5e <HAL_RCC_ClockConfig+0x46>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f34:	2c01      	cmp	r4, #1
 8003f36:	d103      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x28>
 8003f38:	680a      	ldr	r2, [r1, #0]
 8003f3a:	f042 0204 	orr.w	r2, r2, #4
 8003f3e:	600a      	str	r2, [r1, #0]
 8003f40:	4987      	ldr	r1, [pc, #540]	; (8004160 <HAL_RCC_ClockConfig+0x248>)
 8003f42:	680a      	ldr	r2, [r1, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	4322      	orrs	r2, r4
 8003f4a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4c:	680a      	ldr	r2, [r1, #0]
 8003f4e:	f002 0201 	and.w	r2, r2, #1
 8003f52:	42a2      	cmp	r2, r4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x46>
    return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
}
 8003f58:	b002      	add	sp, #8
 8003f5a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5e:	6832      	ldr	r2, [r6, #0]
 8003f60:	0790      	lsls	r0, r2, #30
 8003f62:	d506      	bpl.n	8003f72 <HAL_RCC_ClockConfig+0x5a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4d7f      	ldr	r5, [pc, #508]	; (8004164 <HAL_RCC_ClockConfig+0x24c>)
 8003f66:	68b0      	ldr	r0, [r6, #8]
 8003f68:	68a9      	ldr	r1, [r5, #8]
 8003f6a:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8003f6e:	4301      	orrs	r1, r0
 8003f70:	60a9      	str	r1, [r5, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f72:	07d1      	lsls	r1, r2, #31
 8003f74:	d52a      	bpl.n	8003fcc <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f76:	6871      	ldr	r1, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f78:	4a7a      	ldr	r2, [pc, #488]	; (8004164 <HAL_RCC_ClockConfig+0x24c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7a:	2902      	cmp	r1, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f7c:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7e:	f000 8094 	beq.w	80040aa <HAL_RCC_ClockConfig+0x192>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f82:	2903      	cmp	r1, #3
 8003f84:	f000 808b 	beq.w	800409e <HAL_RCC_ClockConfig+0x186>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f88:	2901      	cmp	r1, #1
 8003f8a:	f000 80e5 	beq.w	8004158 <HAL_RCC_ClockConfig+0x240>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f8e:	0590      	lsls	r0, r2, #22
 8003f90:	d5e1      	bpl.n	8003f56 <HAL_RCC_ClockConfig+0x3e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f92:	4d74      	ldr	r5, [pc, #464]	; (8004164 <HAL_RCC_ClockConfig+0x24c>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f241 3b88 	movw	fp, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f98:	68aa      	ldr	r2, [r5, #8]
 8003f9a:	f022 0203 	bic.w	r2, r2, #3
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	60aa      	str	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8003fa2:	f7fe fa75 	bl	8002490 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa6:	6872      	ldr	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8003fa8:	4682      	mov	sl, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	2a02      	cmp	r2, #2
 8003fac:	d059      	beq.n	8004062 <HAL_RCC_ClockConfig+0x14a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fae:	2a03      	cmp	r2, #3
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_ClockConfig+0x162>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003fb2:	2a01      	cmp	r2, #1
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0xac>
 8003fb6:	e06c      	b.n	8004092 <HAL_RCC_ClockConfig+0x17a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fe fa6a 	bl	8002490 <HAL_GetTick>
 8003fbc:	eba0 000a 	sub.w	r0, r0, sl
 8003fc0:	4558      	cmp	r0, fp
 8003fc2:	d878      	bhi.n	80040b6 <HAL_RCC_ClockConfig+0x19e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fc4:	68aa      	ldr	r2, [r5, #8]
 8003fc6:	f012 0f0c 	tst.w	r2, #12
 8003fca:	d1f5      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fcc:	4964      	ldr	r1, [pc, #400]	; (8004160 <HAL_RCC_ClockConfig+0x248>)
 8003fce:	680a      	ldr	r2, [r1, #0]
 8003fd0:	f002 0201 	and.w	r2, r2, #1
 8003fd4:	42a2      	cmp	r2, r4
 8003fd6:	d906      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd8:	680a      	ldr	r2, [r1, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe0:	680a      	ldr	r2, [r1, #0]
 8003fe2:	07d2      	lsls	r2, r2, #31
 8003fe4:	d4b7      	bmi.n	8003f56 <HAL_RCC_ClockConfig+0x3e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe6:	6832      	ldr	r2, [r6, #0]
 8003fe8:	0751      	lsls	r1, r2, #29
 8003fea:	d506      	bpl.n	8003ffa <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4c5d      	ldr	r4, [pc, #372]	; (8004164 <HAL_RCC_ClockConfig+0x24c>)
 8003fee:	68f0      	ldr	r0, [r6, #12]
 8003ff0:	68a1      	ldr	r1, [r4, #8]
 8003ff2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003ff6:	4301      	orrs	r1, r0
 8003ff8:	60a1      	str	r1, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	0713      	lsls	r3, r2, #28
 8003ffc:	d422      	bmi.n	8004044 <HAL_RCC_ClockConfig+0x12c>
  tmpreg = RCC->CFGR;
 8003ffe:	4959      	ldr	r1, [pc, #356]	; (8004164 <HAL_RCC_ClockConfig+0x24c>)
 8004000:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8004002:	f002 030c 	and.w	r3, r2, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	f000 8083 	beq.w	8004112 <HAL_RCC_ClockConfig+0x1fa>
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d054      	beq.n	80040ba <HAL_RCC_ClockConfig+0x1a2>
 8004010:	2b04      	cmp	r3, #4
 8004012:	d048      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x18e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004014:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004018:	684b      	ldr	r3, [r1, #4]
 800401a:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800401e:	3301      	adds	r3, #1
 8004020:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004022:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_RCC_ClockConfig+0x24c>)
 8004024:	4a50      	ldr	r2, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x250>)
 8004026:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8004028:	4950      	ldr	r1, [pc, #320]	; (800416c <HAL_RCC_ClockConfig+0x254>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800402a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800402e:	5cd3      	ldrb	r3, [r2, r3]
 8004030:	4a4f      	ldr	r2, [pc, #316]	; (8004170 <HAL_RCC_ClockConfig+0x258>)
 8004032:	fa20 f303 	lsr.w	r3, r0, r3
  status = HAL_InitTick(uwTickPrio);
 8004036:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	b002      	add	sp, #8
 800403c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  status = HAL_InitTick(uwTickPrio);
 8004040:	f7fe b9e4 	b.w	800240c <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004044:	4a47      	ldr	r2, [pc, #284]	; (8004164 <HAL_RCC_ClockConfig+0x24c>)
 8004046:	6931      	ldr	r1, [r6, #16]
 8004048:	6893      	ldr	r3, [r2, #8]
 800404a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800404e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004052:	6093      	str	r3, [r2, #8]
 8004054:	e7d3      	b.n	8003ffe <HAL_RCC_ClockConfig+0xe6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fe fa1b 	bl	8002490 <HAL_GetTick>
 800405a:	eba0 000a 	sub.w	r0, r0, sl
 800405e:	4558      	cmp	r0, fp
 8004060:	d829      	bhi.n	80040b6 <HAL_RCC_ClockConfig+0x19e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004062:	68aa      	ldr	r2, [r5, #8]
 8004064:	f002 020c 	and.w	r2, r2, #12
 8004068:	2a08      	cmp	r2, #8
 800406a:	d1f4      	bne.n	8004056 <HAL_RCC_ClockConfig+0x13e>
 800406c:	e7ae      	b.n	8003fcc <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406e:	f7fe fa0f 	bl	8002490 <HAL_GetTick>
 8004072:	eba0 000a 	sub.w	r0, r0, sl
 8004076:	4558      	cmp	r0, fp
 8004078:	d81d      	bhi.n	80040b6 <HAL_RCC_ClockConfig+0x19e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800407a:	68aa      	ldr	r2, [r5, #8]
 800407c:	f002 020c 	and.w	r2, r2, #12
 8004080:	2a0c      	cmp	r2, #12
 8004082:	d1f4      	bne.n	800406e <HAL_RCC_ClockConfig+0x156>
 8004084:	e7a2      	b.n	8003fcc <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004086:	f7fe fa03 	bl	8002490 <HAL_GetTick>
 800408a:	eba0 000a 	sub.w	r0, r0, sl
 800408e:	4558      	cmp	r0, fp
 8004090:	d811      	bhi.n	80040b6 <HAL_RCC_ClockConfig+0x19e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004092:	68aa      	ldr	r2, [r5, #8]
 8004094:	f002 020c 	and.w	r2, r2, #12
 8004098:	2a04      	cmp	r2, #4
 800409a:	d1f4      	bne.n	8004086 <HAL_RCC_ClockConfig+0x16e>
 800409c:	e796      	b.n	8003fcc <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800409e:	0193      	lsls	r3, r2, #6
 80040a0:	f53f af77 	bmi.w	8003f92 <HAL_RCC_ClockConfig+0x7a>
 80040a4:	e757      	b.n	8003f56 <HAL_RCC_ClockConfig+0x3e>
      sysclockfreq = HSI_VALUE;
 80040a6:	4833      	ldr	r0, [pc, #204]	; (8004174 <HAL_RCC_ClockConfig+0x25c>)
 80040a8:	e7bb      	b.n	8004022 <HAL_RCC_ClockConfig+0x10a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040aa:	0392      	lsls	r2, r2, #14
 80040ac:	f53f af71 	bmi.w	8003f92 <HAL_RCC_ClockConfig+0x7a>
 80040b0:	e751      	b.n	8003f56 <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
}
 80040b4:	4770      	bx	lr
          return HAL_TIMEOUT;
 80040b6:	2003      	movs	r0, #3
 80040b8:	e74e      	b.n	8003f58 <HAL_RCC_ClockConfig+0x40>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040ba:	482f      	ldr	r0, [pc, #188]	; (8004178 <HAL_RCC_ClockConfig+0x260>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040bc:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040be:	f3c2 4183 	ubfx	r1, r2, #18, #4
 80040c2:	5c44      	ldrb	r4, [r0, r1]
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040c4:	2100      	movs	r1, #0
 80040c6:	0160      	lsls	r0, r4, #5
 80040c8:	1b00      	subs	r0, r0, r4
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80040ca:	f3c2 5281 	ubfx	r2, r2, #22, #2
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040ce:	f161 0100 	sbc.w	r1, r1, #0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80040d6:	f102 0201 	add.w	r2, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040da:	d01c      	beq.n	8004116 <HAL_RCC_ClockConfig+0x1fe>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040dc:	0185      	lsls	r5, r0, #6
 80040de:	018b      	lsls	r3, r1, #6
 80040e0:	ebb5 0800 	subs.w	r8, r5, r0
 80040e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040e8:	eb63 0901 	sbc.w	r9, r3, r1
 80040ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040f4:	1908      	adds	r0, r1, r4
 80040f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fa:	f143 0100 	adc.w	r1, r3, #0
 80040fe:	024b      	lsls	r3, r1, #9
 8004100:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004104:	0244      	lsls	r4, r0, #9
 8004106:	4620      	mov	r0, r4
 8004108:	4619      	mov	r1, r3
 800410a:	2300      	movs	r3, #0
 800410c:	f7fd f804 	bl	8001118 <__aeabi_uldivmod>
 8004110:	e787      	b.n	8004022 <HAL_RCC_ClockConfig+0x10a>
  switch (tmpreg & RCC_CFGR_SWS)
 8004112:	481a      	ldr	r0, [pc, #104]	; (800417c <HAL_RCC_ClockConfig+0x264>)
 8004114:	e785      	b.n	8004022 <HAL_RCC_ClockConfig+0x10a>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004116:	ea4f 1c80 	mov.w	ip, r0, lsl #6
 800411a:	018d      	lsls	r5, r1, #6
 800411c:	ebbc 0600 	subs.w	r6, ip, r0
 8004120:	ea45 6590 	orr.w	r5, r5, r0, lsr #26
 8004124:	eb65 0101 	sbc.w	r1, r5, r1
 8004128:	9101      	str	r1, [sp, #4]
 800412a:	9600      	str	r6, [sp, #0]
 800412c:	e9dd 5600 	ldrd	r5, r6, [sp]
 8004130:	00f1      	lsls	r1, r6, #3
 8004132:	ea41 7155 	orr.w	r1, r1, r5, lsr #29
 8004136:	00e8      	lsls	r0, r5, #3
 8004138:	e9cd 0100 	strd	r0, r1, [sp]
 800413c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004140:	1900      	adds	r0, r0, r4
 8004142:	f141 0100 	adc.w	r1, r1, #0
 8004146:	028c      	lsls	r4, r1, #10
 8004148:	ea44 5490 	orr.w	r4, r4, r0, lsr #22
 800414c:	0285      	lsls	r5, r0, #10
 800414e:	4628      	mov	r0, r5
 8004150:	4621      	mov	r1, r4
 8004152:	f7fc ffe1 	bl	8001118 <__aeabi_uldivmod>
 8004156:	e764      	b.n	8004022 <HAL_RCC_ClockConfig+0x10a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004158:	0795      	lsls	r5, r2, #30
 800415a:	f53f af1a 	bmi.w	8003f92 <HAL_RCC_ClockConfig+0x7a>
 800415e:	e6fa      	b.n	8003f56 <HAL_RCC_ClockConfig+0x3e>
 8004160:	40023c00 	.word	0x40023c00
 8004164:	40023800 	.word	0x40023800
 8004168:	08009abc 	.word	0x08009abc
 800416c:	200002c8 	.word	0x200002c8
 8004170:	200002c0 	.word	0x200002c0
 8004174:	00f42400 	.word	0x00f42400
 8004178:	08009acc 	.word	0x08009acc
 800417c:	007a1200 	.word	0x007a1200

08004180 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004184:	461d      	mov	r5, r3
 8004186:	4616      	mov	r6, r2
 8004188:	b082      	sub	sp, #8
 800418a:	460c      	mov	r4, r1
 800418c:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800418e:	f7fe f97f 	bl	8002490 <HAL_GetTick>
 8004192:	4435      	add	r5, r6
 8004194:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004196:	f7fe f97b 	bl	8002490 <HAL_GetTick>
 800419a:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800419c:	4b27      	ldr	r3, [pc, #156]	; (800423c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80041a4:	fb05 f303 	mul.w	r3, r5, r3
 80041a8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041aa:	1c73      	adds	r3, r6, #1
 80041ac:	6839      	ldr	r1, [r7, #0]
 80041ae:	d107      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 80041b0:	688b      	ldr	r3, [r1, #8]
 80041b2:	ea34 0303 	bics.w	r3, r4, r3
 80041b6:	d0fb      	beq.n	80041b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 80041b8:	2000      	movs	r0, #0
}
 80041ba:	b002      	add	sp, #8
 80041bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c0:	688b      	ldr	r3, [r1, #8]
 80041c2:	ea34 0303 	bics.w	r3, r4, r3
 80041c6:	d1f7      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041c8:	f7fe f962 	bl	8002490 <HAL_GetTick>
 80041cc:	eba0 0008 	sub.w	r0, r0, r8
 80041d0:	42a8      	cmp	r0, r5
 80041d2:	d208      	bcs.n	80041e6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if(count == 0U)
 80041d4:	9a01      	ldr	r2, [sp, #4]
      count--;
 80041d6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80041d8:	2a00      	cmp	r2, #0
      count--;
 80041da:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80041de:	bf08      	it	eq
 80041e0:	2500      	moveq	r5, #0
      count--;
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	e7e1      	b.n	80041aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e6:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ea:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ec:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f6:	d014      	beq.n	8004222 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80041fe:	d007      	beq.n	8004210 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8004200:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004202:	2300      	movs	r3, #0
 8004204:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8004206:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800420a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 800420e:	e7d4      	b.n	80041ba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e7ee      	b.n	8004200 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004228:	d002      	beq.n	8004230 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800422e:	d1e3      	bne.n	80041f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e7de      	b.n	80041f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 800423a:	bf00      	nop
 800423c:	200002c0 	.word	0x200002c0

08004240 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004240:	2800      	cmp	r0, #0
 8004242:	d051      	beq.n	80042e8 <HAL_SPI_Init+0xa8>
{
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004246:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004248:	4604      	mov	r4, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03d      	beq.n	80042ca <HAL_SPI_Init+0x8a>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800424e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004250:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004254:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004256:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800425c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8004260:	2900      	cmp	r1, #0
 8004262:	d038      	beq.n	80042d6 <HAL_SPI_Init+0x96>
 8004264:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004266:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800426a:	2702      	movs	r7, #2
  hspi->State     = HAL_SPI_STATE_READY;
 800426c:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800426e:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004270:	68e1      	ldr	r1, [r4, #12]
 8004272:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8004276:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800427a:	4303      	orrs	r3, r0
 800427c:	6920      	ldr	r0, [r4, #16]
 800427e:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004282:	4038      	ands	r0, r7
 8004284:	430b      	orrs	r3, r1
 8004286:	6961      	ldr	r1, [r4, #20]
 8004288:	4303      	orrs	r3, r0
 800428a:	69a0      	ldr	r0, [r4, #24]
 800428c:	4031      	ands	r1, r6
 800428e:	430b      	orrs	r3, r1
 8004290:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8004294:	430b      	orrs	r3, r1
 8004296:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004298:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800429c:	6a27      	ldr	r7, [r4, #32]
 800429e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80042a2:	430b      	orrs	r3, r1
 80042a4:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 80042a8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042aa:	433b      	orrs	r3, r7
 80042ac:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 80042ae:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042b0:	0c00      	lsrs	r0, r0, #16
 80042b2:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 80042b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ba:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042bc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042be:	6048      	str	r0, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042c0:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042c2:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  return HAL_OK;
 80042c6:	4628      	mov	r0, r5
}
 80042c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ca:	6842      	ldr	r2, [r0, #4]
 80042cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80042d0:	d0c0      	beq.n	8004254 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042d2:	61c3      	str	r3, [r0, #28]
 80042d4:	e7be      	b.n	8004254 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80042d6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80042da:	4620      	mov	r0, r4
 80042dc:	f7fd ff44 	bl	8002168 <HAL_SPI_MspInit>
 80042e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80042e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042e6:	e7be      	b.n	8004266 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80042e8:	2001      	movs	r0, #1
}
 80042ea:	4770      	bx	lr

080042ec <HAL_SPI_Transmit>:
{
 80042ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80042f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 80042f6:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80042f8:	2801      	cmp	r0, #1
 80042fa:	f000 8086 	beq.w	800440a <HAL_SPI_Transmit+0x11e>
 80042fe:	461d      	mov	r5, r3
 8004300:	2301      	movs	r3, #1
 8004302:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004306:	4688      	mov	r8, r1
 8004308:	4617      	mov	r7, r2
 800430a:	f7fe f8c1 	bl	8002490 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800430e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004312:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004314:	2b01      	cmp	r3, #1
 8004316:	b2d8      	uxtb	r0, r3
 8004318:	d009      	beq.n	800432e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800431a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800431c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800431e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004320:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004324:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004328:	b002      	add	sp, #8
 800432a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800432e:	f1b8 0f00 	cmp.w	r8, #0
 8004332:	d0f3      	beq.n	800431c <HAL_SPI_Transmit+0x30>
 8004334:	2f00      	cmp	r7, #0
 8004336:	d0f1      	beq.n	800431c <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004338:	2203      	movs	r2, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800433a:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800433c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004340:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004342:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004344:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004348:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800434a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800434e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004350:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004352:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004354:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
 8004358:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800435a:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 800435c:	4603      	mov	r3, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800435e:	f000 8085 	beq.w	800446c <HAL_SPI_Transmit+0x180>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004362:	6802      	ldr	r2, [r0, #0]
 8004364:	0652      	lsls	r2, r2, #25
 8004366:	d403      	bmi.n	8004370 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8004368:	6802      	ldr	r2, [r0, #0]
 800436a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436e:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004370:	68e2      	ldr	r2, [r4, #12]
 8004372:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004376:	d04c      	beq.n	8004412 <HAL_SPI_Transmit+0x126>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8098 	beq.w	80044b0 <HAL_SPI_Transmit+0x1c4>
 8004380:	2f01      	cmp	r7, #1
 8004382:	f000 8095 	beq.w	80044b0 <HAL_SPI_Transmit+0x1c4>
    while (hspi->TxXferCount > 0U)
 8004386:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004388:	b29b      	uxth	r3, r3
 800438a:	b1ab      	cbz	r3, 80043b8 <HAL_SPI_Transmit+0xcc>
 800438c:	1c68      	adds	r0, r5, #1
 800438e:	f040 8084 	bne.w	800449a <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	0791      	lsls	r1, r2, #30
 8004398:	f140 8095 	bpl.w	80044c6 <HAL_SPI_Transmit+0x1da>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800439c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800439e:	7812      	ldrb	r2, [r2, #0]
 80043a0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80043a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80043a6:	3a01      	subs	r2, #1
 80043a8:	b292      	uxth	r2, r2
 80043aa:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80043ac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043ae:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80043b0:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043b2:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	d1ec      	bne.n	8004392 <HAL_SPI_Transmit+0xa6>
 80043b8:	6861      	ldr	r1, [r4, #4]
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043be:	4b5b      	ldr	r3, [pc, #364]	; (800452c <HAL_SPI_Transmit+0x240>)
 80043c0:	485b      	ldr	r0, [pc, #364]	; (8004530 <HAL_SPI_Transmit+0x244>)
 80043c2:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043c8:	fba0 0303 	umull	r0, r3, r0, r3
 80043cc:	ea4f 5353 	mov.w	r3, r3, lsr #21
 80043d0:	fb02 f303 	mul.w	r3, r2, r3
 80043d4:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d6:	d107      	bne.n	80043e8 <HAL_SPI_Transmit+0xfc>
 80043d8:	e098      	b.n	800450c <HAL_SPI_Transmit+0x220>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80043da:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043dc:	6822      	ldr	r2, [r4, #0]
      count--;
 80043de:	3b01      	subs	r3, #1
 80043e0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043e2:	6893      	ldr	r3, [r2, #8]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	d502      	bpl.n	80043ee <HAL_SPI_Transmit+0x102>
      if (count == 0U)
 80043e8:	9b01      	ldr	r3, [sp, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f5      	bne.n	80043da <HAL_SPI_Transmit+0xee>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ee:	68a3      	ldr	r3, [r4, #8]
 80043f0:	b933      	cbnz	r3, 8004400 <HAL_SPI_Transmit+0x114>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	68d3      	ldr	r3, [r2, #12]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	6893      	ldr	r3, [r2, #8]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004400:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004402:	3800      	subs	r0, #0
 8004404:	bf18      	it	ne
 8004406:	2001      	movne	r0, #1
error:
 8004408:	e788      	b.n	800431c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800440a:	2002      	movs	r0, #2
}
 800440c:	b002      	add	sp, #8
 800440e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004412:	6861      	ldr	r1, [r4, #4]
 8004414:	2900      	cmp	r1, #0
 8004416:	d176      	bne.n	8004506 <HAL_SPI_Transmit+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004418:	4647      	mov	r7, r8
 800441a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800441e:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 8004420:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004422:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004424:	3a01      	subs	r2, #1
 8004426:	b292      	uxth	r2, r2
 8004428:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800442a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800442c:	b292      	uxth	r2, r2
 800442e:	2a00      	cmp	r2, #0
 8004430:	d0c3      	beq.n	80043ba <HAL_SPI_Transmit+0xce>
 8004432:	1c6a      	adds	r2, r5, #1
 8004434:	d15e      	bne.n	80044f4 <HAL_SPI_Transmit+0x208>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004436:	6883      	ldr	r3, [r0, #8]
 8004438:	079f      	lsls	r7, r3, #30
 800443a:	d50f      	bpl.n	800445c <HAL_SPI_Transmit+0x170>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800443c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800443e:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004442:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8004444:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004446:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004448:	3b01      	subs	r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800444e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0b0      	beq.n	80043b8 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004456:	6883      	ldr	r3, [r0, #8]
 8004458:	079f      	lsls	r7, r3, #30
 800445a:	d4ef      	bmi.n	800443c <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800445c:	f7fe f818 	bl	8002490 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8004460:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0a7      	beq.n	80043b8 <HAL_SPI_Transmit+0xcc>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	e7e4      	b.n	8004436 <HAL_SPI_Transmit+0x14a>
    __HAL_SPI_DISABLE(hspi);
 800446c:	6802      	ldr	r2, [r0, #0]
 800446e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004472:	6002      	str	r2, [r0, #0]
    SPI_1LINE_TX(hspi);
 8004474:	6802      	ldr	r2, [r0, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447a:	6002      	str	r2, [r0, #0]
 800447c:	e771      	b.n	8004362 <HAL_SPI_Transmit+0x76>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800447e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004480:	7812      	ldrb	r2, [r2, #0]
 8004482:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004484:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004486:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004488:	3b01      	subs	r3, #1
 800448a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800448c:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800448e:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004490:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004492:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d08e      	beq.n	80043b8 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	0792      	lsls	r2, r2, #30
 80044a0:	d4ed      	bmi.n	800447e <HAL_SPI_Transmit+0x192>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a2:	f7fd fff5 	bl	8002490 <HAL_GetTick>
 80044a6:	1b80      	subs	r0, r0, r6
 80044a8:	42a8      	cmp	r0, r5
 80044aa:	d3f2      	bcc.n	8004492 <HAL_SPI_Transmit+0x1a6>
          errorcode = HAL_TIMEOUT;
 80044ac:	2003      	movs	r0, #3
 80044ae:	e735      	b.n	800431c <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b0:	f898 3000 	ldrb.w	r3, [r8]
 80044b4:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80044b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044be:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80044c0:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c2:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80044c4:	e75f      	b.n	8004386 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c6:	f7fd ffe3 	bl	8002490 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80044ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f47f af5f 	bne.w	8004392 <HAL_SPI_Transmit+0xa6>
 80044d4:	e770      	b.n	80043b8 <HAL_SPI_Transmit+0xcc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044d8:	f832 1b02 	ldrh.w	r1, [r2], #2
 80044dc:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80044de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e0:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80044e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f43f af63 	beq.w	80043b8 <HAL_SPI_Transmit+0xcc>
 80044f2:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	0791      	lsls	r1, r2, #30
 80044f8:	d4ed      	bmi.n	80044d6 <HAL_SPI_Transmit+0x1ea>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fa:	f7fd ffc9 	bl	8002490 <HAL_GetTick>
 80044fe:	1b80      	subs	r0, r0, r6
 8004500:	42a8      	cmp	r0, r5
 8004502:	d3f1      	bcc.n	80044e8 <HAL_SPI_Transmit+0x1fc>
 8004504:	e7d2      	b.n	80044ac <HAL_SPI_Transmit+0x1c0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004506:	2f01      	cmp	r7, #1
 8004508:	d18f      	bne.n	800442a <HAL_SPI_Transmit+0x13e>
 800450a:	e785      	b.n	8004418 <HAL_SPI_Transmit+0x12c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	4633      	mov	r3, r6
 800450e:	462a      	mov	r2, r5
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	4620      	mov	r0, r4
 8004514:	f7ff fe34 	bl	8004180 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004518:	2800      	cmp	r0, #0
 800451a:	f43f af68 	beq.w	80043ee <HAL_SPI_Transmit+0x102>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800451e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004520:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004522:	4313      	orrs	r3, r2
 8004524:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004526:	6562      	str	r2, [r4, #84]	; 0x54
 8004528:	e761      	b.n	80043ee <HAL_SPI_Transmit+0x102>
 800452a:	bf00      	nop
 800452c:	200002c0 	.word	0x200002c0
 8004530:	165e9f81 	.word	0x165e9f81

08004534 <HAL_SPI_TransmitReceive>:
{
 8004534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004538:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800453a:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 800453e:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8004540:	2801      	cmp	r0, #1
 8004542:	f000 80a3 	beq.w	800468c <HAL_SPI_TransmitReceive+0x158>
 8004546:	461f      	mov	r7, r3
 8004548:	2301      	movs	r3, #1
 800454a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800454e:	4691      	mov	r9, r2
 8004550:	4688      	mov	r8, r1
 8004552:	f7fd ff9d 	bl	8002490 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004556:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800455a:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800455c:	2e01      	cmp	r6, #1
  tmp_mode            = hspi->Init.Mode;
 800455e:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 8004560:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004562:	d011      	beq.n	8004588 <HAL_SPI_TransmitReceive+0x54>
 8004564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004568:	d009      	beq.n	800457e <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 800456a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800456c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800456e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004570:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004574:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004578:	b003      	add	sp, #12
 800457a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800457e:	68a1      	ldr	r1, [r4, #8]
 8004580:	2900      	cmp	r1, #0
 8004582:	d1f2      	bne.n	800456a <HAL_SPI_TransmitReceive+0x36>
 8004584:	2a04      	cmp	r2, #4
 8004586:	d1f0      	bne.n	800456a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004588:	f1b8 0f00 	cmp.w	r8, #0
 800458c:	f000 8082 	beq.w	8004694 <HAL_SPI_TransmitReceive+0x160>
 8004590:	f1b9 0f00 	cmp.w	r9, #0
 8004594:	d07e      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x160>
 8004596:	2f00      	cmp	r7, #0
 8004598:	d07c      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x160>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800459a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800459e:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045a0:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045a2:	bf1c      	itt	ne
 80045a4:	2205      	movne	r2, #5
 80045a6:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045aa:	2200      	movs	r2, #0
 80045ac:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80045ae:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80045b0:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b2:	6801      	ldr	r1, [r0, #0]
  hspi->TxISR       = NULL;
 80045b4:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b8:	064a      	lsls	r2, r1, #25
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045ba:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045be:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045c0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045c4:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045c6:	d403      	bmi.n	80045d0 <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 80045c8:	6802      	ldr	r2, [r0, #0]
 80045ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ce:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d0:	68e2      	ldr	r2, [r4, #12]
 80045d2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80045d6:	f000 80ab 	beq.w	8004730 <HAL_SPI_TransmitReceive+0x1fc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 809d 	beq.w	800471a <HAL_SPI_TransmitReceive+0x1e6>
 80045e0:	2f01      	cmp	r7, #1
 80045e2:	f000 809a 	beq.w	800471a <HAL_SPI_TransmitReceive+0x1e6>
 80045e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        txallowed = 1U;
 80045e8:	2601      	movs	r6, #1
 80045ea:	3301      	adds	r3, #1
 80045ec:	d028      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x10c>
 80045ee:	e053      	b.n	8004698 <HAL_SPI_TransmitReceive+0x164>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	6893      	ldr	r3, [r2, #8]
 80045f4:	0798      	lsls	r0, r3, #30
 80045f6:	d50f      	bpl.n	8004618 <HAL_SPI_TransmitReceive+0xe4>
 80045f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	b163      	cbz	r3, 8004618 <HAL_SPI_TransmitReceive+0xe4>
 80045fe:	b15e      	cbz	r6, 8004618 <HAL_SPI_TransmitReceive+0xe4>
        txallowed = 0U;
 8004600:	2600      	movs	r6, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004608:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800460a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800460c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800460e:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8004610:	b29b      	uxth	r3, r3
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004616:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004618:	6893      	ldr	r3, [r2, #8]
 800461a:	f013 0301 	ands.w	r3, r3, #1
 800461e:	d00d      	beq.n	800463c <HAL_SPI_TransmitReceive+0x108>
 8004620:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004622:	b289      	uxth	r1, r1
 8004624:	b151      	cbz	r1, 800463c <HAL_SPI_TransmitReceive+0x108>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004626:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 8004628:	461e      	mov	r6, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800462a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800462c:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 800462e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004630:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004632:	3b01      	subs	r3, #1
 8004634:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8004636:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8004638:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800463a:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800463c:	f7fd ff28 	bl	8002490 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004640:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1d3      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0xbc>
 8004648:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1cf      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0xbc>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004654:	4b77      	ldr	r3, [pc, #476]	; (8004834 <HAL_SPI_TransmitReceive+0x300>)
 8004656:	4878      	ldr	r0, [pc, #480]	; (8004838 <HAL_SPI_TransmitReceive+0x304>)
 8004658:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465a:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800465c:	fba0 0303 	umull	r0, r3, r0, r3
 8004660:	0d5b      	lsrs	r3, r3, #21
 8004662:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004666:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800466a:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800466c:	d146      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x1c8>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	462b      	mov	r3, r5
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	4620      	mov	r0, r4
 8004674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004676:	f7ff fd83 	bl	8004180 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800467a:	2800      	cmp	r0, #0
 800467c:	d041      	beq.n	8004702 <HAL_SPI_TransmitReceive+0x1ce>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004680:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004682:	2001      	movs	r0, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	4313      	orrs	r3, r2
 8004686:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004688:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 800468a:	e76f      	b.n	800456c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800468c:	2002      	movs	r0, #2
}
 800468e:	b003      	add	sp, #12
 8004690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8004694:	2001      	movs	r0, #1
 8004696:	e769      	b.n	800456c <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004698:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	b91b      	cbnz	r3, 80046a6 <HAL_SPI_TransmitReceive+0x172>
 800469e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0d4      	beq.n	8004650 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	6893      	ldr	r3, [r2, #8]
 80046aa:	0799      	lsls	r1, r3, #30
 80046ac:	d50f      	bpl.n	80046ce <HAL_SPI_TransmitReceive+0x19a>
 80046ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	b163      	cbz	r3, 80046ce <HAL_SPI_TransmitReceive+0x19a>
 80046b4:	b15e      	cbz	r6, 80046ce <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80046b6:	2600      	movs	r6, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80046be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80046c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80046c2:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80046c4:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80046cc:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046ce:	6893      	ldr	r3, [r2, #8]
 80046d0:	f013 0301 	ands.w	r3, r3, #1
 80046d4:	d003      	beq.n	80046de <HAL_SPI_TransmitReceive+0x1aa>
 80046d6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80046d8:	b289      	uxth	r1, r1
 80046da:	2900      	cmp	r1, #0
 80046dc:	d166      	bne.n	80047ac <HAL_SPI_TransmitReceive+0x278>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046de:	f7fd fed7 	bl	8002490 <HAL_GetTick>
 80046e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e4:	1b40      	subs	r0, r0, r5
 80046e6:	4298      	cmp	r0, r3
 80046e8:	d3d6      	bcc.n	8004698 <HAL_SPI_TransmitReceive+0x164>
        errorcode = HAL_TIMEOUT;
 80046ea:	2003      	movs	r0, #3
 80046ec:	e73e      	b.n	800456c <HAL_SPI_TransmitReceive+0x38>
      count--;
 80046ee:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046f0:	6822      	ldr	r2, [r4, #0]
      count--;
 80046f2:	3b01      	subs	r3, #1
 80046f4:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046f6:	6893      	ldr	r3, [r2, #8]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	d502      	bpl.n	8004702 <HAL_SPI_TransmitReceive+0x1ce>
      if (count == 0U)
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f5      	bne.n	80046ee <HAL_SPI_TransmitReceive+0x1ba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004702:	68a0      	ldr	r0, [r4, #8]
 8004704:	2800      	cmp	r0, #0
 8004706:	f040 8092 	bne.w	800482e <HAL_SPI_TransmitReceive+0x2fa>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	9000      	str	r0, [sp, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	9200      	str	r2, [sp, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	9b00      	ldr	r3, [sp, #0]
 8004718:	e728      	b.n	800456c <HAL_SPI_TransmitReceive+0x38>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800471a:	f898 3000 	ldrb.w	r3, [r8]
 800471e:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004720:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004722:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004724:	3b01      	subs	r3, #1
 8004726:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004728:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800472a:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800472c:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800472e:	e75a      	b.n	80045e6 <HAL_SPI_TransmitReceive+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004730:	2b00      	cmp	r3, #0
 8004732:	d147      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x290>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004734:	4641      	mov	r1, r8
 8004736:	f831 3b02 	ldrh.w	r3, [r1], #2
 800473a:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800473c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473e:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004740:	3b01      	subs	r3, #1
 8004742:	b29b      	uxth	r3, r3
 8004744:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8004748:	2601      	movs	r6, #1
 800474a:	3301      	adds	r3, #1
 800474c:	d025      	beq.n	800479a <HAL_SPI_TransmitReceive+0x266>
 800474e:	e03c      	b.n	80047ca <HAL_SPI_TransmitReceive+0x296>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	6893      	ldr	r3, [r2, #8]
 8004754:	079b      	lsls	r3, r3, #30
 8004756:	d50d      	bpl.n	8004774 <HAL_SPI_TransmitReceive+0x240>
 8004758:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800475a:	b29b      	uxth	r3, r3
 800475c:	b153      	cbz	r3, 8004774 <HAL_SPI_TransmitReceive+0x240>
 800475e:	b14e      	cbz	r6, 8004774 <HAL_SPI_TransmitReceive+0x240>
        txallowed = 0U;
 8004760:	2600      	movs	r6, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004762:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004764:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004768:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800476a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800476e:	3b01      	subs	r3, #1
 8004770:	b29b      	uxth	r3, r3
 8004772:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004774:	6893      	ldr	r3, [r2, #8]
 8004776:	f013 0301 	ands.w	r3, r3, #1
 800477a:	d00c      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x262>
 800477c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800477e:	b289      	uxth	r1, r1
 8004780:	b149      	cbz	r1, 8004796 <HAL_SPI_TransmitReceive+0x262>
        txallowed = 1U;
 8004782:	461e      	mov	r6, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004784:	68d3      	ldr	r3, [r2, #12]
 8004786:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004788:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800478c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800478e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004790:	3b01      	subs	r3, #1
 8004792:	b29b      	uxth	r3, r3
 8004794:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004796:	f7fd fe7b 	bl	8002490 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1d6      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x21c>
 80047a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1d2      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x21c>
 80047aa:	e751      	b.n	8004650 <HAL_SPI_TransmitReceive+0x11c>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047ac:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 80047ae:	461e      	mov	r6, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047b2:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80047b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80047b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 80047bc:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80047be:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80047c0:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 80047c2:	e78c      	b.n	80046de <HAL_SPI_TransmitReceive+0x1aa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047c4:	2f01      	cmp	r7, #1
 80047c6:	d1be      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x212>
 80047c8:	e7b4      	b.n	8004734 <HAL_SPI_TransmitReceive+0x200>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	b923      	cbnz	r3, 80047da <HAL_SPI_TransmitReceive+0x2a6>
 80047d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f43f af3b 	beq.w	8004650 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	6893      	ldr	r3, [r2, #8]
 80047de:	079f      	lsls	r7, r3, #30
 80047e0:	d50d      	bpl.n	80047fe <HAL_SPI_TransmitReceive+0x2ca>
 80047e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	b153      	cbz	r3, 80047fe <HAL_SPI_TransmitReceive+0x2ca>
 80047e8:	b14e      	cbz	r6, 80047fe <HAL_SPI_TransmitReceive+0x2ca>
        txallowed = 0U;
 80047ea:	2600      	movs	r6, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80047ee:	f831 3b02 	ldrh.w	r3, [r1], #2
 80047f2:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80047f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f6:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047fe:	6893      	ldr	r3, [r2, #8]
 8004800:	f013 0301 	ands.w	r3, r3, #1
 8004804:	d00c      	beq.n	8004820 <HAL_SPI_TransmitReceive+0x2ec>
 8004806:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004808:	b289      	uxth	r1, r1
 800480a:	b149      	cbz	r1, 8004820 <HAL_SPI_TransmitReceive+0x2ec>
        txallowed = 1U;
 800480c:	461e      	mov	r6, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800480e:	68d3      	ldr	r3, [r2, #12]
 8004810:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004812:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8004816:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004818:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800481a:	3b01      	subs	r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004820:	f7fd fe36 	bl	8002490 <HAL_GetTick>
 8004824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004826:	1b40      	subs	r0, r0, r5
 8004828:	4298      	cmp	r0, r3
 800482a:	d3ce      	bcc.n	80047ca <HAL_SPI_TransmitReceive+0x296>
 800482c:	e75d      	b.n	80046ea <HAL_SPI_TransmitReceive+0x1b6>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800482e:	2000      	movs	r0, #0
 8004830:	e69c      	b.n	800456c <HAL_SPI_TransmitReceive+0x38>
 8004832:	bf00      	nop
 8004834:	200002c0 	.word	0x200002c0
 8004838:	165e9f81 	.word	0x165e9f81

0800483c <HAL_SPI_Receive>:
{
 800483c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004840:	6846      	ldr	r6, [r0, #4]
{
 8004842:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004844:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 8004848:	4691      	mov	r9, r2
 800484a:	461d      	mov	r5, r3
 800484c:	4688      	mov	r8, r1
 800484e:	b083      	sub	sp, #12
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004850:	d06c      	beq.n	800492c <HAL_SPI_Receive+0xf0>
  __HAL_LOCK(hspi);
 8004852:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004856:	2b01      	cmp	r3, #1
 8004858:	d074      	beq.n	8004944 <HAL_SPI_Receive+0x108>
 800485a:	2301      	movs	r3, #1
 800485c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004860:	f7fd fe16 	bl	8002490 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004864:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004868:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800486a:	2f01      	cmp	r7, #1
 800486c:	b2f8      	uxtb	r0, r7
 800486e:	d009      	beq.n	8004884 <HAL_SPI_Receive+0x48>
    errorcode = HAL_BUSY;
 8004870:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004872:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004874:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004876:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800487a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800487e:	b003      	add	sp, #12
 8004880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 8004884:	f1b8 0f00 	cmp.w	r8, #0
 8004888:	d0f3      	beq.n	8004872 <HAL_SPI_Receive+0x36>
 800488a:	f1b9 0f00 	cmp.w	r9, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_SPI_Receive+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004890:	2204      	movs	r2, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004892:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004894:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004898:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800489a:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800489c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80048a2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048a6:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048a8:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxXferCount = Size;
 80048aa:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048ae:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = 0U;
 80048b2:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferSize  = Size;
 80048b4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
    __HAL_SPI_DISABLE(hspi);
 80048b8:	460b      	mov	r3, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ba:	d107      	bne.n	80048cc <HAL_SPI_Receive+0x90>
    __HAL_SPI_DISABLE(hspi);
 80048bc:	680a      	ldr	r2, [r1, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	600a      	str	r2, [r1, #0]
    SPI_1LINE_RX(hspi);
 80048c4:	680a      	ldr	r2, [r1, #0]
 80048c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048ca:	600a      	str	r2, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048cc:	680a      	ldr	r2, [r1, #0]
 80048ce:	0650      	lsls	r0, r2, #25
 80048d0:	d403      	bmi.n	80048da <HAL_SPI_Receive+0x9e>
    __HAL_SPI_ENABLE(hspi);
 80048d2:	680a      	ldr	r2, [r1, #0]
 80048d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d8:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048da:	68e2      	ldr	r2, [r4, #12]
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d055      	beq.n	800498c <HAL_SPI_Receive+0x150>
    while (hspi->RxXferCount > 0U)
 80048e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80048e2:	b292      	uxth	r2, r2
 80048e4:	b18a      	cbz	r2, 800490a <HAL_SPI_Receive+0xce>
 80048e6:	1c6a      	adds	r2, r5, #1
 80048e8:	d13e      	bne.n	8004968 <HAL_SPI_Receive+0x12c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048ea:	688b      	ldr	r3, [r1, #8]
 80048ec:	07db      	lsls	r3, r3, #31
 80048ee:	d545      	bpl.n	800497c <HAL_SPI_Receive+0x140>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f0:	68ca      	ldr	r2, [r1, #12]
 80048f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048f4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 80048f8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048fa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80048fc:	3a01      	subs	r2, #1
 80048fe:	b292      	uxth	r2, r2
 8004900:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004902:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ef      	bne.n	80048ea <HAL_SPI_Receive+0xae>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490a:	6863      	ldr	r3, [r4, #4]
 800490c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004910:	d074      	beq.n	80049fc <HAL_SPI_Receive+0x1c0>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004912:	4633      	mov	r3, r6
 8004914:	462a      	mov	r2, r5
 8004916:	2101      	movs	r1, #1
 8004918:	4620      	mov	r0, r4
 800491a:	f7ff fc31 	bl	8004180 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800491e:	2800      	cmp	r0, #0
 8004920:	d17b      	bne.n	8004a1a <HAL_SPI_Receive+0x1de>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004922:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004924:	3800      	subs	r0, #0
 8004926:	bf18      	it	ne
 8004928:	2001      	movne	r0, #1
error :
 800492a:	e7a2      	b.n	8004872 <HAL_SPI_Receive+0x36>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800492c:	6883      	ldr	r3, [r0, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d18f      	bne.n	8004852 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004932:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004934:	4613      	mov	r3, r2
 8004936:	9500      	str	r5, [sp, #0]
 8004938:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800493a:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800493e:	f7ff fdf9 	bl	8004534 <HAL_SPI_TransmitReceive>
 8004942:	e79c      	b.n	800487e <HAL_SPI_Receive+0x42>
  __HAL_LOCK(hspi);
 8004944:	2002      	movs	r0, #2
}
 8004946:	b003      	add	sp, #12
 8004948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004950:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8004954:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004956:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004958:	3b01      	subs	r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800495e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0d1      	beq.n	800490a <HAL_SPI_Receive+0xce>
 8004966:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	07d2      	lsls	r2, r2, #31
 800496c:	d4ee      	bmi.n	800494c <HAL_SPI_Receive+0x110>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800496e:	f7fd fd8f 	bl	8002490 <HAL_GetTick>
 8004972:	1b80      	subs	r0, r0, r6
 8004974:	42a8      	cmp	r0, r5
 8004976:	d3f2      	bcc.n	800495e <HAL_SPI_Receive+0x122>
          errorcode = HAL_TIMEOUT;
 8004978:	2003      	movs	r0, #3
 800497a:	e77a      	b.n	8004872 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497c:	f7fd fd88 	bl	8002490 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8004980:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0c0      	beq.n	800490a <HAL_SPI_Receive+0xce>
 8004988:	6821      	ldr	r1, [r4, #0]
 800498a:	e7ae      	b.n	80048ea <HAL_SPI_Receive+0xae>
    while (hspi->RxXferCount > 0U)
 800498c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800498e:	b292      	uxth	r2, r2
 8004990:	2a00      	cmp	r2, #0
 8004992:	d0ba      	beq.n	800490a <HAL_SPI_Receive+0xce>
 8004994:	1c6f      	adds	r7, r5, #1
 8004996:	d00f      	beq.n	80049b8 <HAL_SPI_Receive+0x17c>
 8004998:	e027      	b.n	80049ea <HAL_SPI_Receive+0x1ae>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800499a:	7b1a      	ldrb	r2, [r3, #12]
 800499c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800499e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80049a0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80049a4:	3a01      	subs	r2, #1
 80049a6:	b292      	uxth	r2, r2
 80049a8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80049aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049ac:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 80049ae:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049b0:	63a1      	str	r1, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0a9      	beq.n	800490a <HAL_SPI_Receive+0xce>
 80049b6:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	07d0      	lsls	r0, r2, #31
 80049bc:	d4ed      	bmi.n	800499a <HAL_SPI_Receive+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049be:	f7fd fd67 	bl	8002490 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 80049c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f5      	bne.n	80049b6 <HAL_SPI_Receive+0x17a>
 80049ca:	e79e      	b.n	800490a <HAL_SPI_Receive+0xce>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049cc:	7b1a      	ldrb	r2, [r3, #12]
 80049ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049d0:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80049d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049da:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80049dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049de:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 80049e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d090      	beq.n	800490a <HAL_SPI_Receive+0xce>
 80049e8:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	07d1      	lsls	r1, r2, #31
 80049ee:	d4ed      	bmi.n	80049cc <HAL_SPI_Receive+0x190>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f0:	f7fd fd4e 	bl	8002490 <HAL_GetTick>
 80049f4:	1b80      	subs	r0, r0, r6
 80049f6:	42a8      	cmp	r0, r5
 80049f8:	d3f2      	bcc.n	80049e0 <HAL_SPI_Receive+0x1a4>
 80049fa:	e7bd      	b.n	8004978 <HAL_SPI_Receive+0x13c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fc:	68a3      	ldr	r3, [r4, #8]
 80049fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a02:	d020      	beq.n	8004a46 <HAL_SPI_Receive+0x20a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d00e      	beq.n	8004a28 <HAL_SPI_Receive+0x1ec>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0a:	4633      	mov	r3, r6
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff fbb5 	bl	8004180 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d083      	beq.n	8004922 <HAL_SPI_Receive+0xe6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a1c:	f043 0320 	orr.w	r3, r3, #32
 8004a20:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a22:	2320      	movs	r3, #32
 8004a24:	6563      	str	r3, [r4, #84]	; 0x54
 8004a26:	e77c      	b.n	8004922 <HAL_SPI_Receive+0xe6>
    __HAL_SPI_DISABLE(hspi);
 8004a28:	6820      	ldr	r0, [r4, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2a:	4633      	mov	r3, r6
    __HAL_SPI_DISABLE(hspi);
 8004a2c:	6801      	ldr	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2e:	462a      	mov	r2, r5
    __HAL_SPI_DISABLE(hspi);
 8004a30:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004a34:	6001      	str	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a36:	2101      	movs	r1, #1
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7ff fba1 	bl	8004180 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f43f af6f 	beq.w	8004922 <HAL_SPI_Receive+0xe6>
 8004a44:	e7e9      	b.n	8004a1a <HAL_SPI_Receive+0x1de>
    __HAL_SPI_DISABLE(hspi);
 8004a46:	6822      	ldr	r2, [r4, #0]
 8004a48:	6813      	ldr	r3, [r2, #0]
 8004a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4e:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a50:	e7db      	b.n	8004a0a <HAL_SPI_Receive+0x1ce>
 8004a52:	bf00      	nop

08004a54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a54:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a56:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop

08004a68 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a68:	f244 02ff 	movw	r2, #16639	; 0x40ff
{
 8004a6c:	4603      	mov	r3, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a6e:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004a72:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a74:	400a      	ands	r2, r1
 8004a76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8004a7a:	4770      	bx	lr

08004a7c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	b430      	push	{r4, r5}
 8004a80:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a82:	2501      	movs	r5, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a84:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a86:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
{
 8004a8a:	ad03      	add	r5, sp, #12
  USBx->CNTR = 0U;
 8004a8c:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
{
 8004a90:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a94:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a98:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8004a9c:	bc30      	pop	{r4, r5}
 8004a9e:	b004      	add	sp, #16
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop

08004aa4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004aa8:	780d      	ldrb	r5, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004aaa:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004aac:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8004ab0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004ab4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ab8:	0412      	lsls	r2, r2, #16
 8004aba:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8004abc:	2803      	cmp	r0, #3
 8004abe:	f200 816c 	bhi.w	8004d9a <USB_ActivateEndpoint+0x2f6>
 8004ac2:	e8df f000 	tbb	[pc, r0]
 8004ac6:	5054      	.short	0x5054
 8004ac8:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004aca:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004ace:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ad0:	f248 0480 	movw	r4, #32896	; 0x8080
 8004ad4:	4322      	orrs	r2, r4
 8004ad6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ada:	780e      	ldrb	r6, [r1, #0]
 8004adc:	4db0      	ldr	r5, [pc, #704]	; (8004da0 <USB_ActivateEndpoint+0x2fc>)
 8004ade:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	402a      	ands	r2, r5
 8004ae6:	4332      	orrs	r2, r6
 8004ae8:	4322      	orrs	r2, r4
 8004aea:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8004aee:	7b0a      	ldrb	r2, [r1, #12]
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	f040 8089 	bne.w	8004c08 <USB_ActivateEndpoint+0x164>
  {
    if (ep->is_in != 0U)
 8004af6:	784a      	ldrb	r2, [r1, #1]
 8004af8:	2a00      	cmp	r2, #0
 8004afa:	d03b      	beq.n	8004b74 <USB_ActivateEndpoint+0xd0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004afc:	780a      	ldrb	r2, [r1, #0]
 8004afe:	88cc      	ldrh	r4, [r1, #6]
 8004b00:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8004b04:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004b08:	0864      	lsrs	r4, r4, #1
 8004b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b0e:	0064      	lsls	r4, r4, #1
 8004b10:	b2b6      	uxth	r6, r6
 8004b12:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b14:	780c      	ldrb	r4, [r1, #0]
 8004b16:	f833 6024 	ldrh.w	r6, [r3, r4, lsl #2]
 8004b1a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8004b1e:	0676      	lsls	r6, r6, #25
 8004b20:	d50c      	bpl.n	8004b3c <USB_ActivateEndpoint+0x98>
 8004b22:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004b26:	b292      	uxth	r2, r2
 8004b28:	4015      	ands	r5, r2
 8004b2a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004b2e:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 8004b32:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
 8004b36:	780a      	ldrb	r2, [r1, #0]
 8004b38:	eb03 0282 	add.w	r2, r3, r2, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8004b3c:	78cb      	ldrb	r3, [r1, #3]
 8004b3e:	2b01      	cmp	r3, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b40:	8813      	ldrh	r3, [r2, #0]
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8004b4e:	ea4f 4313 	mov.w	r3, r3, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8004b52:	d052      	beq.n	8004bfa <USB_ActivateEndpoint+0x156>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8004b54:	bc70      	pop	{r4, r5, r6}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b56:	f083 0320 	eor.w	r3, r3, #32
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b62:	8013      	strh	r3, [r2, #0]
}
 8004b64:	4770      	bx	lr
  HAL_StatusTypeDef ret = HAL_OK;
 8004b66:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8004b6c:	e7b0      	b.n	8004ad0 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_CONTROL;
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8004b72:	e7ad      	b.n	8004ad0 <USB_ActivateEndpoint+0x2c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b74:	780a      	ldrb	r2, [r1, #0]
 8004b76:	88cc      	ldrh	r4, [r1, #6]
 8004b78:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8004b7c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004b80:	0864      	lsrs	r4, r4, #1
 8004b82:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004b86:	0064      	lsls	r4, r4, #1
 8004b88:	b2ad      	uxth	r5, r5
 8004b8a:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b8c:	780a      	ldrb	r2, [r1, #0]
 8004b8e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004b92:	690d      	ldr	r5, [r1, #16]
 8004b94:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004b98:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8004b9c:	b2a4      	uxth	r4, r4
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	f000 80e2 	beq.w	8004d68 <USB_ActivateEndpoint+0x2c4>
 8004ba4:	2d3e      	cmp	r5, #62	; 0x3e
 8004ba6:	f200 80ed 	bhi.w	8004d84 <USB_ActivateEndpoint+0x2e0>
 8004baa:	086e      	lsrs	r6, r5, #1
 8004bac:	07ed      	lsls	r5, r5, #31
 8004bae:	bf48      	it	mi
 8004bb0:	3601      	addmi	r6, #1
 8004bb2:	02b6      	lsls	r6, r6, #10
 8004bb4:	b2b6      	uxth	r6, r6
 8004bb6:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bb8:	780c      	ldrb	r4, [r1, #0]
 8004bba:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8004bbe:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8004bc2:	046d      	lsls	r5, r5, #17
 8004bc4:	d510      	bpl.n	8004be8 <USB_ActivateEndpoint+0x144>
 8004bc6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004bca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004bce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bd2:	0412      	lsls	r2, r2, #16
 8004bd4:	0c12      	lsrs	r2, r2, #16
 8004bd6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004bda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bde:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8004be2:	780a      	ldrb	r2, [r1, #0]
 8004be4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004be8:	8813      	ldrh	r3, [r2, #0]
 8004bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	8013      	strh	r3, [r2, #0]
}
 8004c04:	bc70      	pop	{r4, r5, r6}
 8004c06:	4770      	bx	lr
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c08:	780c      	ldrb	r4, [r1, #0]
 8004c0a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	402a      	ands	r2, r5
 8004c12:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8004c16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c1a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c1e:	780a      	ldrb	r2, [r1, #0]
 8004c20:	890c      	ldrh	r4, [r1, #8]
 8004c22:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8004c26:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004c2a:	0864      	lsrs	r4, r4, #1
 8004c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c30:	0064      	lsls	r4, r4, #1
 8004c32:	b2b6      	uxth	r6, r6
 8004c34:	5394      	strh	r4, [r2, r6]
 8004c36:	780a      	ldrb	r2, [r1, #0]
 8004c38:	894c      	ldrh	r4, [r1, #10]
 8004c3a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8004c3e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004c42:	0864      	lsrs	r4, r4, #1
 8004c44:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8004c48:	b2b6      	uxth	r6, r6
 8004c4a:	0064      	lsls	r4, r4, #1
 8004c4c:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8004c4e:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c50:	780e      	ldrb	r6, [r1, #0]
    if (ep->is_in == 0U)
 8004c52:	2a00      	cmp	r2, #0
 8004c54:	d13f      	bne.n	8004cd6 <USB_ActivateEndpoint+0x232>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c56:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004c5a:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004c5e:	0452      	lsls	r2, r2, #17
 8004c60:	d50c      	bpl.n	8004c7c <USB_ActivateEndpoint+0x1d8>
 8004c62:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004c66:	b292      	uxth	r2, r2
 8004c68:	4015      	ands	r5, r2
 8004c6a:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8004c6e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004c72:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 8004c76:	780c      	ldrb	r4, [r1, #0]
 8004c78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c7c:	8822      	ldrh	r2, [r4, #0]
 8004c7e:	0655      	lsls	r5, r2, #25
 8004c80:	d50e      	bpl.n	8004ca0 <USB_ActivateEndpoint+0x1fc>
 8004c82:	8822      	ldrh	r2, [r4, #0]
 8004c84:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004c88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c8c:	0412      	lsls	r2, r2, #16
 8004c8e:	0c12      	lsrs	r2, r2, #16
 8004c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c94:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004c98:	8022      	strh	r2, [r4, #0]
 8004c9a:	780c      	ldrb	r4, [r1, #0]
 8004c9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ca0:	f248 0580 	movw	r5, #32896	; 0x8080
 8004ca4:	8822      	ldrh	r2, [r4, #0]
 8004ca6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004caa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cae:	0412      	lsls	r2, r2, #16
 8004cb0:	0c12      	lsrs	r2, r2, #16
 8004cb2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004cb6:	432a      	orrs	r2, r5
 8004cb8:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cba:	7809      	ldrb	r1, [r1, #0]
 8004cbc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004cc0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc8:	0412      	lsls	r2, r2, #16
 8004cca:	0c12      	lsrs	r2, r2, #16
 8004ccc:	432a      	orrs	r2, r5
 8004cce:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8004cd2:	bc70      	pop	{r4, r5, r6}
 8004cd4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd6:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004cda:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004cde:	0452      	lsls	r2, r2, #17
 8004ce0:	d50c      	bpl.n	8004cfc <USB_ActivateEndpoint+0x258>
 8004ce2:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	4015      	ands	r5, r2
 8004cea:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 8004cee:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004cf2:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
 8004cf6:	780c      	ldrb	r4, [r1, #0]
 8004cf8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfc:	8822      	ldrh	r2, [r4, #0]
 8004cfe:	0652      	lsls	r2, r2, #25
 8004d00:	d50e      	bpl.n	8004d20 <USB_ActivateEndpoint+0x27c>
 8004d02:	8822      	ldrh	r2, [r4, #0]
 8004d04:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d0c:	0412      	lsls	r2, r2, #16
 8004d0e:	0c12      	lsrs	r2, r2, #16
 8004d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d14:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004d18:	8022      	strh	r2, [r4, #0]
 8004d1a:	780c      	ldrb	r4, [r1, #0]
 8004d1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      if (ep->type != EP_TYPE_ISOC)
 8004d20:	78ca      	ldrb	r2, [r1, #3]
 8004d22:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d24:	8822      	ldrh	r2, [r4, #0]
 8004d26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8004d32:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8004d36:	bf18      	it	ne
 8004d38:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d44:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d46:	7809      	ldrb	r1, [r1, #0]
}
 8004d48:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d4a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8004d4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d56:	0412      	lsls	r2, r2, #16
 8004d58:	0c12      	lsrs	r2, r2, #16
 8004d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d62:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8004d66:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d68:	5b15      	ldrh	r5, [r2, r4]
 8004d6a:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8004d6e:	042d      	lsls	r5, r5, #16
 8004d70:	0c2d      	lsrs	r5, r5, #16
 8004d72:	5315      	strh	r5, [r2, r4]
 8004d74:	5b15      	ldrh	r5, [r2, r4]
 8004d76:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8004d7a:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8004d7e:	b2ad      	uxth	r5, r5
 8004d80:	5315      	strh	r5, [r2, r4]
 8004d82:	e719      	b.n	8004bb8 <USB_ActivateEndpoint+0x114>
 8004d84:	096e      	lsrs	r6, r5, #5
 8004d86:	06ed      	lsls	r5, r5, #27
 8004d88:	4d06      	ldr	r5, [pc, #24]	; (8004da4 <USB_ActivateEndpoint+0x300>)
 8004d8a:	bf08      	it	eq
 8004d8c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004d90:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8004d94:	b2ad      	uxth	r5, r5
 8004d96:	5315      	strh	r5, [r2, r4]
 8004d98:	e70e      	b.n	8004bb8 <USB_ActivateEndpoint+0x114>
      ret = HAL_ERROR;
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	e698      	b.n	8004ad0 <USB_ActivateEndpoint+0x2c>
 8004d9e:	bf00      	nop
 8004da0:	ffff8f8f 	.word	0xffff8f8f
 8004da4:	ffff8000 	.word	0xffff8000

08004da8 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004da8:	7b0b      	ldrb	r3, [r1, #12]
{
 8004daa:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 8004dac:	b9d3      	cbnz	r3, 8004de4 <USB_DeactivateEndpoint+0x3c>
  {
    if (ep->is_in != 0U)
 8004dae:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db0:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in != 0U)
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80be 	beq.w	8004f34 <USB_DeactivateEndpoint+0x18c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004db8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004dbc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8004dc0:	065b      	lsls	r3, r3, #25
 8004dc2:	f100 80d4 	bmi.w	8004f6e <USB_DeactivateEndpoint+0x1c6>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc6:	8813      	ldrh	r3, [r2, #0]
 8004dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004ddc:	2000      	movs	r0, #0
 8004dde:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004de0:	8013      	strh	r3, [r2, #0]
}
 8004de2:	4770      	bx	lr
    if (ep->is_in == 0U)
 8004de4:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de6:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in == 0U)
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d151      	bne.n	8004e90 <USB_DeactivateEndpoint+0xe8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dec:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004df0:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8004df4:	045b      	lsls	r3, r3, #17
 8004df6:	d510      	bpl.n	8004e1a <USB_DeactivateEndpoint+0x72>
 8004df8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e10:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004e14:	780a      	ldrb	r2, [r1, #0]
 8004e16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e1a:	8813      	ldrh	r3, [r2, #0]
 8004e1c:	065c      	lsls	r4, r3, #25
 8004e1e:	d50e      	bpl.n	8004e3e <USB_DeactivateEndpoint+0x96>
 8004e20:	8813      	ldrh	r3, [r2, #0]
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e36:	8013      	strh	r3, [r2, #0]
 8004e38:	780a      	ldrb	r2, [r1, #0]
 8004e3a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e3e:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004e42:	8813      	ldrh	r3, [r2, #0]
 8004e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	0c1b      	lsrs	r3, r3, #16
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e5a:	780a      	ldrb	r2, [r1, #0]
 8004e5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	0c1b      	lsrs	r3, r3, #16
 8004e6c:	4323      	orrs	r3, r4
 8004e6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e72:	780a      	ldrb	r2, [r1, #0]
 8004e74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e80:	041b      	lsls	r3, r3, #16
 8004e82:	0c1b      	lsrs	r3, r3, #16
 8004e84:	4323      	orrs	r3, r4
 8004e86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8004e8a:	bc10      	pop	{r4}
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e90:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004e94:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8004e98:	045b      	lsls	r3, r3, #17
 8004e9a:	d510      	bpl.n	8004ebe <USB_DeactivateEndpoint+0x116>
 8004e9c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	0c1b      	lsrs	r3, r3, #16
 8004eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004eb8:	780a      	ldrb	r2, [r1, #0]
 8004eba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ebe:	8813      	ldrh	r3, [r2, #0]
 8004ec0:	065b      	lsls	r3, r3, #25
 8004ec2:	d50e      	bpl.n	8004ee2 <USB_DeactivateEndpoint+0x13a>
 8004ec4:	8813      	ldrh	r3, [r2, #0]
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eda:	8013      	strh	r3, [r2, #0]
 8004edc:	780a      	ldrb	r2, [r1, #0]
 8004ede:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ee2:	f248 0480 	movw	r4, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004ee6:	8813      	ldrh	r3, [r2, #0]
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004efe:	780a      	ldrb	r2, [r1, #0]
 8004f00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	4323      	orrs	r3, r4
 8004f12:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f16:	780a      	ldrb	r2, [r1, #0]
 8004f18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f24:	041b      	lsls	r3, r3, #16
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	4323      	orrs	r3, r4
 8004f2a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8004f2e:	bc10      	pop	{r4}
 8004f30:	2000      	movs	r0, #0
 8004f32:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f34:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004f38:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8004f3c:	045b      	lsls	r3, r3, #17
 8004f3e:	d510      	bpl.n	8004f62 <USB_DeactivateEndpoint+0x1ba>
 8004f40:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f58:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004f5c:	780a      	ldrb	r2, [r1, #0]
 8004f5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f62:	8813      	ldrh	r3, [r2, #0]
 8004f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	e730      	b.n	8004dd0 <USB_DeactivateEndpoint+0x28>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f6e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	0c1b      	lsrs	r3, r3, #16
 8004f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f86:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004f8a:	780a      	ldrb	r2, [r1, #0]
 8004f8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f90:	e719      	b.n	8004dc6 <USB_DeactivateEndpoint+0x1e>
 8004f92:	bf00      	nop

08004f94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f94:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f96:	784a      	ldrb	r2, [r1, #1]
{
 8004f98:	4603      	mov	r3, r0
  if (ep->is_in == 1U)
 8004f9a:	2a01      	cmp	r2, #1
 8004f9c:	d06d      	beq.n	800507a <USB_EPStartXfer+0xe6>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004f9e:	7b08      	ldrb	r0, [r1, #12]
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d03b      	beq.n	800501c <USB_EPStartXfer+0x88>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004fa4:	78c8      	ldrb	r0, [r1, #3]
 8004fa6:	2802      	cmp	r0, #2
 8004fa8:	f000 8124 	beq.w	80051f4 <USB_EPStartXfer+0x260>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004fac:	2801      	cmp	r0, #1
 8004fae:	f040 811f 	bne.w	80051f0 <USB_EPStartXfer+0x25c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004fb2:	6988      	ldr	r0, [r1, #24]
 8004fb4:	690c      	ldr	r4, [r1, #16]
 8004fb6:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8004fb8:	bf94      	ite	ls
 8004fba:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 8004fbc:	1b05      	subhi	r5, r0, r4
 8004fbe:	618d      	str	r5, [r1, #24]
 8004fc0:	bf88      	it	hi
 8004fc2:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004fc4:	bb32      	cbnz	r2, 8005014 <USB_EPStartXfer+0x80>
 8004fc6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004fca:	780c      	ldrb	r4, [r1, #0]
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8004fd2:	442a      	add	r2, r5
 8004fd4:	0124      	lsls	r4, r4, #4
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	f000 829d 	beq.w	8005516 <USB_EPStartXfer+0x582>
 8004fdc:	283e      	cmp	r0, #62	; 0x3e
 8004fde:	f200 838f 	bhi.w	8005700 <USB_EPStartXfer+0x76c>
 8004fe2:	0845      	lsrs	r5, r0, #1
 8004fe4:	462e      	mov	r6, r5
 8004fe6:	f010 0701 	ands.w	r7, r0, #1
 8004fea:	bf18      	it	ne
 8004fec:	1c6e      	addne	r6, r5, #1
 8004fee:	02b6      	lsls	r6, r6, #10
 8004ff0:	b2b6      	uxth	r6, r6
 8004ff2:	52a6      	strh	r6, [r4, r2]
 8004ff4:	784c      	ldrb	r4, [r1, #1]
 8004ff6:	2c00      	cmp	r4, #0
 8004ff8:	f000 8370 	beq.w	80056dc <USB_EPStartXfer+0x748>
 8004ffc:	2c01      	cmp	r4, #1
 8004ffe:	d109      	bne.n	8005014 <USB_EPStartXfer+0x80>
 8005000:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005004:	780c      	ldrb	r4, [r1, #0]
 8005006:	b292      	uxth	r2, r2
 8005008:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800500c:	b280      	uxth	r0, r0
 800500e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8005012:	5298      	strh	r0, [r3, r2]
 8005014:	780a      	ldrb	r2, [r1, #0]
 8005016:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800501a:	e01e      	b.n	800505a <USB_EPStartXfer+0xc6>
      if (ep->xfer_len > ep->maxpacket)
 800501c:	698c      	ldr	r4, [r1, #24]
 800501e:	690a      	ldr	r2, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005020:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8005022:	4294      	cmp	r4, r2
        ep->xfer_len -= len;
 8005024:	bf84      	itt	hi
 8005026:	1aa0      	subhi	r0, r4, r2
 8005028:	4614      	movhi	r4, r2
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800502a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800502e:	6188      	str	r0, [r1, #24]
 8005030:	b292      	uxth	r2, r2
 8005032:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 8005036:	4402      	add	r2, r0
 8005038:	0128      	lsls	r0, r5, #4
 800503a:	2c00      	cmp	r4, #0
 800503c:	f000 80c7 	beq.w	80051ce <USB_EPStartXfer+0x23a>
 8005040:	2c3e      	cmp	r4, #62	; 0x3e
 8005042:	f200 811f 	bhi.w	8005284 <USB_EPStartXfer+0x2f0>
 8005046:	0865      	lsrs	r5, r4, #1
 8005048:	07e4      	lsls	r4, r4, #31
 800504a:	bf48      	it	mi
 800504c:	3501      	addmi	r5, #1
 800504e:	02ad      	lsls	r5, r5, #10
 8005050:	b2ad      	uxth	r5, r5
 8005052:	5285      	strh	r5, [r0, r2]
 8005054:	780a      	ldrb	r2, [r1, #0]
 8005056:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800505a:	8813      	ldrh	r3, [r2, #0]
  }

  return HAL_OK;
 800505c:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800505e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	0c1b      	lsrs	r3, r3, #16
 800506a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800506e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005076:	8013      	strh	r3, [r2, #0]
}
 8005078:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 800507a:	690e      	ldr	r6, [r1, #16]
 800507c:	698a      	ldr	r2, [r1, #24]
    if (ep->doublebuffer == 0U)
 800507e:	7b08      	ldrb	r0, [r1, #12]
 8005080:	42b2      	cmp	r2, r6
 8005082:	bf28      	it	cs
 8005084:	4632      	movcs	r2, r6
 8005086:	2800      	cmp	r0, #0
 8005088:	d071      	beq.n	800516e <USB_EPStartXfer+0x1da>
      if (ep->type == EP_TYPE_BULK)
 800508a:	78c8      	ldrb	r0, [r1, #3]
 800508c:	2802      	cmp	r0, #2
 800508e:	f000 8107 	beq.w	80052a0 <USB_EPStartXfer+0x30c>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005092:	780d      	ldrb	r5, [r1, #0]
        ep->xfer_len_db -= len;
 8005094:	6a08      	ldr	r0, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005096:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
        ep->xfer_len_db -= len;
 800509a:	1a80      	subs	r0, r0, r2
        PCD_SET_EP_DBUF(USBx, ep->num);
 800509c:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80050a0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80050a4:	0424      	lsls	r4, r4, #16
 80050a6:	0c24      	lsrs	r4, r4, #16
 80050a8:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80050ac:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80050b0:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050b4:	780c      	ldrb	r4, [r1, #0]
        ep->xfer_len_db -= len;
 80050b6:	6208      	str	r0, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050b8:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80050bc:	f015 0f40 	tst.w	r5, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050c0:	784d      	ldrb	r5, [r1, #1]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050c2:	f000 814d 	beq.w	8005360 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	f000 81cc 	beq.w	8005464 <USB_EPStartXfer+0x4d0>
 80050cc:	2d01      	cmp	r5, #1
 80050ce:	d108      	bne.n	80050e2 <USB_EPStartXfer+0x14e>
 80050d0:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80050d4:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 80050d8:	b2bf      	uxth	r7, r7
 80050da:	443d      	add	r5, r7
 80050dc:	0124      	lsls	r4, r4, #4
 80050de:	b297      	uxth	r7, r2
 80050e0:	532f      	strh	r7, [r5, r4]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80050e2:	b297      	uxth	r7, r2
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050e4:	894d      	ldrh	r5, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80050e6:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050e8:	f503 6480 	add.w	r4, r3, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80050ec:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ee:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  for (i = n; i != 0U; i--)
 80050f6:	d008      	beq.n	800510a <USB_EPStartXfer+0x176>
              ep->xfer_len_db = 0U;
 80050f8:	4675      	mov	r5, lr
 80050fa:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  {
    temp1 = *pBuf;
 80050fe:	f835 cb02 	ldrh.w	ip, [r5], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8005102:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8005106:	42bc      	cmp	r4, r7
 8005108:	d1f9      	bne.n	80050fe <USB_EPStartXfer+0x16a>
          if (ep->xfer_len_db > ep->maxpacket)
 800510a:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 800510c:	bf36      	itet	cc
 800510e:	1a85      	subcc	r5, r0, r2
            ep->xfer_len_db = 0U;
 8005110:	2500      	movcs	r5, #0
 8005112:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 8005114:	eb0e 0402 	add.w	r4, lr, r2
 8005118:	614c      	str	r4, [r1, #20]
            ep->xfer_len_db -= len;
 800511a:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800511c:	2800      	cmp	r0, #0
 800511e:	d043      	beq.n	80051a8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005120:	784a      	ldrb	r2, [r1, #1]
 8005122:	2a00      	cmp	r2, #0
 8005124:	f040 8297 	bne.w	8005656 <USB_EPStartXfer+0x6c2>
 8005128:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800512c:	780e      	ldrb	r6, [r1, #0]
 800512e:	b292      	uxth	r2, r2
 8005130:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8005134:	283e      	cmp	r0, #62	; 0x3e
 8005136:	442a      	add	r2, r5
 8005138:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800513c:	f200 8392 	bhi.w	8005864 <USB_EPStartXfer+0x8d0>
 8005140:	0845      	lsrs	r5, r0, #1
 8005142:	07c7      	lsls	r7, r0, #31
 8005144:	bf48      	it	mi
 8005146:	3501      	addmi	r5, #1
 8005148:	02ad      	lsls	r5, r5, #10
 800514a:	b2ad      	uxth	r5, r5
 800514c:	52b5      	strh	r5, [r6, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800514e:	890e      	ldrh	r6, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005150:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005152:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005156:	0845      	lsrs	r5, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005158:	eb02 0246 	add.w	r2, r2, r6, lsl #1
  for (i = n; i != 0U; i--)
 800515c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
    temp1 = *pBuf;
 8005160:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 8005164:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 8005166:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 800516a:	d1f9      	bne.n	8005160 <USB_EPStartXfer+0x1cc>
 800516c:	e01c      	b.n	80051a8 <USB_EPStartXfer+0x214>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800516e:	b295      	uxth	r5, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005170:	88cc      	ldrh	r4, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005172:	3501      	adds	r5, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005174:	b296      	uxth	r6, r2
 8005176:	694a      	ldr	r2, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005178:	f503 6080 	add.w	r0, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800517c:	086d      	lsrs	r5, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800517e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
  for (i = n; i != 0U; i--)
 8005182:	bf18      	it	ne
 8005184:	eb02 0545 	addne.w	r5, r2, r5, lsl #1
 8005188:	d005      	beq.n	8005196 <USB_EPStartXfer+0x202>
    temp1 = *pBuf;
 800518a:	f832 4b02 	ldrh.w	r4, [r2], #2
  for (i = n; i != 0U; i--)
 800518e:	42aa      	cmp	r2, r5
    *pdwVal = (uint16_t)temp2;
 8005190:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 8005194:	d1f9      	bne.n	800518a <USB_EPStartXfer+0x1f6>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005196:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 800519a:	780c      	ldrb	r4, [r1, #0]
 800519c:	b282      	uxth	r2, r0
 800519e:	f203 4004 	addw	r0, r3, #1028	; 0x404
 80051a2:	4410      	add	r0, r2
 80051a4:	0124      	lsls	r4, r4, #4
 80051a6:	5226      	strh	r6, [r4, r0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80051a8:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 80051aa:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80051ac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80051b0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b8:	0412      	lsls	r2, r2, #16
 80051ba:	0c12      	lsrs	r2, r2, #16
 80051bc:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 80051c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051c8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80051cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051ce:	5a84      	ldrh	r4, [r0, r2]
 80051d0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80051d4:	0424      	lsls	r4, r4, #16
 80051d6:	0c24      	lsrs	r4, r4, #16
 80051d8:	5284      	strh	r4, [r0, r2]
 80051da:	5a84      	ldrh	r4, [r0, r2]
 80051dc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80051e0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80051e4:	b2a4      	uxth	r4, r4
 80051e6:	5284      	strh	r4, [r0, r2]
 80051e8:	780a      	ldrb	r2, [r1, #0]
 80051ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80051ee:	e734      	b.n	800505a <USB_EPStartXfer+0xc6>
        return HAL_ERROR;
 80051f0:	2001      	movs	r0, #1
}
 80051f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80051f4:	bb12      	cbnz	r2, 800523c <USB_EPStartXfer+0x2a8>
 80051f6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80051fa:	7808      	ldrb	r0, [r1, #0]
 80051fc:	690c      	ldr	r4, [r1, #16]
 80051fe:	b292      	uxth	r2, r2
 8005200:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8005204:	442a      	add	r2, r5
 8005206:	0100      	lsls	r0, r0, #4
 8005208:	2c00      	cmp	r4, #0
 800520a:	f000 8146 	beq.w	800549a <USB_EPStartXfer+0x506>
 800520e:	2c3e      	cmp	r4, #62	; 0x3e
 8005210:	f200 81ac 	bhi.w	800556c <USB_EPStartXfer+0x5d8>
 8005214:	0865      	lsrs	r5, r4, #1
 8005216:	07e6      	lsls	r6, r4, #31
 8005218:	bf48      	it	mi
 800521a:	3501      	addmi	r5, #1
 800521c:	02ad      	lsls	r5, r5, #10
 800521e:	b2ad      	uxth	r5, r5
 8005220:	5285      	strh	r5, [r0, r2]
 8005222:	784a      	ldrb	r2, [r1, #1]
 8005224:	2a00      	cmp	r2, #0
 8005226:	f040 81af 	bne.w	8005588 <USB_EPStartXfer+0x5f4>
 800522a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800522e:	7808      	ldrb	r0, [r1, #0]
 8005230:	b294      	uxth	r4, r2
 8005232:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005236:	4422      	add	r2, r4
 8005238:	0100      	lsls	r0, r0, #4
 800523a:	5285      	strh	r5, [r0, r2]
        if (ep->xfer_count != 0U)
 800523c:	69ca      	ldr	r2, [r1, #28]
 800523e:	2a00      	cmp	r2, #0
 8005240:	f43f aee8 	beq.w	8005014 <USB_EPStartXfer+0x80>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005244:	f244 0440 	movw	r4, #16448	; 0x4040
 8005248:	7808      	ldrb	r0, [r1, #0]
 800524a:	f833 5020 	ldrh.w	r5, [r3, r0, lsl #2]
 800524e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8005252:	ea04 0605 	and.w	r6, r4, r5
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005256:	43ac      	bics	r4, r5
 8005258:	d002      	beq.n	8005260 <USB_EPStartXfer+0x2cc>
 800525a:	2e00      	cmp	r6, #0
 800525c:	f47f aefd 	bne.w	800505a <USB_EPStartXfer+0xc6>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005260:	f833 2020 	ldrh.w	r2, [r3, r0, lsl #2]
 8005264:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005268:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800526c:	0412      	lsls	r2, r2, #16
 800526e:	0c12      	lsrs	r2, r2, #16
 8005270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005274:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005278:	f823 2020 	strh.w	r2, [r3, r0, lsl #2]
 800527c:	780a      	ldrb	r2, [r1, #0]
 800527e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005282:	e6ea      	b.n	800505a <USB_EPStartXfer+0xc6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005284:	0965      	lsrs	r5, r4, #5
 8005286:	06e7      	lsls	r7, r4, #27
 8005288:	4cb7      	ldr	r4, [pc, #732]	; (8005568 <USB_EPStartXfer+0x5d4>)
 800528a:	bf08      	it	eq
 800528c:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8005290:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8005294:	b2a4      	uxth	r4, r4
 8005296:	5284      	strh	r4, [r0, r2]
 8005298:	780a      	ldrb	r2, [r1, #0]
 800529a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800529e:	e6dc      	b.n	800505a <USB_EPStartXfer+0xc6>
        if (ep->xfer_len_db > ep->maxpacket)
 80052a0:	6a08      	ldr	r0, [r1, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052a2:	780d      	ldrb	r5, [r1, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 80052a4:	4286      	cmp	r6, r0
 80052a6:	f080 80b0 	bcs.w	800540a <USB_EPStartXfer+0x476>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052aa:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
          ep->xfer_len_db -= len;
 80052ae:	1a80      	subs	r0, r0, r2
          PCD_SET_EP_DBUF(USBx, ep->num);
 80052b0:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80052b4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80052b8:	0424      	lsls	r4, r4, #16
 80052ba:	0c24      	lsrs	r4, r4, #16
 80052bc:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80052c0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80052c4:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052c8:	780c      	ldrb	r4, [r1, #0]
          ep->xfer_len_db -= len;
 80052ca:	6208      	str	r0, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052cc:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80052d0:	f015 0f40 	tst.w	r5, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052d4:	784d      	ldrb	r5, [r1, #1]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052d6:	f000 8165 	beq.w	80055a4 <USB_EPStartXfer+0x610>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052da:	2d00      	cmp	r5, #0
 80052dc:	f040 8253 	bne.w	8005786 <USB_EPStartXfer+0x7f2>
 80052e0:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80052e4:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 80052e8:	b2bf      	uxth	r7, r7
 80052ea:	0124      	lsls	r4, r4, #4
 80052ec:	443d      	add	r5, r7
 80052ee:	2a00      	cmp	r2, #0
 80052f0:	f040 82ff 	bne.w	80058f2 <USB_EPStartXfer+0x95e>
 80052f4:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f6:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052fa:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80052fe:	043f      	lsls	r7, r7, #16
 8005300:	0c3f      	lsrs	r7, r7, #16
 8005302:	532f      	strh	r7, [r5, r4]
 8005304:	5b2f      	ldrh	r7, [r5, r4]
 8005306:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 800530a:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 800530e:	b2bf      	uxth	r7, r7
 8005310:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 8005312:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 8005314:	bf2c      	ite	cs
 8005316:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 8005318:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 800531a:	eb0e 0402 	add.w	r4, lr, r2
 800531e:	bf38      	it	cc
 8005320:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005322:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 8005324:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 8005326:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005328:	2a00      	cmp	r2, #0
 800532a:	f040 820d 	bne.w	8005748 <USB_EPStartXfer+0x7b4>
 800532e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8005332:	780a      	ldrb	r2, [r1, #0]
 8005334:	b2ad      	uxth	r5, r5
 8005336:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800533a:	4435      	add	r5, r6
 800533c:	0112      	lsls	r2, r2, #4
 800533e:	2800      	cmp	r0, #0
 8005340:	f040 82eb 	bne.w	800591a <USB_EPStartXfer+0x986>
 8005344:	5b50      	ldrh	r0, [r2, r5]
 8005346:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800534a:	0400      	lsls	r0, r0, #16
 800534c:	0c00      	lsrs	r0, r0, #16
 800534e:	5350      	strh	r0, [r2, r5]
 8005350:	5b50      	ldrh	r0, [r2, r5]
 8005352:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005356:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800535a:	b280      	uxth	r0, r0
 800535c:	5350      	strh	r0, [r2, r5]
  for (i = n; i != 0U; i--)
 800535e:	e723      	b.n	80051a8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005360:	2d00      	cmp	r5, #0
 8005362:	f000 80be 	beq.w	80054e2 <USB_EPStartXfer+0x54e>
 8005366:	2d01      	cmp	r5, #1
 8005368:	d108      	bne.n	800537c <USB_EPStartXfer+0x3e8>
 800536a:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800536e:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8005372:	b2bf      	uxth	r7, r7
 8005374:	443d      	add	r5, r7
 8005376:	0124      	lsls	r4, r4, #4
 8005378:	b297      	uxth	r7, r2
 800537a:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800537c:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800537e:	b297      	uxth	r7, r2
 8005380:	3701      	adds	r7, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005382:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 8005386:	087f      	lsrs	r7, r7, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005388:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800538c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005390:	d008      	beq.n	80053a4 <USB_EPStartXfer+0x410>
            ep->xfer_len_db = 0U;
 8005392:	4674      	mov	r4, lr
 8005394:	eb0e 0747 	add.w	r7, lr, r7, lsl #1
    temp1 = *pBuf;
 8005398:	f834 cb02 	ldrh.w	ip, [r4], #2
  for (i = n; i != 0U; i--)
 800539c:	42bc      	cmp	r4, r7
    *pdwVal = (uint16_t)temp2;
 800539e:	f825 cb04 	strh.w	ip, [r5], #4
  for (i = n; i != 0U; i--)
 80053a2:	d1f9      	bne.n	8005398 <USB_EPStartXfer+0x404>
          if (ep->xfer_len_db > ep->maxpacket)
 80053a4:	4286      	cmp	r6, r0
            ep->xfer_len_db -= len;
 80053a6:	bf36      	itet	cc
 80053a8:	1a84      	subcc	r4, r0, r2
            ep->xfer_len_db = 0U;
 80053aa:	2400      	movcs	r4, #0
 80053ac:	4610      	movcc	r0, r2
          ep->xfer_buff += len;
 80053ae:	eb0e 0502 	add.w	r5, lr, r2
 80053b2:	614d      	str	r5, [r1, #20]
            ep->xfer_len_db -= len;
 80053b4:	620c      	str	r4, [r1, #32]
          if (len > 0U)
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f43f aef6 	beq.w	80051a8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053bc:	784a      	ldrb	r2, [r1, #1]
 80053be:	2a00      	cmp	r2, #0
 80053c0:	f040 8175 	bne.w	80056ae <USB_EPStartXfer+0x71a>
 80053c4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80053c8:	780c      	ldrb	r4, [r1, #0]
 80053ca:	b292      	uxth	r2, r2
 80053cc:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80053d0:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80053d4:	283e      	cmp	r0, #62	; 0x3e
 80053d6:	441a      	add	r2, r3
 80053d8:	f200 824f 	bhi.w	800587a <USB_EPStartXfer+0x8e6>
 80053dc:	0844      	lsrs	r4, r0, #1
 80053de:	07c6      	lsls	r6, r0, #31
 80053e0:	bf48      	it	mi
 80053e2:	3401      	addmi	r4, #1
 80053e4:	02a4      	lsls	r4, r4, #10
 80053e6:	b2a4      	uxth	r4, r4
 80053e8:	8014      	strh	r4, [r2, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053ea:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053ec:	1c42      	adds	r2, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053ee:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80053f2:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053f4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80053f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    temp1 = *pBuf;
 80053fc:	f835 4b02 	ldrh.w	r4, [r5], #2
    *pdwVal = (uint16_t)temp2;
 8005400:	f820 4b04 	strh.w	r4, [r0], #4
  for (i = n; i != 0U; i--)
 8005404:	4282      	cmp	r2, r0
 8005406:	d1f9      	bne.n	80053fc <USB_EPStartXfer+0x468>
 8005408:	e6ce      	b.n	80051a8 <USB_EPStartXfer+0x214>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800540a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800540e:	f203 4404 	addw	r4, r3, #1028	; 0x404
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005412:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005416:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800541a:	0412      	lsls	r2, r2, #16
 800541c:	0c12      	lsrs	r2, r2, #16
 800541e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005426:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800542a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800542e:	b287      	uxth	r7, r0
 8005430:	b296      	uxth	r6, r2
 8005432:	4622      	mov	r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005434:	4638      	mov	r0, r7
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005436:	780d      	ldrb	r5, [r1, #0]
 8005438:	4432      	add	r2, r6
 800543a:	012c      	lsls	r4, r5, #4
 800543c:	52a7      	strh	r7, [r4, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800543e:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005440:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005442:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005446:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005448:	eb02 0244 	add.w	r2, r2, r4, lsl #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800544c:	694c      	ldr	r4, [r1, #20]
  for (i = n; i != 0U; i--)
 800544e:	f43f aeab 	beq.w	80051a8 <USB_EPStartXfer+0x214>
 8005452:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 8005456:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800545a:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 800545e:	4290      	cmp	r0, r2
 8005460:	d1f9      	bne.n	8005456 <USB_EPStartXfer+0x4c2>
 8005462:	e6a1      	b.n	80051a8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005464:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8005468:	f203 470c 	addw	r7, r3, #1036	; 0x40c
 800546c:	fa1f fc8c 	uxth.w	ip, ip
 8005470:	0125      	lsls	r5, r4, #4
 8005472:	4467      	add	r7, ip
 8005474:	2a00      	cmp	r2, #0
 8005476:	f040 8105 	bne.w	8005684 <USB_EPStartXfer+0x6f0>
 800547a:	5b7c      	ldrh	r4, [r7, r5]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800547c:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005480:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8005484:	0424      	lsls	r4, r4, #16
 8005486:	0c24      	lsrs	r4, r4, #16
 8005488:	537c      	strh	r4, [r7, r5]
 800548a:	5b7c      	ldrh	r4, [r7, r5]
 800548c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8005490:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8005494:	b2a4      	uxth	r4, r4
 8005496:	537c      	strh	r4, [r7, r5]
  for (i = n; i != 0U; i--)
 8005498:	e637      	b.n	800510a <USB_EPStartXfer+0x176>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800549a:	5a85      	ldrh	r5, [r0, r2]
 800549c:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80054a0:	042d      	lsls	r5, r5, #16
 80054a2:	0c2d      	lsrs	r5, r5, #16
 80054a4:	5285      	strh	r5, [r0, r2]
 80054a6:	5a85      	ldrh	r5, [r0, r2]
 80054a8:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80054ac:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80054b0:	b2ad      	uxth	r5, r5
 80054b2:	5285      	strh	r5, [r0, r2]
 80054b4:	784a      	ldrb	r2, [r1, #1]
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	d166      	bne.n	8005588 <USB_EPStartXfer+0x5f4>
 80054ba:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80054be:	7808      	ldrb	r0, [r1, #0]
 80054c0:	b2a2      	uxth	r2, r4
 80054c2:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 80054c6:	4414      	add	r4, r2
 80054c8:	0100      	lsls	r0, r0, #4
 80054ca:	5a22      	ldrh	r2, [r4, r0]
 80054cc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80054d0:	0412      	lsls	r2, r2, #16
 80054d2:	0c12      	lsrs	r2, r2, #16
 80054d4:	5222      	strh	r2, [r4, r0]
 80054d6:	5a22      	ldrh	r2, [r4, r0]
 80054d8:	b292      	uxth	r2, r2
 80054da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054de:	5222      	strh	r2, [r4, r0]
 80054e0:	e6ac      	b.n	800523c <USB_EPStartXfer+0x2a8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054e2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80054e6:	f203 4704 	addw	r7, r3, #1028	; 0x404
 80054ea:	b2ad      	uxth	r5, r5
 80054ec:	0124      	lsls	r4, r4, #4
 80054ee:	442f      	add	r7, r5
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	f040 809b 	bne.w	800562c <USB_EPStartXfer+0x698>
 80054f6:	5b3d      	ldrh	r5, [r7, r4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f8:	f8d1 e014 	ldr.w	lr, [r1, #20]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054fc:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8005500:	042d      	lsls	r5, r5, #16
 8005502:	0c2d      	lsrs	r5, r5, #16
 8005504:	533d      	strh	r5, [r7, r4]
 8005506:	5b3d      	ldrh	r5, [r7, r4]
 8005508:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800550c:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8005510:	b2ad      	uxth	r5, r5
 8005512:	533d      	strh	r5, [r7, r4]
  for (i = n; i != 0U; i--)
 8005514:	e746      	b.n	80053a4 <USB_EPStartXfer+0x410>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005516:	5aa5      	ldrh	r5, [r4, r2]
 8005518:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800551c:	042d      	lsls	r5, r5, #16
 800551e:	0c2d      	lsrs	r5, r5, #16
 8005520:	52a5      	strh	r5, [r4, r2]
 8005522:	5aa5      	ldrh	r5, [r4, r2]
 8005524:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8005528:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800552c:	b2ad      	uxth	r5, r5
 800552e:	52a5      	strh	r5, [r4, r2]
 8005530:	784c      	ldrb	r4, [r1, #1]
 8005532:	2c00      	cmp	r4, #0
 8005534:	f47f ad62 	bne.w	8004ffc <USB_EPStartXfer+0x68>
 8005538:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800553c:	7808      	ldrb	r0, [r1, #0]
 800553e:	b2a2      	uxth	r2, r4
 8005540:	f203 440c 	addw	r4, r3, #1036	; 0x40c
 8005544:	4414      	add	r4, r2
 8005546:	0100      	lsls	r0, r0, #4
 8005548:	5a22      	ldrh	r2, [r4, r0]
 800554a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800554e:	0412      	lsls	r2, r2, #16
 8005550:	0c12      	lsrs	r2, r2, #16
 8005552:	5222      	strh	r2, [r4, r0]
 8005554:	5a22      	ldrh	r2, [r4, r0]
 8005556:	b292      	uxth	r2, r2
 8005558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800555c:	5222      	strh	r2, [r4, r0]
 800555e:	780a      	ldrb	r2, [r1, #0]
 8005560:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005564:	e579      	b.n	800505a <USB_EPStartXfer+0xc6>
 8005566:	bf00      	nop
 8005568:	ffff8000 	.word	0xffff8000
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800556c:	0966      	lsrs	r6, r4, #5
 800556e:	06e5      	lsls	r5, r4, #27
 8005570:	4dbb      	ldr	r5, [pc, #748]	; (8005860 <USB_EPStartXfer+0x8cc>)
 8005572:	bf08      	it	eq
 8005574:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005578:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 800557c:	b2ad      	uxth	r5, r5
 800557e:	5285      	strh	r5, [r0, r2]
 8005580:	784a      	ldrb	r2, [r1, #1]
 8005582:	2a00      	cmp	r2, #0
 8005584:	f43f ae51 	beq.w	800522a <USB_EPStartXfer+0x296>
 8005588:	2a01      	cmp	r2, #1
 800558a:	f47f ae57 	bne.w	800523c <USB_EPStartXfer+0x2a8>
 800558e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005592:	7808      	ldrb	r0, [r1, #0]
 8005594:	b295      	uxth	r5, r2
 8005596:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800559a:	b2a4      	uxth	r4, r4
 800559c:	442a      	add	r2, r5
 800559e:	0100      	lsls	r0, r0, #4
 80055a0:	5284      	strh	r4, [r0, r2]
 80055a2:	e64b      	b.n	800523c <USB_EPStartXfer+0x2a8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	f040 812e 	bne.w	8005806 <USB_EPStartXfer+0x872>
 80055aa:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 80055ae:	f203 4504 	addw	r5, r3, #1028	; 0x404
 80055b2:	b2bf      	uxth	r7, r7
 80055b4:	0124      	lsls	r4, r4, #4
 80055b6:	443d      	add	r5, r7
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	f040 8186 	bne.w	80058ca <USB_EPStartXfer+0x936>
 80055be:	5b2f      	ldrh	r7, [r5, r4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055c0:	f8d1 e014 	ldr.w	lr, [r1, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055c4:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80055c8:	043f      	lsls	r7, r7, #16
 80055ca:	0c3f      	lsrs	r7, r7, #16
 80055cc:	532f      	strh	r7, [r5, r4]
 80055ce:	5b2f      	ldrh	r7, [r5, r4]
 80055d0:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80055d4:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80055d8:	b2bf      	uxth	r7, r7
 80055da:	532f      	strh	r7, [r5, r4]
            if (ep->xfer_len_db > ep->maxpacket)
 80055dc:	4286      	cmp	r6, r0
              ep->xfer_len_db = 0U;
 80055de:	bf2c      	ite	cs
 80055e0:	2500      	movcs	r5, #0
              ep->xfer_len_db -= len;
 80055e2:	1a85      	subcc	r5, r0, r2
            ep->xfer_buff += len;
 80055e4:	eb0e 0402 	add.w	r4, lr, r2
 80055e8:	bf38      	it	cc
 80055ea:	4610      	movcc	r0, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055ec:	784a      	ldrb	r2, [r1, #1]
            ep->xfer_buff += len;
 80055ee:	614c      	str	r4, [r1, #20]
              ep->xfer_len_db -= len;
 80055f0:	620d      	str	r5, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055f2:	2a00      	cmp	r2, #0
 80055f4:	f040 80e8 	bne.w	80057c8 <USB_EPStartXfer+0x834>
 80055f8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80055fc:	780d      	ldrb	r5, [r1, #0]
 80055fe:	b292      	uxth	r2, r2
 8005600:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8005604:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8005608:	189d      	adds	r5, r3, r2
 800560a:	2800      	cmp	r0, #0
 800560c:	f040 814c 	bne.w	80058a8 <USB_EPStartXfer+0x914>
 8005610:	5a98      	ldrh	r0, [r3, r2]
 8005612:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8005616:	0400      	lsls	r0, r0, #16
 8005618:	0c00      	lsrs	r0, r0, #16
 800561a:	5298      	strh	r0, [r3, r2]
 800561c:	5a98      	ldrh	r0, [r3, r2]
 800561e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8005622:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8005626:	b280      	uxth	r0, r0
 8005628:	5298      	strh	r0, [r3, r2]
  for (i = n; i != 0U; i--)
 800562a:	e5bd      	b.n	80051a8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800562c:	2a3e      	cmp	r2, #62	; 0x3e
 800562e:	f200 810b 	bhi.w	8005848 <USB_EPStartXfer+0x8b4>
 8005632:	0855      	lsrs	r5, r2, #1
 8005634:	f012 0f01 	tst.w	r2, #1
 8005638:	bf18      	it	ne
 800563a:	3501      	addne	r5, #1
 800563c:	02ad      	lsls	r5, r5, #10
 800563e:	b2ad      	uxth	r5, r5
 8005640:	533d      	strh	r5, [r7, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005642:	890c      	ldrh	r4, [r1, #8]
 8005644:	f503 6580 	add.w	r5, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005648:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800564a:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800564e:	eb05 0544 	add.w	r5, r5, r4, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005652:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8005654:	e69d      	b.n	8005392 <USB_EPStartXfer+0x3fe>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005656:	2a01      	cmp	r2, #1
 8005658:	d109      	bne.n	800566e <USB_EPStartXfer+0x6da>
 800565a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800565e:	780d      	ldrb	r5, [r1, #0]
 8005660:	b296      	uxth	r6, r2
 8005662:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005666:	4432      	add	r2, r6
 8005668:	012d      	lsls	r5, r5, #4
 800566a:	b286      	uxth	r6, r0
 800566c:	52ae      	strh	r6, [r5, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800566e:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005670:	b280      	uxth	r0, r0
 8005672:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005674:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8005678:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 800567c:	0845      	lsrs	r5, r0, #1
 800567e:	f47f ad6d 	bne.w	800515c <USB_EPStartXfer+0x1c8>
 8005682:	e591      	b.n	80051a8 <USB_EPStartXfer+0x214>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005684:	2a3e      	cmp	r2, #62	; 0x3e
 8005686:	f200 8103 	bhi.w	8005890 <USB_EPStartXfer+0x8fc>
 800568a:	0854      	lsrs	r4, r2, #1
 800568c:	f012 0f01 	tst.w	r2, #1
 8005690:	bf18      	it	ne
 8005692:	3401      	addne	r4, #1
 8005694:	02a4      	lsls	r4, r4, #10
 8005696:	b2a4      	uxth	r4, r4
 8005698:	537c      	strh	r4, [r7, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800569a:	894d      	ldrh	r5, [r1, #10]
 800569c:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056a0:	1c57      	adds	r7, r2, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a2:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056a6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056aa:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 80056ac:	e524      	b.n	80050f8 <USB_EPStartXfer+0x164>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056ae:	2a01      	cmp	r2, #1
 80056b0:	d109      	bne.n	80056c6 <USB_EPStartXfer+0x732>
 80056b2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80056b6:	780c      	ldrb	r4, [r1, #0]
 80056b8:	b292      	uxth	r2, r2
 80056ba:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80056be:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80056c2:	b284      	uxth	r4, r0
 80056c4:	529c      	strh	r4, [r3, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056c6:	b282      	uxth	r2, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056c8:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056ca:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056cc:	eb03 0044 	add.w	r0, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 80056d0:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056d2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80056d6:	f47f ae8f 	bne.w	80053f8 <USB_EPStartXfer+0x464>
 80056da:	e565      	b.n	80051a8 <USB_EPStartXfer+0x214>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80056dc:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 80056e0:	780c      	ldrb	r4, [r1, #0]
 80056e2:	b286      	uxth	r6, r0
 80056e4:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80056e8:	462a      	mov	r2, r5
 80056ea:	4430      	add	r0, r6
 80056ec:	0124      	lsls	r4, r4, #4
 80056ee:	b107      	cbz	r7, 80056f2 <USB_EPStartXfer+0x75e>
 80056f0:	3201      	adds	r2, #1
 80056f2:	0292      	lsls	r2, r2, #10
 80056f4:	b292      	uxth	r2, r2
 80056f6:	5222      	strh	r2, [r4, r0]
 80056f8:	780a      	ldrb	r2, [r1, #0]
 80056fa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80056fe:	e4ac      	b.n	800505a <USB_EPStartXfer+0xc6>
 8005700:	0947      	lsrs	r7, r0, #5
 8005702:	46bc      	mov	ip, r7
 8005704:	4d56      	ldr	r5, [pc, #344]	; (8005860 <USB_EPStartXfer+0x8cc>)
 8005706:	f010 061f 	ands.w	r6, r0, #31
 800570a:	bf08      	it	eq
 800570c:	f107 3cff 	addeq.w	ip, r7, #4294967295
 8005710:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 8005714:	b2ad      	uxth	r5, r5
 8005716:	52a5      	strh	r5, [r4, r2]
 8005718:	784c      	ldrb	r4, [r1, #1]
 800571a:	2c00      	cmp	r4, #0
 800571c:	f47f ac6e 	bne.w	8004ffc <USB_EPStartXfer+0x68>
 8005720:	f8b3 0050 	ldrh.w	r0, [r3, #80]	; 0x50
 8005724:	780d      	ldrb	r5, [r1, #0]
 8005726:	b284      	uxth	r4, r0
 8005728:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 800572c:	463a      	mov	r2, r7
 800572e:	4420      	add	r0, r4
 8005730:	012d      	lsls	r5, r5, #4
 8005732:	b906      	cbnz	r6, 8005736 <USB_EPStartXfer+0x7a2>
 8005734:	3a01      	subs	r2, #1
 8005736:	4c4a      	ldr	r4, [pc, #296]	; (8005860 <USB_EPStartXfer+0x8cc>)
 8005738:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
 800573c:	b292      	uxth	r2, r2
 800573e:	522a      	strh	r2, [r5, r0]
 8005740:	780a      	ldrb	r2, [r1, #0]
 8005742:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005746:	e488      	b.n	800505a <USB_EPStartXfer+0xc6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005748:	2a01      	cmp	r2, #1
 800574a:	d109      	bne.n	8005760 <USB_EPStartXfer+0x7cc>
 800574c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005750:	780d      	ldrb	r5, [r1, #0]
 8005752:	b296      	uxth	r6, r2
 8005754:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005758:	4432      	add	r2, r6
 800575a:	012d      	lsls	r5, r5, #4
 800575c:	b286      	uxth	r6, r0
 800575e:	52ae      	strh	r6, [r5, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005760:	b280      	uxth	r0, r0
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005762:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005764:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005766:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800576a:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800576c:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 8005770:	f43f ad1a 	beq.w	80051a8 <USB_EPStartXfer+0x214>
 8005774:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    temp1 = *pBuf;
 8005778:	f834 0b02 	ldrh.w	r0, [r4], #2
  for (i = n; i != 0U; i--)
 800577c:	42a5      	cmp	r5, r4
    *pdwVal = (uint16_t)temp2;
 800577e:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8005782:	d1f9      	bne.n	8005778 <USB_EPStartXfer+0x7e4>
 8005784:	e510      	b.n	80051a8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005786:	2d01      	cmp	r5, #1
 8005788:	d108      	bne.n	800579c <USB_EPStartXfer+0x808>
 800578a:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800578e:	f203 450c 	addw	r5, r3, #1036	; 0x40c
 8005792:	b2bf      	uxth	r7, r7
 8005794:	443d      	add	r5, r7
 8005796:	0124      	lsls	r4, r4, #4
 8005798:	b297      	uxth	r7, r2
 800579a:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800579c:	894f      	ldrh	r7, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800579e:	b295      	uxth	r5, r2
 80057a0:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057a2:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 80057a6:	eb04 0447 	add.w	r4, r4, r7, lsl #1
  for (i = n; i != 0U; i--)
 80057aa:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ac:	f8d1 e014 	ldr.w	lr, [r1, #20]
  for (i = n; i != 0U; i--)
 80057b0:	f43f adaf 	beq.w	8005312 <USB_EPStartXfer+0x37e>
{
 80057b4:	4675      	mov	r5, lr
 80057b6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 80057ba:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 80057be:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 80057c2:	42bc      	cmp	r4, r7
 80057c4:	d1f9      	bne.n	80057ba <USB_EPStartXfer+0x826>
 80057c6:	e5a4      	b.n	8005312 <USB_EPStartXfer+0x37e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057c8:	2a01      	cmp	r2, #1
 80057ca:	d109      	bne.n	80057e0 <USB_EPStartXfer+0x84c>
 80057cc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80057d0:	780d      	ldrb	r5, [r1, #0]
 80057d2:	b292      	uxth	r2, r2
 80057d4:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80057d8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80057dc:	b285      	uxth	r5, r0
 80057de:	529d      	strh	r5, [r3, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057e0:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80057e2:	b280      	uxth	r0, r0
 80057e4:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057e6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  for (i = n; i != 0U; i--)
 80057ea:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80057f0:	f43f acda 	beq.w	80051a8 <USB_EPStartXfer+0x214>
 80057f4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    temp1 = *pBuf;
 80057f8:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 80057fc:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 8005800:	4290      	cmp	r0, r2
 8005802:	d1f9      	bne.n	80057f8 <USB_EPStartXfer+0x864>
 8005804:	e4d0      	b.n	80051a8 <USB_EPStartXfer+0x214>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005806:	2d01      	cmp	r5, #1
 8005808:	d108      	bne.n	800581c <USB_EPStartXfer+0x888>
 800580a:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800580e:	f203 4504 	addw	r5, r3, #1028	; 0x404
 8005812:	b2bf      	uxth	r7, r7
 8005814:	443d      	add	r5, r7
 8005816:	0124      	lsls	r4, r4, #4
 8005818:	b297      	uxth	r7, r2
 800581a:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800581c:	890c      	ldrh	r4, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800581e:	b295      	uxth	r5, r2
 8005820:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005822:	eb03 0444 	add.w	r4, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 8005826:	086f      	lsrs	r7, r5, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005828:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800582c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005830:	f43f aed4 	beq.w	80055dc <USB_EPStartXfer+0x648>
              ep->xfer_len_db = 0U;
 8005834:	4675      	mov	r5, lr
 8005836:	eb04 0787 	add.w	r7, r4, r7, lsl #2
    temp1 = *pBuf;
 800583a:	f835 cb02 	ldrh.w	ip, [r5], #2
    *pdwVal = (uint16_t)temp2;
 800583e:	f824 cb04 	strh.w	ip, [r4], #4
  for (i = n; i != 0U; i--)
 8005842:	42a7      	cmp	r7, r4
 8005844:	d1f9      	bne.n	800583a <USB_EPStartXfer+0x8a6>
 8005846:	e6c9      	b.n	80055dc <USB_EPStartXfer+0x648>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005848:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800584c:	06d5      	lsls	r5, r2, #27
 800584e:	4d04      	ldr	r5, [pc, #16]	; (8005860 <USB_EPStartXfer+0x8cc>)
 8005850:	bf08      	it	eq
 8005852:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005856:	ea45 258c 	orr.w	r5, r5, ip, lsl #10
 800585a:	b2ad      	uxth	r5, r5
 800585c:	533d      	strh	r5, [r7, r4]
 800585e:	e58d      	b.n	800537c <USB_EPStartXfer+0x3e8>
 8005860:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005864:	0947      	lsrs	r7, r0, #5
 8005866:	06c5      	lsls	r5, r0, #27
 8005868:	4d4b      	ldr	r5, [pc, #300]	; (8005998 <USB_EPStartXfer+0xa04>)
 800586a:	bf08      	it	eq
 800586c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005870:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8005874:	b2ad      	uxth	r5, r5
 8005876:	52b5      	strh	r5, [r6, r2]
 8005878:	e6f9      	b.n	800566e <USB_EPStartXfer+0x6da>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800587a:	0946      	lsrs	r6, r0, #5
 800587c:	4c46      	ldr	r4, [pc, #280]	; (8005998 <USB_EPStartXfer+0xa04>)
 800587e:	06c7      	lsls	r7, r0, #27
 8005880:	bf08      	it	eq
 8005882:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005886:	ea44 2486 	orr.w	r4, r4, r6, lsl #10
 800588a:	b2a4      	uxth	r4, r4
 800588c:	8014      	strh	r4, [r2, #0]
 800588e:	e71a      	b.n	80056c6 <USB_EPStartXfer+0x732>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005890:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8005894:	06d4      	lsls	r4, r2, #27
 8005896:	4c40      	ldr	r4, [pc, #256]	; (8005998 <USB_EPStartXfer+0xa04>)
 8005898:	bf08      	it	eq
 800589a:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800589e:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 80058a2:	b2a4      	uxth	r4, r4
 80058a4:	537c      	strh	r4, [r7, r5]
 80058a6:	e41c      	b.n	80050e2 <USB_EPStartXfer+0x14e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058a8:	283e      	cmp	r0, #62	; 0x3e
 80058aa:	d847      	bhi.n	800593c <USB_EPStartXfer+0x9a8>
 80058ac:	0842      	lsrs	r2, r0, #1
 80058ae:	07c6      	lsls	r6, r0, #31
 80058b0:	bf48      	it	mi
 80058b2:	3201      	addmi	r2, #1
 80058b4:	0292      	lsls	r2, r2, #10
 80058b6:	b292      	uxth	r2, r2
 80058b8:	802a      	strh	r2, [r5, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058ba:	894a      	ldrh	r2, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058bc:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058be:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058c2:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80058c8:	e794      	b.n	80057f4 <USB_EPStartXfer+0x860>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058ca:	2a3e      	cmp	r2, #62	; 0x3e
 80058cc:	d84c      	bhi.n	8005968 <USB_EPStartXfer+0x9d4>
 80058ce:	0857      	lsrs	r7, r2, #1
 80058d0:	f012 0f01 	tst.w	r2, #1
 80058d4:	bf18      	it	ne
 80058d6:	3701      	addne	r7, #1
 80058d8:	02bf      	lsls	r7, r7, #10
 80058da:	b2bf      	uxth	r7, r7
 80058dc:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058de:	890d      	ldrh	r5, [r1, #8]
 80058e0:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058e4:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e6:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058ea:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058ee:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 80058f0:	e7a0      	b.n	8005834 <USB_EPStartXfer+0x8a0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058f2:	2a3e      	cmp	r2, #62	; 0x3e
 80058f4:	d844      	bhi.n	8005980 <USB_EPStartXfer+0x9ec>
 80058f6:	0857      	lsrs	r7, r2, #1
 80058f8:	f012 0f01 	tst.w	r2, #1
 80058fc:	bf18      	it	ne
 80058fe:	3701      	addne	r7, #1
 8005900:	02bf      	lsls	r7, r7, #10
 8005902:	b2bf      	uxth	r7, r7
 8005904:	532f      	strh	r7, [r5, r4]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005906:	894d      	ldrh	r5, [r1, #10]
 8005908:	f503 6480 	add.w	r4, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800590c:	1c57      	adds	r7, r2, #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800590e:	f8d1 e014 	ldr.w	lr, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005912:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005916:	087f      	lsrs	r7, r7, #1
  for (i = n; i != 0U; i--)
 8005918:	e74c      	b.n	80057b4 <USB_EPStartXfer+0x820>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800591a:	283e      	cmp	r0, #62	; 0x3e
 800591c:	d819      	bhi.n	8005952 <USB_EPStartXfer+0x9be>
 800591e:	0846      	lsrs	r6, r0, #1
 8005920:	07c7      	lsls	r7, r0, #31
 8005922:	bf48      	it	mi
 8005924:	3601      	addmi	r6, #1
 8005926:	02b6      	lsls	r6, r6, #10
 8005928:	b2b6      	uxth	r6, r6
 800592a:	5356      	strh	r6, [r2, r5]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800592c:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800592e:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005930:	f503 6280 	add.w	r2, r3, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005934:	0840      	lsrs	r0, r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005936:	eb02 0245 	add.w	r2, r2, r5, lsl #1
  for (i = n; i != 0U; i--)
 800593a:	e71b      	b.n	8005774 <USB_EPStartXfer+0x7e0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800593c:	0946      	lsrs	r6, r0, #5
 800593e:	06c2      	lsls	r2, r0, #27
 8005940:	4a15      	ldr	r2, [pc, #84]	; (8005998 <USB_EPStartXfer+0xa04>)
 8005942:	bf08      	it	eq
 8005944:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005948:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800594c:	b292      	uxth	r2, r2
 800594e:	802a      	strh	r2, [r5, #0]
 8005950:	e746      	b.n	80057e0 <USB_EPStartXfer+0x84c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005952:	0947      	lsrs	r7, r0, #5
 8005954:	06c6      	lsls	r6, r0, #27
 8005956:	4e10      	ldr	r6, [pc, #64]	; (8005998 <USB_EPStartXfer+0xa04>)
 8005958:	bf08      	it	eq
 800595a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800595e:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
 8005962:	b2b6      	uxth	r6, r6
 8005964:	5356      	strh	r6, [r2, r5]
 8005966:	e6fb      	b.n	8005760 <USB_EPStartXfer+0x7cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005968:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 800596c:	06d7      	lsls	r7, r2, #27
 800596e:	4f0a      	ldr	r7, [pc, #40]	; (8005998 <USB_EPStartXfer+0xa04>)
 8005970:	bf08      	it	eq
 8005972:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8005976:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800597a:	b2bf      	uxth	r7, r7
 800597c:	532f      	strh	r7, [r5, r4]
 800597e:	e74d      	b.n	800581c <USB_EPStartXfer+0x888>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005980:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8005984:	06d7      	lsls	r7, r2, #27
 8005986:	4f04      	ldr	r7, [pc, #16]	; (8005998 <USB_EPStartXfer+0xa04>)
 8005988:	bf08      	it	eq
 800598a:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 800598e:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8005992:	b2bf      	uxth	r7, r7
 8005994:	532f      	strh	r7, [r5, r4]
 8005996:	e701      	b.n	800579c <USB_EPStartXfer+0x808>
 8005998:	ffff8000 	.word	0xffff8000

0800599c <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800599c:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800599e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80059a0:	b18b      	cbz	r3, 80059c6 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80059a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f083 0310 	eor.w	r3, r3, #16
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80059c2:	2000      	movs	r0, #0
 80059c4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80059c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80059e6:	2000      	movs	r0, #0
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 80059ec:	7b0b      	ldrb	r3, [r1, #12]
 80059ee:	bb43      	cbnz	r3, 8005a42 <USB_EPClearStall+0x56>
    if (ep->is_in != 0U)
 80059f0:	784b      	ldrb	r3, [r1, #1]
 80059f2:	b343      	cbz	r3, 8005a46 <USB_EPClearStall+0x5a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f4:	780a      	ldrb	r2, [r1, #0]
 80059f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059fa:	065b      	lsls	r3, r3, #25
 80059fc:	d50d      	bpl.n	8005a1a <USB_EPClearStall+0x2e>
 80059fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005a1a:	78cb      	ldrb	r3, [r1, #3]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d010      	beq.n	8005a42 <USB_EPClearStall+0x56>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a20:	780a      	ldrb	r2, [r1, #0]
 8005a22:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	f083 0320 	eor.w	r3, r3, #32
 8005a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	4770      	bx	lr
{
 8005a46:	b410      	push	{r4}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a48:	780c      	ldrb	r4, [r1, #0]
 8005a4a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005a4e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8005a52:	045b      	lsls	r3, r3, #17
 8005a54:	d510      	bpl.n	8005a78 <USB_EPClearStall+0x8c>
 8005a56:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8005a72:	780a      	ldrb	r2, [r1, #0]
 8005a74:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a78:	8813      	ldrh	r3, [r2, #0]
}
 8005a7a:	2000      	movs	r0, #0
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	0c1b      	lsrs	r3, r3, #16
 8005a88:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8005a94:	bc10      	pop	{r4}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a96:	8013      	strh	r3, [r2, #0]
}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <USB_SetDevAddress>:
  if (address == 0U)
 8005a9c:	b911      	cbnz	r1, 8005aa4 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4770      	bx	lr

08005aa8 <USB_DevConnect>:
}
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4770      	bx	lr

08005aac <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8005aac:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8005ab0:	b280      	uxth	r0, r0
 8005ab2:	4770      	bx	lr

08005ab4 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ab4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ab6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 8005aba:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005ac0:	d007      	beq.n	8005ad2 <USB_WritePMA+0x1e>
 8005ac2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005ac6:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8005aca:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 8005ace:	4282      	cmp	r2, r0
 8005ad0:	d1f9      	bne.n	8005ac6 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8005ad2:	4770      	bx	lr

08005ad4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ad4:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8005ad8:	ea5f 0c53 	movs.w	ip, r3, lsr #1
{
 8005adc:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ade:	f500 6780 	add.w	r7, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8005ae2:	d013      	beq.n	8005b0c <USB_ReadPMA+0x38>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ae4:	463d      	mov	r5, r7
  for (i = n; i != 0U; i--)
 8005ae6:	4664      	mov	r4, ip
 8005ae8:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005aea:	f835 2b04 	ldrh.w	r2, [r5], #4
  for (i = n; i != 0U; i--)
 8005aee:	3c01      	subs	r4, #1
    temp = *(__IO uint16_t *)pdwVal;
 8005af0:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005af2:	ea4f 2612 	mov.w	r6, r2, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005af6:	f800 2c02 	strb.w	r2, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005afa:	f800 6c01 	strb.w	r6, [r0, #-1]
  for (i = n; i != 0U; i--)
 8005afe:	f100 0002 	add.w	r0, r0, #2
 8005b02:	d1f2      	bne.n	8005aea <USB_ReadPMA+0x16>
 8005b04:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 8005b08:	eb07 078c 	add.w	r7, r7, ip, lsl #2
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b0c:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8005b0e:	bf48      	it	mi
 8005b10:	883b      	ldrhmi	r3, [r7, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 8005b12:	bcf0      	pop	{r4, r5, r6, r7}
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b14:	bf48      	it	mi
 8005b16:	700b      	strbmi	r3, [r1, #0]
}
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop

08005b1c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b1c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005b20:	b183      	cbz	r3, 8005b44 <USBD_CDC_EP0_RxReady+0x28>
{
 8005b22:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005b24:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b28:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005b2c:	28ff      	cmp	r0, #255	; 0xff
 8005b2e:	d007      	beq.n	8005b40 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4621      	mov	r1, r4
 8005b34:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005b38:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8005b3a:	23ff      	movs	r3, #255	; 0xff
 8005b3c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005b40:	2000      	movs	r0, #0
 8005b42:	bd10      	pop	{r4, pc}
 8005b44:	2000      	movs	r0, #0
 8005b46:	4770      	bx	lr

08005b48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005b48:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005b4a:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 8005b4c:	4801      	ldr	r0, [pc, #4]	; (8005b54 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005b4e:	801a      	strh	r2, [r3, #0]
}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000304 	.word	0x20000304

08005b58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005b58:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005b5a:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005b5e:	801a      	strh	r2, [r3, #0]
}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000348 	.word	0x20000348

08005b68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005b68:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005b6a:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005b6e:	801a      	strh	r2, [r3, #0]
}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000398 	.word	0x20000398

08005b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005b78:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005b7a:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8005b7e:	801a      	strh	r2, [r3, #0]
}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000038c 	.word	0x2000038c

08005b88 <USBD_CDC_DataOut>:
{
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005b8c:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005b90:	f001 f830 	bl	8006bf4 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8005b94:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005b98:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8005b9c:	b14b      	cbz	r3, 8005bb2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b9e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005ba2:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005bac:	4798      	blx	r3
    return USBD_OK;
 8005bae:	2000      	movs	r0, #0
}
 8005bb0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005bb2:	2002      	movs	r0, #2
}
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
 8005bb6:	bf00      	nop

08005bb8 <USBD_CDC_DataIn>:
{
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005bba:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 8005bbe:	b1d6      	cbz	r6, 8005bf6 <USBD_CDC_DataIn+0x3e>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005bc0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005bc4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	b14a      	cbz	r2, 8005be0 <USBD_CDC_DataIn+0x28>
 8005bcc:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8005bd0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	fbb2 f4f3 	udiv	r4, r2, r3
 8005bda:	fb03 2414 	mls	r4, r3, r4, r2
 8005bde:	b11c      	cbz	r4, 8005be8 <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 8005be0:	2000      	movs	r0, #0
 8005be2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 8005be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005be8:	4623      	mov	r3, r4
 8005bea:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 8005bec:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005bee:	f000 ffe5 	bl	8006bbc <USBD_LL_Transmit>
    return USBD_OK;
 8005bf2:	4620      	mov	r0, r4
}
 8005bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8005bf6:	2002      	movs	r0, #2
}
 8005bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bfa:	bf00      	nop

08005bfc <USBD_CDC_Setup>:
{
 8005bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8005c00:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c02:	780b      	ldrb	r3, [r1, #0]
{
 8005c04:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c06:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c0e:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8005c12:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8005c16:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c1a:	d013      	beq.n	8005c44 <USBD_CDC_Setup+0x48>
 8005c1c:	2e20      	cmp	r6, #32
 8005c1e:	d117      	bne.n	8005c50 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 8005c20:	88ce      	ldrh	r6, [r1, #6]
 8005c22:	b1f6      	cbz	r6, 8005c62 <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 8005c24:	061b      	lsls	r3, r3, #24
 8005c26:	d53f      	bpl.n	8005ca8 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c28:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	4641      	mov	r1, r8
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	7860      	ldrb	r0, [r4, #1]
 8005c34:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c36:	4641      	mov	r1, r8
 8005c38:	4628      	mov	r0, r5
 8005c3a:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 8005c3c:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c3e:	f000 fcdf 	bl	8006600 <USBD_CtlSendData>
 8005c42:	e00a      	b.n	8005c5a <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 8005c44:	784b      	ldrb	r3, [r1, #1]
 8005c46:	2b0a      	cmp	r3, #10
 8005c48:	d01f      	beq.n	8005c8a <USBD_CDC_Setup+0x8e>
 8005c4a:	2b0b      	cmp	r3, #11
 8005c4c:	d027      	beq.n	8005c9e <USBD_CDC_Setup+0xa2>
 8005c4e:	b193      	cbz	r3, 8005c76 <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 8005c50:	4621      	mov	r1, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 fca2 	bl	800659c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c58:	2602      	movs	r6, #2
}
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	b002      	add	sp, #8
 8005c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c62:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005c66:	4632      	mov	r2, r6
 8005c68:	7848      	ldrb	r0, [r1, #1]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4798      	blx	r3
}
 8005c6e:	4630      	mov	r0, r6
 8005c70:	b002      	add	sp, #8
 8005c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c76:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d1e8      	bne.n	8005c50 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f10d 0106 	add.w	r1, sp, #6
 8005c84:	f000 fcbc 	bl	8006600 <USBD_CtlSendData>
 8005c88:	e7e7      	b.n	8005c5a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c8a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d1de      	bne.n	8005c50 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005c92:	2201      	movs	r2, #1
 8005c94:	f10d 0105 	add.w	r1, sp, #5
 8005c98:	f000 fcb2 	bl	8006600 <USBD_CtlSendData>
 8005c9c:	e7dd      	b.n	8005c5a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c9e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d0d9      	beq.n	8005c5a <USBD_CDC_Setup+0x5e>
 8005ca6:	e7d3      	b.n	8005c50 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 8005ca8:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005caa:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005cac:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005cb0:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 8005cb2:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005cb6:	f000 fcbb 	bl	8006630 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005cba:	463e      	mov	r6, r7
 8005cbc:	e7cd      	b.n	8005c5a <USBD_CDC_Setup+0x5e>
 8005cbe:	bf00      	nop

08005cc0 <USBD_CDC_DeInit>:
{
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cc4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cc6:	2181      	movs	r1, #129	; 0x81
 8005cc8:	f000 ff2c 	bl	8006b24 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ccc:	2101      	movs	r1, #1
 8005cce:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cd0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cd2:	f000 ff27 	bl	8006b24 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005cda:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005cde:	f000 ff21 	bl	8006b24 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8005ce2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ce6:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8005ce8:	b14b      	cbz	r3, 8005cfe <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005cea:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005cf2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8005cf6:	f000 ff85 	bl	8006c04 <USBD_static_free>
    pdev->pClassData = NULL;
 8005cfa:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8005cfe:	2000      	movs	r0, #0
 8005d00:	bd38      	pop	{r3, r4, r5, pc}
 8005d02:	bf00      	nop

08005d04 <USBD_CDC_Init>:
{
 8005d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005d08:	7c03      	ldrb	r3, [r0, #16]
{
 8005d0a:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d0c:	2501      	movs	r5, #1
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d13d      	bne.n	8005d8e <USBD_CDC_Init+0x8a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d16:	2202      	movs	r2, #2
 8005d18:	2181      	movs	r1, #129	; 0x81
 8005d1a:	f000 fef3 	bl	8006b04 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d24:	2202      	movs	r2, #2
 8005d26:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d28:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d2a:	f000 feeb 	bl	8006b04 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d2e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d32:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d34:	2308      	movs	r3, #8
 8005d36:	2203      	movs	r2, #3
 8005d38:	2182      	movs	r1, #130	; 0x82
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 fee2 	bl	8006b04 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005d40:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d44:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005d46:	f000 ff59 	bl	8006bfc <USBD_static_malloc>
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8005d50:	b360      	cbz	r0, 8005dac <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 8005d52:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d56:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005d5e:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005d62:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005d66:	7c26      	ldrb	r6, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d68:	4639      	mov	r1, r7
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005d70:	b136      	cbz	r6, 8005d80 <USBD_CDC_Init+0x7c>
  uint8_t ret = 0U;
 8005d72:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f000 ff2f 	bl	8006bd8 <USBD_LL_PrepareReceive>
}
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d84:	f000 ff28 	bl	8006bd8 <USBD_LL_PrepareReceive>
}
 8005d88:	4630      	mov	r0, r6
 8005d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	2202      	movs	r2, #2
 8005d92:	2181      	movs	r1, #129	; 0x81
 8005d94:	f000 feb6 	bl	8006b04 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d98:	4629      	mov	r1, r5
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005da0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005da2:	f000 feaf 	bl	8006b04 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005da6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8005daa:	e7c2      	b.n	8005d32 <USBD_CDC_Init+0x2e>
    ret = 1U;
 8005dac:	463e      	mov	r6, r7
}
 8005dae:	4630      	mov	r0, r6
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005db4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8005db4:	b119      	cbz	r1, 8005dbe <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8005db6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8005dba:	2000      	movs	r0, #0
 8005dbc:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005dbe:	2002      	movs	r0, #2
  }

  return ret;
}
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop

08005dc4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005dc4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005dc8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005dca:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005dce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005dd2:	4770      	bx	lr

08005dd4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005dd4:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290

  return USBD_OK;
}
 8005dd8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005dda:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005dde:	4770      	bx	lr

08005de0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005de0:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 8005de4:	b19a      	cbz	r2, 8005e0e <USBD_CDC_TransmitPacket+0x2e>
{
 8005de6:	b538      	push	{r3, r4, r5, lr}
  {
    if(hcdc->TxState == 0U)
 8005de8:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005dec:	b10c      	cbz	r4, 8005df2 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005dee:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005df0:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1U;
 8005df2:	2501      	movs	r5, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005df4:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
      hcdc->TxState = 1U;
 8005df8:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005dfc:	2181      	movs	r1, #129	; 0x81
 8005dfe:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e02:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f000 fed9 	bl	8006bbc <USBD_LL_Transmit>
      return USBD_OK;
 8005e0a:	4620      	mov	r0, r4
}
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005e0e:	2002      	movs	r0, #2
}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop

08005e14 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005e14:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8005e18:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005e1a:	b18a      	cbz	r2, 8005e40 <USBD_CDC_ReceivePacket+0x2c>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005e1c:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005e1e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005e22:	b134      	cbz	r4, 8005e32 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005e24:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 8005e26:	2340      	movs	r3, #64	; 0x40
 8005e28:	2101      	movs	r1, #1
 8005e2a:	f000 fed5 	bl	8006bd8 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005e2e:	4620      	mov	r0, r4
 8005e30:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e36:	2101      	movs	r1, #1
 8005e38:	f000 fece 	bl	8006bd8 <USBD_LL_PrepareReceive>
}
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005e40:	2402      	movs	r4, #2
}
 8005e42:	4620      	mov	r0, r4
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	bf00      	nop

08005e48 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005e48:	b188      	cbz	r0, 8005e6e <USBD_Init+0x26>
{
 8005e4a:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005e4c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005e50:	b113      	cbz	r3, 8005e58 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005e58:	b109      	cbz	r1, 8005e5e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005e5a:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005e5e:	2301      	movs	r3, #1
  pdev->id = id;
 8005e60:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005e62:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005e66:	f000 fdfd 	bl	8006a64 <USBD_LL_Init>

  return USBD_OK;
 8005e6a:	2000      	movs	r0, #0
}
 8005e6c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005e6e:	2002      	movs	r0, #2
}
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop

08005e74 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005e74:	b119      	cbz	r1, 8005e7e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005e76:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005e7e:	2002      	movs	r0, #2
  }

  return status;
}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop

08005e84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005e84:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005e86:	f000 fe2f 	bl	8006ae8 <USBD_LL_Start>

  return USBD_OK;
}
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	bd08      	pop	{r3, pc}
 8005e8e:	bf00      	nop

08005e90 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e90:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8005e92:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005e96:	b11b      	cbz	r3, 8005ea0 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4798      	blx	r3
 8005e9c:	b900      	cbnz	r0, 8005ea0 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005e9e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005ea0:	2002      	movs	r0, #2
}
 8005ea2:	bd08      	pop	{r3, pc}

08005ea4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005ea4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005ea6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4798      	blx	r3
  return USBD_OK;
}
 8005eae:	2000      	movs	r0, #0
 8005eb0:	bd08      	pop	{r3, pc}
 8005eb2:	bf00      	nop

08005eb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eb8:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 fb59 	bl	8006574 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ec2:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005ec4:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 8005ec8:	f8b4 2286 	ldrh.w	r2, [r4, #646]	; 0x286
 8005ecc:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8005ed0:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 8005ed2:	e9c4 029b 	strd	r0, r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 8005ed6:	d009      	beq.n	8005eec <USBD_LL_SetupStage+0x38>
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d013      	beq.n	8005f04 <USBD_LL_SetupStage+0x50>
 8005edc:	b163      	cbz	r3, 8005ef8 <USBD_LL_SetupStage+0x44>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005ee4:	f000 fe2c 	bl	8006b40 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8005ee8:	2000      	movs	r0, #0
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8005eec:	4629      	mov	r1, r5
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 fa74 	bl	80063dc <USBD_StdItfReq>
}
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8005ef8:	4629      	mov	r1, r5
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 f8f2 	bl	80060e4 <USBD_StdDevReq>
}
 8005f00:	2000      	movs	r0, #0
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 8005f04:	4629      	mov	r1, r5
 8005f06:	4620      	mov	r0, r4
 8005f08:	f000 fa9c 	bl	8006444 <USBD_StdEPReq>
}
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}

08005f10 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8005f14:	b969      	cbnz	r1, 8005f32 <USBD_LL_DataOutStage+0x22>
 8005f16:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f18:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8005f1c:	2a03      	cmp	r2, #3
 8005f1e:	d015      	beq.n	8005f4c <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f20:	2a05      	cmp	r2, #5
 8005f22:	460c      	mov	r4, r1
 8005f24:	d10e      	bne.n	8005f44 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f26:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8005f2a:	f000 fe09 	bl	8006b40 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005f2e:	4620      	mov	r0, r4
}
 8005f30:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 8005f32:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	b133      	cbz	r3, 8005f48 <USBD_LL_DataOutStage+0x38>
 8005f3a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005f3e:	2a03      	cmp	r2, #3
 8005f40:	d102      	bne.n	8005f48 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8005f42:	4798      	blx	r3
  return USBD_OK;
 8005f44:	2000      	movs	r0, #0
}
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005f48:	2002      	movs	r0, #2
}
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 8005f4c:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 8005f50:	4291      	cmp	r1, r2
 8005f52:	d90c      	bls.n	8005f6e <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 8005f54:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 8005f56:	428a      	cmp	r2, r1
 8005f58:	bf88      	it	hi
 8005f5a:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 8005f5c:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8005f60:	bf98      	it	ls
 8005f62:	b292      	uxthls	r2, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	f000 fb71 	bl	800664c <USBD_CtlContinueRx>
  return USBD_OK;
 8005f6a:	2000      	movs	r0, #0
}
 8005f6c:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005f6e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	b11b      	cbz	r3, 8005f7e <USBD_LL_DataOutStage+0x6e>
 8005f76:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005f7a:	2a03      	cmp	r2, #3
 8005f7c:	d004      	beq.n	8005f88 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 fb6e 	bl	8006660 <USBD_CtlSendStatus>
  return USBD_OK;
 8005f84:	2000      	movs	r0, #0
}
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8005f88:	4798      	blx	r3
 8005f8a:	e7f8      	b.n	8005f7e <USBD_LL_DataOutStage+0x6e>

08005f8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8005f90:	b981      	cbnz	r1, 8005fb4 <USBD_LL_DataInStage+0x28>
 8005f92:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f94:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8005f98:	2a02      	cmp	r2, #2
 8005f9a:	d01b      	beq.n	8005fd4 <USBD_LL_DataInStage+0x48>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f9c:	f032 0304 	bics.w	r3, r2, #4
 8005fa0:	d102      	bne.n	8005fa8 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	f000 fdcc 	bl	8006b40 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005fa8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005fac:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d00d      	beq.n	8005fce <USBD_LL_DataInStage+0x42>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 8005fb4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	b133      	cbz	r3, 8005fca <USBD_LL_DataInStage+0x3e>
 8005fbc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8005fc0:	2a03      	cmp	r2, #3
 8005fc2:	d102      	bne.n	8005fca <USBD_LL_DataInStage+0x3e>
    pdev->pClass->DataIn(pdev, epnum);
 8005fc4:	4798      	blx	r3
  return USBD_OK;
 8005fc6:	2000      	movs	r0, #0
}
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8005fca:	2002      	movs	r0, #2
}
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8005fce:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
}
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8005fd4:	e9d0 2608 	ldrd	r2, r6, [r0, #32]
 8005fd8:	42b2      	cmp	r2, r6
 8005fda:	d826      	bhi.n	800602a <USBD_LL_DataInStage+0x9e>
        if((pep->total_length % pep->maxpacket == 0U) &&
 8005fdc:	69c3      	ldr	r3, [r0, #28]
 8005fde:	fbb3 f5f6 	udiv	r5, r3, r6
 8005fe2:	fb06 3515 	mls	r5, r6, r5, r3
 8005fe6:	b95d      	cbnz	r5, 8006000 <USBD_LL_DataInStage+0x74>
 8005fe8:	429e      	cmp	r6, r3
 8005fea:	d809      	bhi.n	8006000 <USBD_LL_DataInStage+0x74>
           (pep->total_length >= pep->maxpacket) &&
 8005fec:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d205      	bcs.n	8006000 <USBD_LL_DataInStage+0x74>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	f000 fb11 	bl	800661c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ffa:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
 8005ffe:	e01b      	b.n	8006038 <USBD_LL_DataInStage+0xac>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006000:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	b11b      	cbz	r3, 8006010 <USBD_LL_DataInStage+0x84>
 8006008:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800600c:	2a03      	cmp	r2, #3
 800600e:	d01a      	beq.n	8006046 <USBD_LL_DataInStage+0xba>
          USBD_LL_StallEP(pdev, 0x80U);
 8006010:	2180      	movs	r1, #128	; 0x80
 8006012:	4620      	mov	r0, r4
 8006014:	f000 fd94 	bl	8006b40 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006018:	4620      	mov	r0, r4
 800601a:	f000 fb2d 	bl	8006678 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800601e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
      pdev->dev_test_mode = 0U;
 8006022:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8006024:	2b01      	cmp	r3, #1
 8006026:	d1c4      	bne.n	8005fb2 <USBD_LL_DataInStage+0x26>
 8006028:	e7d1      	b.n	8005fce <USBD_LL_DataInStage+0x42>
        pep->rem_length -= pep->maxpacket;
 800602a:	1b92      	subs	r2, r2, r6
 800602c:	460d      	mov	r5, r1
 800602e:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006030:	4619      	mov	r1, r3
 8006032:	b292      	uxth	r2, r2
 8006034:	f000 faf2 	bl	800661c <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006038:	462b      	mov	r3, r5
 800603a:	462a      	mov	r2, r5
 800603c:	4629      	mov	r1, r5
 800603e:	4620      	mov	r0, r4
 8006040:	f000 fdca 	bl	8006bd8 <USBD_LL_PrepareReceive>
 8006044:	e7b0      	b.n	8005fa8 <USBD_LL_DataInStage+0x1c>
            pdev->pClass->EP0_TxSent(pdev);
 8006046:	4620      	mov	r0, r4
 8006048:	4798      	blx	r3
 800604a:	e7e1      	b.n	8006010 <USBD_LL_DataInStage+0x84>

0800604c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800604c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800604e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006050:	2640      	movs	r6, #64	; 0x40
{
 8006052:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006054:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006056:	4611      	mov	r1, r2
 8006058:	4633      	mov	r3, r6
 800605a:	f000 fd53 	bl	8006b04 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800605e:	4633      	mov	r3, r6
 8006060:	2180      	movs	r1, #128	; 0x80
 8006062:	4620      	mov	r0, r4
 8006064:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006066:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800606a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800606e:	f000 fd49 	bl	8006b04 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8006072:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8006074:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006078:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800607a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800607c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006080:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006084:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006086:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800608a:	b123      	cbz	r3, 8006096 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800608c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006090:	4620      	mov	r0, r4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006096:	2000      	movs	r0, #0
 8006098:	bd70      	pop	{r4, r5, r6, pc}
 800609a:	bf00      	nop

0800609c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800609c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 800609e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80060a0:	7419      	strb	r1, [r3, #16]
}
 80060a2:	4770      	bx	lr

080060a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80060a4:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060a6:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 80060a8:	f890 1274 	ldrb.w	r1, [r0, #628]	; 0x274
  return USBD_OK;
}
 80060ac:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 80060ae:	f883 1275 	strb.w	r1, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060b2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 80060b6:	4770      	bx	lr

080060b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80060b8:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 80060ba:	f890 2275 	ldrb.w	r2, [r0, #629]	; 0x275
  return USBD_OK;
}
 80060be:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 80060c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop

080060c8 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80060cc:	2a03      	cmp	r2, #3
 80060ce:	d001      	beq.n	80060d4 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 80060d0:	2000      	movs	r0, #0
 80060d2:	4770      	bx	lr
{
 80060d4:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 80060d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	b103      	cbz	r3, 80060e0 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 80060de:	4798      	blx	r3
}
 80060e0:	2000      	movs	r0, #0
 80060e2:	bd08      	pop	{r3, pc}

080060e4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80060e4:	b530      	push	{r4, r5, lr}
 80060e6:	780b      	ldrb	r3, [r1, #0]
 80060e8:	460d      	mov	r5, r1
 80060ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060ee:	2b20      	cmp	r3, #32
{
 80060f0:	4604      	mov	r4, r0
 80060f2:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f4:	d00d      	beq.n	8006112 <USBD_StdDevReq+0x2e>
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d00b      	beq.n	8006112 <USBD_StdDevReq+0x2e>
 80060fa:	b19b      	cbz	r3, 8006124 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 fd1e 	bl	8006b40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006104:	4620      	mov	r0, r4
 8006106:	2100      	movs	r1, #0
 8006108:	f000 fd1a 	bl	8006b40 <USBD_LL_StallEP>
}
 800610c:	2000      	movs	r0, #0
 800610e:	b003      	add	sp, #12
 8006110:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 8006112:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006116:	4629      	mov	r1, r5
 8006118:	4620      	mov	r0, r4
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4798      	blx	r3
}
 800611e:	2000      	movs	r0, #0
 8006120:	b003      	add	sp, #12
 8006122:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 8006124:	784b      	ldrb	r3, [r1, #1]
 8006126:	2b09      	cmp	r3, #9
 8006128:	d8e8      	bhi.n	80060fc <USBD_StdDevReq+0x18>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <USBD_StdDevReq+0x4c>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	0800618b 	.word	0x0800618b
 8006134:	080061b3 	.word	0x080061b3
 8006138:	080060fd 	.word	0x080060fd
 800613c:	080061cf 	.word	0x080061cf
 8006140:	080060fd 	.word	0x080060fd
 8006144:	080061e1 	.word	0x080061e1
 8006148:	08006219 	.word	0x08006219
 800614c:	080060fd 	.word	0x080060fd
 8006150:	08006249 	.word	0x08006249
 8006154:	08006159 	.word	0x08006159
  cfgidx = (uint8_t)(req->wValue);
 8006158:	7889      	ldrb	r1, [r1, #2]
 800615a:	4d9f      	ldr	r5, [pc, #636]	; (80063d8 <USBD_StdDevReq+0x2f4>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800615c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800615e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006160:	d8cc      	bhi.n	80060fc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006162:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006166:	2b02      	cmp	r3, #2
 8006168:	f000 8111 	beq.w	800638e <USBD_StdDevReq+0x2aa>
 800616c:	2b03      	cmp	r3, #3
 800616e:	f000 80fd 	beq.w	800636c <USBD_StdDevReq+0x288>
  USBD_LL_StallEP(pdev , 0x80U);
 8006172:	2180      	movs	r1, #128	; 0x80
 8006174:	f000 fce4 	bl	8006b40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006178:	2100      	movs	r1, #0
 800617a:	4620      	mov	r0, r4
 800617c:	f000 fce0 	bl	8006b40 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006180:	4620      	mov	r0, r4
 8006182:	7829      	ldrb	r1, [r5, #0]
 8006184:	f7ff fe8e 	bl	8005ea4 <USBD_ClrClassConfig>
      break;
 8006188:	e7c0      	b.n	800610c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800618a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800618e:	3b01      	subs	r3, #1
 8006190:	2b02      	cmp	r3, #2
 8006192:	d8b3      	bhi.n	80060fc <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 8006194:	88ca      	ldrh	r2, [r1, #6]
 8006196:	2a02      	cmp	r2, #2
 8006198:	d1b0      	bne.n	80060fc <USBD_StdDevReq+0x18>
    if (pdev->dev_remote_wakeup)
 800619a:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800619e:	4601      	mov	r1, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bf14      	ite	ne
 80061a4:	4613      	movne	r3, r2
 80061a6:	2300      	moveq	r3, #0
 80061a8:	f841 3f0c 	str.w	r3, [r1, #12]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80061ac:	f000 fa28 	bl	8006600 <USBD_CtlSendData>
    break;
 80061b0:	e7ac      	b.n	800610c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80061b2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80061b6:	3b01      	subs	r3, #1
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d89f      	bhi.n	80060fc <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061bc:	884b      	ldrh	r3, [r1, #2]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d1a4      	bne.n	800610c <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80061c8:	f000 fa4a 	bl	8006660 <USBD_CtlSendStatus>
 80061cc:	e79e      	b.n	800610c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061ce:	884b      	ldrh	r3, [r1, #2]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d19b      	bne.n	800610c <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 80061d4:	f8c0 327c 	str.w	r3, [r0, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 fa41 	bl	8006660 <USBD_CtlSendStatus>
 80061de:	e795      	b.n	800610c <USBD_StdDevReq+0x28>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061e0:	888b      	ldrh	r3, [r1, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d18a      	bne.n	80060fc <USBD_StdDevReq+0x18>
 80061e6:	88cb      	ldrh	r3, [r1, #6]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d187      	bne.n	80060fc <USBD_StdDevReq+0x18>
 80061ec:	884d      	ldrh	r5, [r1, #2]
 80061ee:	2d7f      	cmp	r5, #127	; 0x7f
 80061f0:	d884      	bhi.n	80060fc <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d080      	beq.n	80060fc <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061fa:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80061fc:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006200:	f000 fcce 	bl	8006ba0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006204:	4620      	mov	r0, r4
 8006206:	f000 fa2b 	bl	8006660 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800620a:	2d00      	cmp	r5, #0
 800620c:	f000 80e0 	beq.w	80063d0 <USBD_StdDevReq+0x2ec>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006210:	2302      	movs	r3, #2
 8006212:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8006216:	e779      	b.n	800610c <USBD_StdDevReq+0x28>
      USBD_GetDescriptor (pdev, req);
 8006218:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 800621a:	0a13      	lsrs	r3, r2, #8
 800621c:	3b01      	subs	r3, #1
 800621e:	2b06      	cmp	r3, #6
 8006220:	f63f af6c 	bhi.w	80060fc <USBD_StdDevReq+0x18>
 8006224:	a101      	add	r1, pc, #4	; (adr r1, 800622c <USBD_StdDevReq+0x148>)
 8006226:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	080062ef 	.word	0x080062ef
 8006230:	080062d7 	.word	0x080062d7
 8006234:	080062c5 	.word	0x080062c5
 8006238:	080060fd 	.word	0x080060fd
 800623c:	080060fd 	.word	0x080060fd
 8006240:	080062af 	.word	0x080062af
 8006244:	0800626f 	.word	0x0800626f
  if (req->wLength != 1U)
 8006248:	88ca      	ldrh	r2, [r1, #6]
 800624a:	2a01      	cmp	r2, #1
 800624c:	f47f af56 	bne.w	80060fc <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8006250:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006254:	2b02      	cmp	r3, #2
 8006256:	f200 8082 	bhi.w	800635e <USBD_StdDevReq+0x27a>
 800625a:	2b00      	cmp	r3, #0
 800625c:	f43f af4e 	beq.w	80060fc <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	4601      	mov	r1, r0
 8006264:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006268:	f000 f9ca 	bl	8006600 <USBD_CtlSendData>
      break;
 800626c:	e74e      	b.n	800610c <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800626e:	7c03      	ldrb	r3, [r0, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f47f af43 	bne.w	80060fc <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006276:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800627a:	f10d 0006 	add.w	r0, sp, #6
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006282:	2307      	movs	r3, #7
 8006284:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 8006286:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800628a:	b15a      	cbz	r2, 80062a4 <USBD_StdDevReq+0x1c0>
 800628c:	88eb      	ldrh	r3, [r5, #6]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0a2      	beq.n	80061d8 <USBD_StdDevReq+0xf4>
    len = MIN(len, req->wLength);
 8006292:	429a      	cmp	r2, r3
 8006294:	bf28      	it	cs
 8006296:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8006298:	4601      	mov	r1, r0
 800629a:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800629c:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80062a0:	f000 f9ae 	bl	8006600 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80062a4:	88eb      	ldrh	r3, [r5, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f af30 	bne.w	800610c <USBD_StdDevReq+0x28>
 80062ac:	e794      	b.n	80061d8 <USBD_StdDevReq+0xf4>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80062ae:	7c03      	ldrb	r3, [r0, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f af23 	bne.w	80060fc <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80062b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80062ba:	f10d 0006 	add.w	r0, sp, #6
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	4798      	blx	r3
      break;
 80062c2:	e7e0      	b.n	8006286 <USBD_StdDevReq+0x1a2>
    switch ((uint8_t)(req->wValue))
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	2a05      	cmp	r2, #5
 80062c8:	f63f af18 	bhi.w	80060fc <USBD_StdDevReq+0x18>
 80062cc:	e8df f002 	tbb	[pc, r2]
 80062d0:	272f373f 	.word	0x272f373f
 80062d4:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80062d6:	7c03      	ldrb	r3, [r0, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d166      	bne.n	80063aa <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80062dc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80062e0:	f10d 0006 	add.w	r0, sp, #6
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062e8:	2302      	movs	r3, #2
 80062ea:	7043      	strb	r3, [r0, #1]
 80062ec:	e7cb      	b.n	8006286 <USBD_StdDevReq+0x1a2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062ee:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80062f2:	f10d 0106 	add.w	r1, sp, #6
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	7c00      	ldrb	r0, [r0, #16]
 80062fa:	4798      	blx	r3
    break;
 80062fc:	e7c3      	b.n	8006286 <USBD_StdDevReq+0x1a2>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062fe:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006302:	f10d 0106 	add.w	r1, sp, #6
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	7c00      	ldrb	r0, [r0, #16]
 800630a:	4798      	blx	r3
      break;
 800630c:	e7bb      	b.n	8006286 <USBD_StdDevReq+0x1a2>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800630e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006312:	f10d 0106 	add.w	r1, sp, #6
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	7c00      	ldrb	r0, [r0, #16]
 800631a:	4798      	blx	r3
      break;
 800631c:	e7b3      	b.n	8006286 <USBD_StdDevReq+0x1a2>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800631e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006322:	f10d 0106 	add.w	r1, sp, #6
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	7c00      	ldrb	r0, [r0, #16]
 800632a:	4798      	blx	r3
      break;
 800632c:	e7ab      	b.n	8006286 <USBD_StdDevReq+0x1a2>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800632e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006332:	f10d 0106 	add.w	r1, sp, #6
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	7c00      	ldrb	r0, [r0, #16]
 800633a:	4798      	blx	r3
      break;
 800633c:	e7a3      	b.n	8006286 <USBD_StdDevReq+0x1a2>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800633e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006342:	f10d 0106 	add.w	r1, sp, #6
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	7c00      	ldrb	r0, [r0, #16]
 800634a:	4798      	blx	r3
      break;
 800634c:	e79b      	b.n	8006286 <USBD_StdDevReq+0x1a2>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800634e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006352:	f10d 0106 	add.w	r1, sp, #6
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	7c00      	ldrb	r0, [r0, #16]
 800635a:	4798      	blx	r3
      break;
 800635c:	e793      	b.n	8006286 <USBD_StdDevReq+0x1a2>
    switch (pdev->dev_state)
 800635e:	2b03      	cmp	r3, #3
 8006360:	f47f aecc 	bne.w	80060fc <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006364:	1d01      	adds	r1, r0, #4
 8006366:	f000 f94b 	bl	8006600 <USBD_CtlSendData>
      break;
 800636a:	e6cf      	b.n	800610c <USBD_StdDevReq+0x28>
      if (cfgidx == 0U)
 800636c:	b331      	cbz	r1, 80063bc <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 800636e:	6841      	ldr	r1, [r0, #4]
 8006370:	2901      	cmp	r1, #1
 8006372:	f43f af31 	beq.w	80061d8 <USBD_StdDevReq+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006376:	b2c9      	uxtb	r1, r1
 8006378:	f7ff fd94 	bl	8005ea4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800637c:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800637e:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 8006380:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006382:	f7ff fd85 	bl	8005e90 <USBD_SetClassConfig>
 8006386:	2802      	cmp	r0, #2
 8006388:	f47f af26 	bne.w	80061d8 <USBD_StdDevReq+0xf4>
 800638c:	e6b6      	b.n	80060fc <USBD_StdDevReq+0x18>
      if (cfgidx)
 800638e:	2900      	cmp	r1, #0
 8006390:	f43f af22 	beq.w	80061d8 <USBD_StdDevReq+0xf4>
        pdev->dev_config = cfgidx;
 8006394:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006396:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8006398:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800639a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800639e:	f7ff fd77 	bl	8005e90 <USBD_SetClassConfig>
 80063a2:	2802      	cmp	r0, #2
 80063a4:	f47f af18 	bne.w	80061d8 <USBD_StdDevReq+0xf4>
 80063a8:	e6a8      	b.n	80060fc <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80063aa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80063ae:	f10d 0006 	add.w	r0, sp, #6
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063b6:	2302      	movs	r3, #2
 80063b8:	7043      	strb	r3, [r0, #1]
 80063ba:	e764      	b.n	8006286 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063bc:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 80063be:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063c0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 80063c4:	f7ff fd6e 	bl	8005ea4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f949 	bl	8006660 <USBD_CtlSendStatus>
 80063ce:	e69d      	b.n	800610c <USBD_StdDevReq+0x28>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80063d6:	e699      	b.n	800610c <USBD_StdDevReq+0x28>
 80063d8:	20000634 	.word	0x20000634

080063dc <USBD_StdItfReq>:
{
 80063dc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063de:	780b      	ldrb	r3, [r1, #0]
{
 80063e0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80063e6:	2a40      	cmp	r2, #64	; 0x40
{
 80063e8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ea:	d00a      	beq.n	8006402 <USBD_StdItfReq+0x26>
 80063ec:	065b      	lsls	r3, r3, #25
 80063ee:	d508      	bpl.n	8006402 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 80063f0:	2180      	movs	r1, #128	; 0x80
 80063f2:	f000 fba5 	bl	8006b40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80063f6:	4620      	mov	r0, r4
 80063f8:	2100      	movs	r1, #0
 80063fa:	f000 fba1 	bl	8006b40 <USBD_LL_StallEP>
}
 80063fe:	2000      	movs	r0, #0
 8006400:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8006402:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 8006406:	3b01      	subs	r3, #1
 8006408:	2b02      	cmp	r3, #2
 800640a:	d811      	bhi.n	8006430 <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800640c:	792b      	ldrb	r3, [r5, #4]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d80e      	bhi.n	8006430 <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006412:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006416:	4629      	mov	r1, r5
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	4620      	mov	r0, r4
 800641c:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800641e:	88eb      	ldrh	r3, [r5, #6]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1ec      	bne.n	80063fe <USBD_StdItfReq+0x22>
 8006424:	2800      	cmp	r0, #0
 8006426:	d1ea      	bne.n	80063fe <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 8006428:	4620      	mov	r0, r4
 800642a:	f000 f919 	bl	8006660 <USBD_CtlSendStatus>
 800642e:	e7e6      	b.n	80063fe <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	4620      	mov	r0, r4
 8006434:	f000 fb84 	bl	8006b40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006438:	4620      	mov	r0, r4
 800643a:	2100      	movs	r1, #0
 800643c:	f000 fb80 	bl	8006b40 <USBD_LL_StallEP>
}
 8006440:	2000      	movs	r0, #0
 8006442:	bd38      	pop	{r3, r4, r5, pc}

08006444 <USBD_StdEPReq>:
{
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	780b      	ldrb	r3, [r1, #0]
 8006448:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800644a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800644e:	2b20      	cmp	r3, #32
 8006450:	d00c      	beq.n	800646c <USBD_StdEPReq+0x28>
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d00a      	beq.n	800646c <USBD_StdEPReq+0x28>
 8006456:	b183      	cbz	r3, 800647a <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 8006458:	2180      	movs	r1, #128	; 0x80
 800645a:	4620      	mov	r0, r4
 800645c:	f000 fb70 	bl	8006b40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006460:	4620      	mov	r0, r4
 8006462:	2100      	movs	r1, #0
 8006464:	f000 fb6c 	bl	8006b40 <USBD_LL_StallEP>
}
 8006468:	2000      	movs	r0, #0
 800646a:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClass->Setup (pdev, req);
 800646c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006470:	4620      	mov	r0, r4
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4798      	blx	r3
}
 8006476:	2000      	movs	r0, #0
 8006478:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 800647a:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800647c:	888a      	ldrh	r2, [r1, #4]
 800647e:	2b01      	cmp	r3, #1
 8006480:	b2d5      	uxtb	r5, r2
    switch (req->bRequest)
 8006482:	d03d      	beq.n	8006500 <USBD_StdEPReq+0xbc>
 8006484:	2b03      	cmp	r3, #3
 8006486:	d02a      	beq.n	80064de <USBD_StdEPReq+0x9a>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e5      	bne.n	8006458 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800648c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006490:	2b02      	cmp	r3, #2
 8006492:	d04e      	beq.n	8006532 <USBD_StdEPReq+0xee>
 8006494:	2b03      	cmp	r3, #3
 8006496:	d1df      	bne.n	8006458 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006498:	f005 030f 	and.w	r3, r5, #15
 800649c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 80064a0:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 80064a6:	d453      	bmi.n	8006550 <USBD_StdEPReq+0x10c>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064a8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0d3      	beq.n	8006458 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80064b0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80064b4:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80064b8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80064bc:	f506 76a0 	add.w	r6, r6, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064c0:	b133      	cbz	r3, 80064d0 <USBD_StdEPReq+0x8c>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80064c2:	4629      	mov	r1, r5
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fb57 	bl	8006b78 <USBD_LL_IsStallEP>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d04b      	beq.n	8006566 <USBD_StdEPReq+0x122>
            pep->status = 0x0001U;
 80064ce:	2301      	movs	r3, #1
 80064d0:	6033      	str	r3, [r6, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064d2:	4631      	mov	r1, r6
 80064d4:	4620      	mov	r0, r4
 80064d6:	2202      	movs	r2, #2
 80064d8:	f000 f892 	bl	8006600 <USBD_CtlSendData>
          break;
 80064dc:	e7c4      	b.n	8006468 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 80064de:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d01b      	beq.n	800651e <USBD_StdEPReq+0xda>
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d1b6      	bne.n	8006458 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80064ea:	884b      	ldrh	r3, [r1, #2]
 80064ec:	b923      	cbnz	r3, 80064f8 <USBD_StdEPReq+0xb4>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064ee:	066a      	lsls	r2, r5, #25
 80064f0:	d002      	beq.n	80064f8 <USBD_StdEPReq+0xb4>
 80064f2:	88cb      	ldrh	r3, [r1, #6]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d038      	beq.n	800656a <USBD_StdEPReq+0x126>
        USBD_CtlSendStatus(pdev);
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 f8b1 	bl	8006660 <USBD_CtlSendStatus>
        break;
 80064fe:	e7b3      	b.n	8006468 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 8006500:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006504:	2b02      	cmp	r3, #2
 8006506:	d00a      	beq.n	800651e <USBD_StdEPReq+0xda>
 8006508:	2b03      	cmp	r3, #3
 800650a:	d1a5      	bne.n	8006458 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800650c:	884b      	ldrh	r3, [r1, #2]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1aa      	bne.n	8006468 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 8006512:	066e      	lsls	r6, r5, #25
 8006514:	d0f0      	beq.n	80064f8 <USBD_StdEPReq+0xb4>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006516:	4629      	mov	r1, r5
 8006518:	f000 fb20 	bl	8006b5c <USBD_LL_ClearStallEP>
 800651c:	e7ec      	b.n	80064f8 <USBD_StdEPReq+0xb4>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800651e:	066b      	lsls	r3, r5, #25
 8006520:	d09a      	beq.n	8006458 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 8006522:	4629      	mov	r1, r5
 8006524:	f000 fb0c 	bl	8006b40 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006528:	4620      	mov	r0, r4
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	f000 fb08 	bl	8006b40 <USBD_LL_StallEP>
 8006530:	e79a      	b.n	8006468 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006532:	0668      	lsls	r0, r5, #25
 8006534:	d190      	bne.n	8006458 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 8006536:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006538:	0611      	lsls	r1, r2, #24
 800653a:	bf4c      	ite	mi
 800653c:	f104 0114 	addmi.w	r1, r4, #20
 8006540:	f504 71a0 	addpl.w	r1, r4, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006544:	4620      	mov	r0, r4
 8006546:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 8006548:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800654a:	f000 f859 	bl	8006600 <USBD_CtlSendData>
          break;
 800654e:	e78b      	b.n	8006468 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d080      	beq.n	8006458 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006556:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800655a:	1c5e      	adds	r6, r3, #1
 800655c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8006560:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006564:	e7ac      	b.n	80064c0 <USBD_StdEPReq+0x7c>
            pep->status = 0x0000U;
 8006566:	6030      	str	r0, [r6, #0]
 8006568:	e7b3      	b.n	80064d2 <USBD_StdEPReq+0x8e>
            USBD_LL_StallEP(pdev, ep_addr);
 800656a:	4629      	mov	r1, r5
 800656c:	f000 fae8 	bl	8006b40 <USBD_LL_StallEP>
 8006570:	e7c2      	b.n	80064f8 <USBD_StdEPReq+0xb4>
 8006572:	bf00      	nop

08006574 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006574:	780b      	ldrb	r3, [r1, #0]
 8006576:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006578:	784b      	ldrb	r3, [r1, #1]
 800657a:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800657c:	78ca      	ldrb	r2, [r1, #3]
 800657e:	788b      	ldrb	r3, [r1, #2]
 8006580:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006584:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006586:	794a      	ldrb	r2, [r1, #5]
 8006588:	790b      	ldrb	r3, [r1, #4]
 800658a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800658e:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006590:	79ca      	ldrb	r2, [r1, #7]
 8006592:	798b      	ldrb	r3, [r1, #6]
 8006594:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006598:	80c3      	strh	r3, [r0, #6]
}
 800659a:	4770      	bx	lr

0800659c <USBD_CtlError>:
{
 800659c:	b510      	push	{r4, lr}
 800659e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80065a0:	2180      	movs	r1, #128	; 0x80
 80065a2:	f000 facd 	bl	8006b40 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80065a6:	4620      	mov	r0, r4
}
 80065a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 80065ac:	2100      	movs	r1, #0
 80065ae:	f000 bac7 	b.w	8006b40 <USBD_LL_StallEP>
 80065b2:	bf00      	nop

080065b4 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80065b4:	b308      	cbz	r0, 80065fa <USBD_GetString+0x46>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80065b6:	7803      	ldrb	r3, [r0, #0]
{
 80065b8:	b470      	push	{r4, r5, r6}
    while (*buf != '\0')
 80065ba:	b1fb      	cbz	r3, 80065fc <USBD_GetString+0x48>
 80065bc:	4604      	mov	r4, r0
 80065be:	f1c0 0601 	rsb	r6, r0, #1
    {
        len++;
 80065c2:	19a3      	adds	r3, r4, r6
    while (*buf != '\0')
 80065c4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2d00      	cmp	r5, #0
 80065cc:	d1f9      	bne.n	80065c2 <USBD_GetString+0xe>
 80065ce:	3301      	adds	r3, #1
 80065d0:	005b      	lsls	r3, r3, #1
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80065d2:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80065d4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80065d6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80065d8:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 80065da:	7804      	ldrb	r4, [r0, #0]
 80065dc:	b15c      	cbz	r4, 80065f6 <USBD_GetString+0x42>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80065de:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80065e0:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 80065e8:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 80065ea:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 80065ee:	3302      	adds	r3, #2
 80065f0:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 80065f2:	2c00      	cmp	r4, #0
 80065f4:	d1f5      	bne.n	80065e2 <USBD_GetString+0x2e>
}
 80065f6:	bc70      	pop	{r4, r5, r6}
 80065f8:	4770      	bx	lr
 80065fa:	4770      	bx	lr
    while (*buf != '\0')
 80065fc:	2302      	movs	r3, #2
 80065fe:	e7e8      	b.n	80065d2 <USBD_GetString+0x1e>

08006600 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006604:	2502      	movs	r5, #2
{
 8006606:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8006608:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800660c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800660e:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006612:	f000 fad3 	bl	8006bbc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006616:	2000      	movs	r0, #0
 8006618:	bd38      	pop	{r3, r4, r5, pc}
 800661a:	bf00      	nop

0800661c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800661c:	b510      	push	{r4, lr}
 800661e:	460c      	mov	r4, r1
 8006620:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006622:	2100      	movs	r1, #0
 8006624:	4622      	mov	r2, r4
 8006626:	f000 fac9 	bl	8006bbc <USBD_LL_Transmit>

  return USBD_OK;
}
 800662a:	2000      	movs	r0, #0
 800662c:	bd10      	pop	{r4, pc}
 800662e:	bf00      	nop

08006630 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006634:	2503      	movs	r5, #3
{
 8006636:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8006638:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800663c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800663e:	f8c0 526c 	str.w	r5, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006642:	f000 fac9 	bl	8006bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006646:	2000      	movs	r0, #0
 8006648:	bd38      	pop	{r3, r4, r5, pc}
 800664a:	bf00      	nop

0800664c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800664c:	b510      	push	{r4, lr}
 800664e:	460c      	mov	r4, r1
 8006650:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006652:	2100      	movs	r1, #0
 8006654:	4622      	mov	r2, r4
 8006656:	f000 fabf 	bl	8006bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800665a:	2000      	movs	r0, #0
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop

08006660 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8006660:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006662:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006664:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006666:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800666a:	4619      	mov	r1, r3
 800666c:	461a      	mov	r2, r3
 800666e:	f000 faa5 	bl	8006bbc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006672:	2000      	movs	r0, #0
 8006674:	bd08      	pop	{r3, pc}
 8006676:	bf00      	nop

08006678 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8006678:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800667a:	2205      	movs	r2, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800667c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800667e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006682:	4619      	mov	r1, r3
 8006684:	461a      	mov	r2, r3
 8006686:	f000 faa7 	bl	8006bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800668a:	2000      	movs	r0, #0
 800668c:	bd08      	pop	{r3, pc}
 800668e:	bf00      	nop

08006690 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006692:	2200      	movs	r2, #0
 8006694:	4917      	ldr	r1, [pc, #92]	; (80066f4 <MX_USB_DEVICE_Init+0x64>)
 8006696:	4818      	ldr	r0, [pc, #96]	; (80066f8 <MX_USB_DEVICE_Init+0x68>)
 8006698:	f7ff fbd6 	bl	8005e48 <USBD_Init>
 800669c:	b970      	cbnz	r0, 80066bc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800669e:	4917      	ldr	r1, [pc, #92]	; (80066fc <MX_USB_DEVICE_Init+0x6c>)
 80066a0:	4815      	ldr	r0, [pc, #84]	; (80066f8 <MX_USB_DEVICE_Init+0x68>)
 80066a2:	f7ff fbe7 	bl	8005e74 <USBD_RegisterClass>
 80066a6:	b988      	cbnz	r0, 80066cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066a8:	4915      	ldr	r1, [pc, #84]	; (8006700 <MX_USB_DEVICE_Init+0x70>)
 80066aa:	4813      	ldr	r0, [pc, #76]	; (80066f8 <MX_USB_DEVICE_Init+0x68>)
 80066ac:	f7ff fb82 	bl	8005db4 <USBD_CDC_RegisterInterface>
 80066b0:	b9a0      	cbnz	r0, 80066dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066b2:	4811      	ldr	r0, [pc, #68]	; (80066f8 <MX_USB_DEVICE_Init+0x68>)
 80066b4:	f7ff fbe6 	bl	8005e84 <USBD_Start>
 80066b8:	b9b8      	cbnz	r0, 80066ea <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066ba:	bd08      	pop	{r3, pc}
    Error_Handler();
 80066bc:	f7fb fd08 	bl	80020d0 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066c0:	490e      	ldr	r1, [pc, #56]	; (80066fc <MX_USB_DEVICE_Init+0x6c>)
 80066c2:	480d      	ldr	r0, [pc, #52]	; (80066f8 <MX_USB_DEVICE_Init+0x68>)
 80066c4:	f7ff fbd6 	bl	8005e74 <USBD_RegisterClass>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d0ed      	beq.n	80066a8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80066cc:	f7fb fd00 	bl	80020d0 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066d0:	490b      	ldr	r1, [pc, #44]	; (8006700 <MX_USB_DEVICE_Init+0x70>)
 80066d2:	4809      	ldr	r0, [pc, #36]	; (80066f8 <MX_USB_DEVICE_Init+0x68>)
 80066d4:	f7ff fb6e 	bl	8005db4 <USBD_CDC_RegisterInterface>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0ea      	beq.n	80066b2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80066dc:	f7fb fcf8 	bl	80020d0 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066e0:	4805      	ldr	r0, [pc, #20]	; (80066f8 <MX_USB_DEVICE_Init+0x68>)
 80066e2:	f7ff fbcf 	bl	8005e84 <USBD_Start>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d0e7      	beq.n	80066ba <MX_USB_DEVICE_Init+0x2a>
}
 80066ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80066ee:	f7fb bcef 	b.w	80020d0 <Error_Handler>
 80066f2:	bf00      	nop
 80066f4:	200003ec 	.word	0x200003ec
 80066f8:	20000998 	.word	0x20000998
 80066fc:	200002cc 	.word	0x200002cc
 8006700:	200003dc 	.word	0x200003dc

08006704 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006704:	2000      	movs	r0, #0
 8006706:	4770      	bx	lr

08006708 <CDC_Init_FS>:
{
 8006708:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800670a:	4c06      	ldr	r4, [pc, #24]	; (8006724 <CDC_Init_FS+0x1c>)
 800670c:	2200      	movs	r2, #0
 800670e:	4620      	mov	r0, r4
 8006710:	4905      	ldr	r1, [pc, #20]	; (8006728 <CDC_Init_FS+0x20>)
 8006712:	f7ff fb57 	bl	8005dc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006716:	4620      	mov	r0, r4
 8006718:	4904      	ldr	r1, [pc, #16]	; (800672c <CDC_Init_FS+0x24>)
 800671a:	f7ff fb5b 	bl	8005dd4 <USBD_CDC_SetRxBuffer>
}
 800671e:	2000      	movs	r0, #0
 8006720:	bd10      	pop	{r4, pc}
 8006722:	bf00      	nop
 8006724:	20000998 	.word	0x20000998
 8006728:	2000101c 	.word	0x2000101c
 800672c:	20000c34 	.word	0x20000c34

08006730 <CDC_Control_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006730:	2821      	cmp	r0, #33	; 0x21
 8006732:	d106      	bne.n	8006742 <CDC_Control_FS+0x12>
    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
        pbuf[1] = 0xc2;
        pbuf[2] = 0x01;
        pbuf[3] = 0x00;
        pbuf[4] = 0x00; // 1 stop bit
 8006734:	2300      	movs	r3, #0
        pbuf[5] = 0x00; // parity none
        pbuf[6] = 0x08; // 8 data bits
 8006736:	2008      	movs	r0, #8
        pbuf[0] = 0x20; // bits/second 115200
 8006738:	4a03      	ldr	r2, [pc, #12]	; (8006748 <CDC_Control_FS+0x18>)
        pbuf[4] = 0x00; // 1 stop bit
 800673a:	710b      	strb	r3, [r1, #4]
        pbuf[5] = 0x00; // parity none
 800673c:	714b      	strb	r3, [r1, #5]
        pbuf[6] = 0x08; // 8 data bits
 800673e:	7188      	strb	r0, [r1, #6]
        pbuf[0] = 0x20; // bits/second 115200
 8006740:	600a      	str	r2, [r1, #0]
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006742:	2000      	movs	r0, #0
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	0001c220 	.word	0x0001c220

0800674c <CDC_Receive_FS>:
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
  /* USER CODE BEGIN 6 */
  uint32_t i=0;

  while(i<*Len)
 800674c:	680a      	ldr	r2, [r1, #0]
{
 800674e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006752:	4605      	mov	r5, r0
  while(i<*Len)
 8006754:	b1d2      	cbz	r2, 800678c <CDC_Receive_FS+0x40>
 8006756:	460e      	mov	r6, r1
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 8006758:	f04f 0801 	mov.w	r8, #1
 800675c:	4f17      	ldr	r7, [pc, #92]	; (80067bc <CDC_Receive_FS+0x70>)
 800675e:	f100 39ff 	add.w	r9, r0, #4294967295
 8006762:	e008      	b.n	8006776 <CDC_Receive_FS+0x2a>
 8006764:	280d      	cmp	r0, #13
 8006766:	d00b      	beq.n	8006780 <CDC_Receive_FS+0x34>
	  Write_to_circ_buffer(Buf[i]);
 8006768:	f7fb f9e6 	bl	8001b38 <Write_to_circ_buffer>
  while(i<*Len)
 800676c:	3402      	adds	r4, #2
 800676e:	6832      	ldr	r2, [r6, #0]
 8006770:	1b64      	subs	r4, r4, r5
 8006772:	42a2      	cmp	r2, r4
 8006774:	d909      	bls.n	800678a <CDC_Receive_FS+0x3e>
	  Write_to_circ_buffer(Buf[i]);
 8006776:	464c      	mov	r4, r9
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 8006778:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 800677c:	280a      	cmp	r0, #10
 800677e:	d1f1      	bne.n	8006764 <CDC_Receive_FS+0x18>
 8006780:	f887 8000 	strb.w	r8, [r7]
 8006784:	f899 0000 	ldrb.w	r0, [r9]
 8006788:	e7ee      	b.n	8006768 <CDC_Receive_FS+0x1c>
 800678a:	b292      	uxth	r2, r2
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800678c:	4c0c      	ldr	r4, [pc, #48]	; (80067c0 <CDC_Receive_FS+0x74>)
 800678e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 8006792:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006796:	b933      	cbnz	r3, 80067a6 <CDC_Receive_FS+0x5a>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006798:	4629      	mov	r1, r5
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff fb12 	bl	8005dc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067a0:	4620      	mov	r0, r4
 80067a2:	f7ff fb1d 	bl	8005de0 <USBD_CDC_TransmitPacket>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067a6:	4629      	mov	r1, r5
 80067a8:	4805      	ldr	r0, [pc, #20]	; (80067c0 <CDC_Receive_FS+0x74>)
 80067aa:	f7ff fb13 	bl	8005dd4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067ae:	4804      	ldr	r0, [pc, #16]	; (80067c0 <CDC_Receive_FS+0x74>)
 80067b0:	f7ff fb30 	bl	8005e14 <USBD_CDC_ReceivePacket>
}
 80067b4:	2000      	movs	r0, #0
 80067b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ba:	bf00      	nop
 80067bc:	200008c3 	.word	0x200008c3
 80067c0:	20000998 	.word	0x20000998

080067c4 <CDC_Transmit_FS>:
{
 80067c4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067c6:	4c09      	ldr	r4, [pc, #36]	; (80067ec <CDC_Transmit_FS+0x28>)
 80067c8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 80067cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067d0:	b10b      	cbz	r3, 80067d6 <CDC_Transmit_FS+0x12>
  /* USER CODE END 7 */
  return result;
}
 80067d2:	2001      	movs	r0, #1
 80067d4:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067d6:	460a      	mov	r2, r1
 80067d8:	4601      	mov	r1, r0
 80067da:	4620      	mov	r0, r4
 80067dc:	f7ff faf2 	bl	8005dc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067e0:	4620      	mov	r0, r4
}
 80067e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067e6:	f7ff bafb 	b.w	8005de0 <USBD_CDC_TransmitPacket>
 80067ea:	bf00      	nop
 80067ec:	20000998 	.word	0x20000998

080067f0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80067f0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80067f2:	4801      	ldr	r0, [pc, #4]	; (80067f8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80067f4:	800b      	strh	r3, [r1, #0]
}
 80067f6:	4770      	bx	lr
 80067f8:	20000408 	.word	0x20000408

080067fc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067fc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80067fe:	4801      	ldr	r0, [pc, #4]	; (8006804 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006800:	800b      	strh	r3, [r1, #0]
}
 8006802:	4770      	bx	lr
 8006804:	2000041c 	.word	0x2000041c

08006808 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006808:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800680a:	4c04      	ldr	r4, [pc, #16]	; (800681c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800680c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800680e:	4804      	ldr	r0, [pc, #16]	; (8006820 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006810:	4621      	mov	r1, r4
 8006812:	f7ff fecf 	bl	80065b4 <USBD_GetString>
  return USBD_StrDesc;
}
 8006816:	4620      	mov	r0, r4
 8006818:	bd10      	pop	{r4, pc}
 800681a:	bf00      	nop
 800681c:	20001404 	.word	0x20001404
 8006820:	08009ad8 	.word	0x08009ad8

08006824 <USBD_FS_ProductStrDescriptor>:
{
 8006824:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006826:	4c04      	ldr	r4, [pc, #16]	; (8006838 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006828:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800682a:	4804      	ldr	r0, [pc, #16]	; (800683c <USBD_FS_ProductStrDescriptor+0x18>)
 800682c:	4621      	mov	r1, r4
 800682e:	f7ff fec1 	bl	80065b4 <USBD_GetString>
}
 8006832:	4620      	mov	r0, r4
 8006834:	bd10      	pop	{r4, pc}
 8006836:	bf00      	nop
 8006838:	20001404 	.word	0x20001404
 800683c:	08009ae8 	.word	0x08009ae8

08006840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006840:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006842:	4c04      	ldr	r4, [pc, #16]	; (8006854 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8006844:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006846:	4804      	ldr	r0, [pc, #16]	; (8006858 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006848:	4621      	mov	r1, r4
 800684a:	f7ff feb3 	bl	80065b4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800684e:	4620      	mov	r0, r4
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	20001404 	.word	0x20001404
 8006858:	08009af4 	.word	0x08009af4

0800685c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800685c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800685e:	4c04      	ldr	r4, [pc, #16]	; (8006870 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006860:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006862:	4804      	ldr	r0, [pc, #16]	; (8006874 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006864:	4621      	mov	r1, r4
 8006866:	f7ff fea5 	bl	80065b4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800686a:	4620      	mov	r0, r4
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop
 8006870:	20001404 	.word	0x20001404
 8006874:	08009b00 	.word	0x08009b00

08006878 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006878:	201a      	movs	r0, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800687a:	4a3e      	ldr	r2, [pc, #248]	; (8006974 <USBD_FS_SerialStrDescriptor+0xfc>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800687c:	4b3e      	ldr	r3, [pc, #248]	; (8006978 <USBD_FS_SerialStrDescriptor+0x100>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800687e:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8006880:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8006882:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 8006884:	18d3      	adds	r3, r2, r3
 8006886:	d101      	bne.n	800688c <USBD_FS_SerialStrDescriptor+0x14>
}
 8006888:	483c      	ldr	r0, [pc, #240]	; (800697c <USBD_FS_SerialStrDescriptor+0x104>)
 800688a:	4770      	bx	lr
{
 800688c:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800688e:	2400      	movs	r4, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006890:	4a3b      	ldr	r2, [pc, #236]	; (8006980 <USBD_FS_SerialStrDescriptor+0x108>)
    if (((value >> 28)) < 0xA)
 8006892:	0f18      	lsrs	r0, r3, #28
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006894:	6811      	ldr	r1, [r2, #0]
    if (((value >> 28)) < 0xA)
 8006896:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800689a:	4a38      	ldr	r2, [pc, #224]	; (800697c <USBD_FS_SerialStrDescriptor+0x104>)
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800689c:	bf2c      	ite	cs
 800689e:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068a0:	3030      	addcc	r0, #48	; 0x30
 80068a2:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 80068a4:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80068a8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068aa:	bf8c      	ite	hi
 80068ac:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068ae:	3030      	addls	r0, #48	; 0x30
 80068b0:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 80068b2:	f3c3 5003 	ubfx	r0, r3, #20, #4
 80068b6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068b8:	bf8c      	ite	hi
 80068ba:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068bc:	3030      	addls	r0, #48	; 0x30
 80068be:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 80068c0:	f3c3 4003 	ubfx	r0, r3, #16, #4
 80068c4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068c6:	bf8c      	ite	hi
 80068c8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068ca:	3030      	addls	r0, #48	; 0x30
 80068cc:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 80068ce:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80068d2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068d4:	bf8c      	ite	hi
 80068d6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068d8:	3030      	addls	r0, #48	; 0x30
 80068da:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 80068dc:	f3c3 2003 	ubfx	r0, r3, #8, #4
 80068e0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068e2:	bf8c      	ite	hi
 80068e4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068e6:	3030      	addls	r0, #48	; 0x30
 80068e8:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 80068ea:	f3c3 1003 	ubfx	r0, r3, #4, #4
 80068ee:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068f0:	bf8c      	ite	hi
 80068f2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80068f4:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 80068f6:	70d4      	strb	r4, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 80068f8:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 80068fa:	2400      	movs	r4, #0
 80068fc:	2000      	movs	r0, #0
 80068fe:	7154      	strb	r4, [r2, #5]
 8006900:	73d0      	strb	r0, [r2, #15]
 8006902:	2400      	movs	r4, #0
 8006904:	2000      	movs	r0, #0
 8006906:	71d4      	strb	r4, [r2, #7]
 8006908:	7450      	strb	r0, [r2, #17]
 800690a:	2400      	movs	r4, #0
 800690c:	2000      	movs	r0, #0
 800690e:	7254      	strb	r4, [r2, #9]
 8006910:	74d0      	strb	r0, [r2, #19]
 8006912:	2400      	movs	r4, #0
 8006914:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800691c:	bf94      	ite	ls
 800691e:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006920:	3337      	addhi	r3, #55	; 0x37
 8006922:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8006924:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 8006928:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800692c:	bf2c      	ite	cs
 800692e:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006930:	3330      	addcc	r3, #48	; 0x30
 8006932:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 8006934:	f3c1 6303 	ubfx	r3, r1, #24, #4
 8006938:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800693a:	bf8c      	ite	hi
 800693c:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800693e:	3330      	addls	r3, #48	; 0x30
 8006940:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 8006942:	f3c1 5303 	ubfx	r3, r1, #20, #4
 8006946:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006948:	bf8c      	ite	hi
 800694a:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800694c:	3330      	addls	r3, #48	; 0x30
 800694e:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 8006950:	f3c1 4303 	ubfx	r3, r1, #16, #4
 8006954:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006956:	bf94      	ite	ls
 8006958:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800695a:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800695c:	72d4      	strb	r4, [r2, #11]
 800695e:	7550      	strb	r0, [r2, #21]
 8006960:	2400      	movs	r4, #0
 8006962:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006964:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	75d0      	strb	r0, [r2, #23]
 800696a:	7354      	strb	r4, [r2, #13]
 800696c:	7653      	strb	r3, [r2, #25]
}
 800696e:	4803      	ldr	r0, [pc, #12]	; (800697c <USBD_FS_SerialStrDescriptor+0x104>)
 8006970:	bc10      	pop	{r4}
 8006972:	4770      	bx	lr
 8006974:	1ff80050 	.word	0x1ff80050
 8006978:	1ff80058 	.word	0x1ff80058
 800697c:	20000420 	.word	0x20000420
 8006980:	1ff80054 	.word	0x1ff80054

08006984 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 8006986:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8006988:	6853      	ldr	r3, [r2, #4]
 800698a:	bf0c      	ite	eq
 800698c:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8006990:	f023 0301 	bicne.w	r3, r3, #1
 8006994:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 8006996:	4770      	bx	lr
 8006998:	40010000 	.word	0x40010000

0800699c <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <HAL_PCD_MspInit+0x3c>)
 800699e:	6802      	ldr	r2, [r0, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d000      	beq.n	80069a6 <HAL_PCD_MspInit+0xa>
 80069a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80069a6:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 80069aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
{
 80069ac:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 80069ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80069b2:	6258      	str	r0, [r3, #36]	; 0x24
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80069b6:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80069b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069bc:	9301      	str	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 80069be:	2200      	movs	r2, #0
 80069c0:	2101      	movs	r1, #1
 80069c2:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80069c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 80069c6:	f7fb fd8d 	bl	80024e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80069ca:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80069cc:	b003      	add	sp, #12
 80069ce:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80069d2:	f7fb bdbf 	b.w	8002554 <HAL_NVIC_EnableIRQ>
 80069d6:	bf00      	nop
 80069d8:	40005c00 	.word	0x40005c00

080069dc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069dc:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80069e0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80069e4:	f7ff ba66 	b.w	8005eb4 <USBD_LL_SetupStage>

080069e8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069e8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80069ec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80069f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80069f4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80069f8:	f7ff ba8a 	b.w	8005f10 <USBD_LL_DataOutStage>

080069fc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069fc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006a00:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a06:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006a0a:	f7ff babf 	b.w	8005f8c <USBD_LL_DataInStage>
 8006a0e:	bf00      	nop

08006a10 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a10:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006a14:	f7ff bb58 	b.w	80060c8 <USBD_LL_SOF>

08006a18 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a18:	6883      	ldr	r3, [r0, #8]
{
 8006a1a:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a1c:	2b02      	cmp	r3, #2
{
 8006a1e:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a20:	d001      	beq.n	8006a26 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006a22:	f7fb fb55 	bl	80020d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a26:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	f7ff fb36 	bl	800609c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a30:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8006a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a38:	f7ff bb08 	b.w	800604c <USBD_LL_Reset>

08006a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a40:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006a44:	f7ff fb2e 	bl	80060a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a48:	69a3      	ldr	r3, [r4, #24]
 8006a4a:	b123      	cbz	r3, 8006a56 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a4c:	4a02      	ldr	r2, [pc, #8]	; (8006a58 <HAL_PCD_SuspendCallback+0x1c>)
 8006a4e:	6913      	ldr	r3, [r2, #16]
 8006a50:	f043 0306 	orr.w	r3, r3, #6
 8006a54:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a56:	bd10      	pop	{r4, pc}
 8006a58:	e000ed00 	.word	0xe000ed00

08006a5c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a5c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8006a60:	f7ff bb2a 	b.w	80060b8 <USBD_LL_Resume>

08006a64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006a68:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a6a:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006a6c:	2108      	movs	r1, #8
  hpcd_USB_FS.pData = pdev;
 8006a6e:	481c      	ldr	r0, [pc, #112]	; (8006ae0 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8006a70:	4d1c      	ldr	r5, [pc, #112]	; (8006ae4 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.pData = pdev;
 8006a72:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006a76:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006a7a:	e9c0 5100 	strd	r5, r1, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006a7e:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a80:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a82:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006a84:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006a86:	f7fc f841 	bl	8002b0c <HAL_PCD_Init>
 8006a8a:	bb30      	cbnz	r0, 8006ada <USBD_LL_Init+0x76>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2318      	movs	r3, #24
 8006a90:	4611      	mov	r1, r2
 8006a92:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8006a96:	f7fc ff75 	bl	8003984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006a9a:	2358      	movs	r3, #88	; 0x58
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2180      	movs	r1, #128	; 0x80
 8006aa0:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8006aa4:	f7fc ff6e 	bl	8003984 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006aa8:	23c0      	movs	r3, #192	; 0xc0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2181      	movs	r1, #129	; 0x81
 8006aae:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8006ab2:	f7fc ff67 	bl	8003984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006ab6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006aba:	2200      	movs	r2, #0
 8006abc:	2101      	movs	r1, #1
 8006abe:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8006ac2:	f7fc ff5f 	bl	8003984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aca:	2200      	movs	r2, #0
 8006acc:	2182      	movs	r1, #130	; 0x82
 8006ace:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 8006ad2:	f7fc ff57 	bl	8003984 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8006ada:	f7fb faf9 	bl	80020d0 <Error_Handler>
 8006ade:	e7d5      	b.n	8006a8c <USBD_LL_Init+0x28>
 8006ae0:	20001604 	.word	0x20001604
 8006ae4:	40005c00 	.word	0x40005c00

08006ae8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ae8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8006aea:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006aee:	f7fc f867 	bl	8002bc0 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006af2:	2803      	cmp	r0, #3
 8006af4:	bf96      	itet	ls
 8006af6:	4b02      	ldrls	r3, [pc, #8]	; (8006b00 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8006af8:	2002      	movhi	r0, #2
 8006afa:	5c18      	ldrbls	r0, [r3, r0]
}
 8006afc:	bd08      	pop	{r3, pc}
 8006afe:	bf00      	nop
 8006b00:	08009b10 	.word	0x08009b10

08006b04 <USBD_LL_OpenEP>:
{
 8006b04:	b510      	push	{r4, lr}
 8006b06:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b08:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
{
 8006b0c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b0e:	4623      	mov	r3, r4
 8006b10:	f7fc fe24 	bl	800375c <HAL_PCD_EP_Open>
  switch (hal_status)
 8006b14:	2803      	cmp	r0, #3
 8006b16:	bf96      	itet	ls
 8006b18:	4b01      	ldrls	r3, [pc, #4]	; (8006b20 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b1a:	2002      	movhi	r0, #2
 8006b1c:	5c18      	ldrbls	r0, [r3, r0]
}
 8006b1e:	bd10      	pop	{r4, pc}
 8006b20:	08009b10 	.word	0x08009b10

08006b24 <USBD_LL_CloseEP>:
{
 8006b24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b26:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b2a:	f7fc fe4b 	bl	80037c4 <HAL_PCD_EP_Close>
  switch (hal_status)
 8006b2e:	2803      	cmp	r0, #3
 8006b30:	bf96      	itet	ls
 8006b32:	4b02      	ldrls	r3, [pc, #8]	; (8006b3c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b34:	2002      	movhi	r0, #2
 8006b36:	5c18      	ldrbls	r0, [r3, r0]
}
 8006b38:	bd08      	pop	{r3, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08009b10 	.word	0x08009b10

08006b40 <USBD_LL_StallEP>:
{
 8006b40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b42:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b46:	f7fc fead 	bl	80038a4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006b4a:	2803      	cmp	r0, #3
 8006b4c:	bf96      	itet	ls
 8006b4e:	4b02      	ldrls	r3, [pc, #8]	; (8006b58 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b50:	2002      	movhi	r0, #2
 8006b52:	5c18      	ldrbls	r0, [r3, r0]
}
 8006b54:	bd08      	pop	{r3, pc}
 8006b56:	bf00      	nop
 8006b58:	08009b10 	.word	0x08009b10

08006b5c <USBD_LL_ClearStallEP>:
{
 8006b5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b5e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006b62:	f7fc fed5 	bl	8003910 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006b66:	2803      	cmp	r0, #3
 8006b68:	bf96      	itet	ls
 8006b6a:	4b02      	ldrls	r3, [pc, #8]	; (8006b74 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b6c:	2002      	movhi	r0, #2
 8006b6e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006b70:	bd08      	pop	{r3, pc}
 8006b72:	bf00      	nop
 8006b74:	08009b10 	.word	0x08009b10

08006b78 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006b78:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b7a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 8006b7e:	d406      	bmi.n	8006b8e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006b84:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006b88:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8006b8c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b8e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006b92:	3101      	adds	r1, #1
 8006b94:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006b98:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006b9c:	7888      	ldrb	r0, [r1, #2]
 8006b9e:	4770      	bx	lr

08006ba0 <USBD_LL_SetUSBAddress>:
{
 8006ba0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ba2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006ba6:	f7fc fdc5 	bl	8003734 <HAL_PCD_SetAddress>
  switch (hal_status)
 8006baa:	2803      	cmp	r0, #3
 8006bac:	bf96      	itet	ls
 8006bae:	4b02      	ldrls	r3, [pc, #8]	; (8006bb8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bb0:	2002      	movhi	r0, #2
 8006bb2:	5c18      	ldrbls	r0, [r3, r0]
}
 8006bb4:	bd08      	pop	{r3, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08009b10 	.word	0x08009b10

08006bbc <USBD_LL_Transmit>:
{
 8006bbc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006bbe:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006bc2:	f7fc fe51 	bl	8003868 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8006bc6:	2803      	cmp	r0, #3
 8006bc8:	bf96      	itet	ls
 8006bca:	4b02      	ldrls	r3, [pc, #8]	; (8006bd4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006bcc:	2002      	movhi	r0, #2
 8006bce:	5c18      	ldrbls	r0, [r3, r0]
}
 8006bd0:	bd08      	pop	{r3, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08009b10 	.word	0x08009b10

08006bd8 <USBD_LL_PrepareReceive>:
{
 8006bd8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006bda:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006bde:	f7fc fe21 	bl	8003824 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8006be2:	2803      	cmp	r0, #3
 8006be4:	bf96      	itet	ls
 8006be6:	4b02      	ldrls	r3, [pc, #8]	; (8006bf0 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006be8:	2002      	movhi	r0, #2
 8006bea:	5c18      	ldrbls	r0, [r3, r0]
}
 8006bec:	bd08      	pop	{r3, pc}
 8006bee:	bf00      	nop
 8006bf0:	08009b10 	.word	0x08009b10

08006bf4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006bf4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8006bf8:	f7fc be2c 	b.w	8003854 <HAL_PCD_EP_GetRxCount>

08006bfc <USBD_static_malloc>:
}
 8006bfc:	4800      	ldr	r0, [pc, #0]	; (8006c00 <USBD_static_malloc+0x4>)
 8006bfe:	4770      	bx	lr
 8006c00:	20000638 	.word	0x20000638

08006c04 <USBD_static_free>:
}
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop

08006c08 <atof>:
 8006c08:	2100      	movs	r1, #0
 8006c0a:	f000 be69 	b.w	80078e0 <strtod>
	...

08006c10 <__errno>:
 8006c10:	4b01      	ldr	r3, [pc, #4]	; (8006c18 <__errno+0x8>)
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	2000043c 	.word	0x2000043c

08006c1c <__libc_init_array>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	2600      	movs	r6, #0
 8006c20:	4d0c      	ldr	r5, [pc, #48]	; (8006c54 <__libc_init_array+0x38>)
 8006c22:	4c0d      	ldr	r4, [pc, #52]	; (8006c58 <__libc_init_array+0x3c>)
 8006c24:	1b64      	subs	r4, r4, r5
 8006c26:	10a4      	asrs	r4, r4, #2
 8006c28:	42a6      	cmp	r6, r4
 8006c2a:	d109      	bne.n	8006c40 <__libc_init_array+0x24>
 8006c2c:	f002 fef0 	bl	8009a10 <_init>
 8006c30:	2600      	movs	r6, #0
 8006c32:	4d0a      	ldr	r5, [pc, #40]	; (8006c5c <__libc_init_array+0x40>)
 8006c34:	4c0a      	ldr	r4, [pc, #40]	; (8006c60 <__libc_init_array+0x44>)
 8006c36:	1b64      	subs	r4, r4, r5
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	42a6      	cmp	r6, r4
 8006c3c:	d105      	bne.n	8006c4a <__libc_init_array+0x2e>
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
 8006c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c44:	4798      	blx	r3
 8006c46:	3601      	adds	r6, #1
 8006c48:	e7ee      	b.n	8006c28 <__libc_init_array+0xc>
 8006c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4e:	4798      	blx	r3
 8006c50:	3601      	adds	r6, #1
 8006c52:	e7f2      	b.n	8006c3a <__libc_init_array+0x1e>
 8006c54:	08009fb8 	.word	0x08009fb8
 8006c58:	08009fb8 	.word	0x08009fb8
 8006c5c:	08009fb8 	.word	0x08009fb8
 8006c60:	08009fbc 	.word	0x08009fbc

08006c64 <memcpy>:
 8006c64:	440a      	add	r2, r1
 8006c66:	4291      	cmp	r1, r2
 8006c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c6c:	d100      	bne.n	8006c70 <memcpy+0xc>
 8006c6e:	4770      	bx	lr
 8006c70:	b510      	push	{r4, lr}
 8006c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c76:	4291      	cmp	r1, r2
 8006c78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7c:	d1f9      	bne.n	8006c72 <memcpy+0xe>
 8006c7e:	bd10      	pop	{r4, pc}

08006c80 <memset>:
 8006c80:	4603      	mov	r3, r0
 8006c82:	4402      	add	r2, r0
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d100      	bne.n	8006c8a <memset+0xa>
 8006c88:	4770      	bx	lr
 8006c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8e:	e7f9      	b.n	8006c84 <memset+0x4>

08006c90 <stpcpy>:
 8006c90:	4603      	mov	r3, r0
 8006c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f803 2b01 	strb.w	r2, [r3], #1
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	d1f8      	bne.n	8006c92 <stpcpy+0x2>
 8006ca0:	4770      	bx	lr

08006ca2 <strcpy>:
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ca8:	f803 2b01 	strb.w	r2, [r3], #1
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	d1f9      	bne.n	8006ca4 <strcpy+0x2>
 8006cb0:	4770      	bx	lr

08006cb2 <sulp>:
 8006cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	4690      	mov	r8, r2
 8006cba:	f001 fd99 	bl	80087f0 <__ulp>
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	f1b8 0f00 	cmp.w	r8, #0
 8006cc6:	d011      	beq.n	8006cec <sulp+0x3a>
 8006cc8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006ccc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dd0b      	ble.n	8006cec <sulp+0x3a>
 8006cd4:	2400      	movs	r4, #0
 8006cd6:	051b      	lsls	r3, r3, #20
 8006cd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cdc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	f7f9 fc1a 	bl	800051c <__aeabi_dmul>
 8006ce8:	4604      	mov	r4, r0
 8006cea:	460d      	mov	r5, r1
 8006cec:	4620      	mov	r0, r4
 8006cee:	4629      	mov	r1, r5
 8006cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf4:	0000      	movs	r0, r0
	...

08006cf8 <_strtod_l>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	469b      	mov	fp, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	b0a1      	sub	sp, #132	; 0x84
 8006d02:	931c      	str	r3, [sp, #112]	; 0x70
 8006d04:	4ba1      	ldr	r3, [pc, #644]	; (8006f8c <_strtod_l+0x294>)
 8006d06:	4682      	mov	sl, r0
 8006d08:	681f      	ldr	r7, [r3, #0]
 8006d0a:	460e      	mov	r6, r1
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d10:	f7f9 fa40 	bl	8000194 <strlen>
 8006d14:	f04f 0800 	mov.w	r8, #0
 8006d18:	4604      	mov	r4, r0
 8006d1a:	f04f 0900 	mov.w	r9, #0
 8006d1e:	961b      	str	r6, [sp, #108]	; 0x6c
 8006d20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	2a2b      	cmp	r2, #43	; 0x2b
 8006d26:	d04c      	beq.n	8006dc2 <_strtod_l+0xca>
 8006d28:	d83a      	bhi.n	8006da0 <_strtod_l+0xa8>
 8006d2a:	2a0d      	cmp	r2, #13
 8006d2c:	d833      	bhi.n	8006d96 <_strtod_l+0x9e>
 8006d2e:	2a08      	cmp	r2, #8
 8006d30:	d833      	bhi.n	8006d9a <_strtod_l+0xa2>
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d03d      	beq.n	8006db2 <_strtod_l+0xba>
 8006d36:	2300      	movs	r3, #0
 8006d38:	930c      	str	r3, [sp, #48]	; 0x30
 8006d3a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006d3c:	782b      	ldrb	r3, [r5, #0]
 8006d3e:	2b30      	cmp	r3, #48	; 0x30
 8006d40:	f040 80af 	bne.w	8006ea2 <_strtod_l+0x1aa>
 8006d44:	786b      	ldrb	r3, [r5, #1]
 8006d46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d4a:	2b58      	cmp	r3, #88	; 0x58
 8006d4c:	d16c      	bne.n	8006e28 <_strtod_l+0x130>
 8006d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d50:	4650      	mov	r0, sl
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	ab1c      	add	r3, sp, #112	; 0x70
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	4a8d      	ldr	r2, [pc, #564]	; (8006f90 <_strtod_l+0x298>)
 8006d5a:	f8cd b008 	str.w	fp, [sp, #8]
 8006d5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d60:	a91b      	add	r1, sp, #108	; 0x6c
 8006d62:	f000 febd 	bl	8007ae0 <__gethex>
 8006d66:	f010 0607 	ands.w	r6, r0, #7
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	d005      	beq.n	8006d7a <_strtod_l+0x82>
 8006d6e:	2e06      	cmp	r6, #6
 8006d70:	d129      	bne.n	8006dc6 <_strtod_l+0xce>
 8006d72:	2300      	movs	r3, #0
 8006d74:	3501      	adds	r5, #1
 8006d76:	951b      	str	r5, [sp, #108]	; 0x6c
 8006d78:	930c      	str	r3, [sp, #48]	; 0x30
 8006d7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8596 	bne.w	80078ae <_strtod_l+0xbb6>
 8006d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d84:	b1d3      	cbz	r3, 8006dbc <_strtod_l+0xc4>
 8006d86:	4642      	mov	r2, r8
 8006d88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	b021      	add	sp, #132	; 0x84
 8006d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d96:	2a20      	cmp	r2, #32
 8006d98:	d1cd      	bne.n	8006d36 <_strtod_l+0x3e>
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d9e:	e7bf      	b.n	8006d20 <_strtod_l+0x28>
 8006da0:	2a2d      	cmp	r2, #45	; 0x2d
 8006da2:	d1c8      	bne.n	8006d36 <_strtod_l+0x3e>
 8006da4:	2201      	movs	r2, #1
 8006da6:	920c      	str	r2, [sp, #48]	; 0x30
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	921b      	str	r2, [sp, #108]	; 0x6c
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1c3      	bne.n	8006d3a <_strtod_l+0x42>
 8006db2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006db4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f040 8577 	bne.w	80078aa <_strtod_l+0xbb2>
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	e7e4      	b.n	8006d8c <_strtod_l+0x94>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	e7ef      	b.n	8006da6 <_strtod_l+0xae>
 8006dc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006dc8:	b13a      	cbz	r2, 8006dda <_strtod_l+0xe2>
 8006dca:	2135      	movs	r1, #53	; 0x35
 8006dcc:	a81e      	add	r0, sp, #120	; 0x78
 8006dce:	f001 fe13 	bl	80089f8 <__copybits>
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006dd6:	f001 f9db 	bl	8008190 <_Bfree>
 8006dda:	3e01      	subs	r6, #1
 8006ddc:	2e05      	cmp	r6, #5
 8006dde:	d807      	bhi.n	8006df0 <_strtod_l+0xf8>
 8006de0:	e8df f006 	tbb	[pc, r6]
 8006de4:	1d180b0e 	.word	0x1d180b0e
 8006de8:	030e      	.short	0x030e
 8006dea:	f04f 0900 	mov.w	r9, #0
 8006dee:	46c8      	mov	r8, r9
 8006df0:	0721      	lsls	r1, r4, #28
 8006df2:	d5c2      	bpl.n	8006d7a <_strtod_l+0x82>
 8006df4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006df8:	e7bf      	b.n	8006d7a <_strtod_l+0x82>
 8006dfa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006dfe:	e7f7      	b.n	8006df0 <_strtod_l+0xf8>
 8006e00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e02:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8006e06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e12:	e7ed      	b.n	8006df0 <_strtod_l+0xf8>
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006f94 <_strtod_l+0x29c>
 8006e1c:	e7e8      	b.n	8006df0 <_strtod_l+0xf8>
 8006e1e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e22:	f04f 38ff 	mov.w	r8, #4294967295
 8006e26:	e7e3      	b.n	8006df0 <_strtod_l+0xf8>
 8006e28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b30      	cmp	r3, #48	; 0x30
 8006e32:	d0f9      	beq.n	8006e28 <_strtod_l+0x130>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0a0      	beq.n	8006d7a <_strtod_l+0x82>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	9307      	str	r3, [sp, #28]
 8006e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e3e:	220a      	movs	r2, #10
 8006e40:	9308      	str	r3, [sp, #32]
 8006e42:	2300      	movs	r3, #0
 8006e44:	469b      	mov	fp, r3
 8006e46:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006e4a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006e4c:	7805      	ldrb	r5, [r0, #0]
 8006e4e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006e52:	b2d9      	uxtb	r1, r3
 8006e54:	2909      	cmp	r1, #9
 8006e56:	d926      	bls.n	8006ea6 <_strtod_l+0x1ae>
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	f002 f9c8 	bl	80091f0 <strncmp>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d032      	beq.n	8006eca <_strtod_l+0x1d2>
 8006e64:	2000      	movs	r0, #0
 8006e66:	462b      	mov	r3, r5
 8006e68:	465c      	mov	r4, fp
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	9004      	str	r0, [sp, #16]
 8006e6e:	2b65      	cmp	r3, #101	; 0x65
 8006e70:	d001      	beq.n	8006e76 <_strtod_l+0x17e>
 8006e72:	2b45      	cmp	r3, #69	; 0x45
 8006e74:	d113      	bne.n	8006e9e <_strtod_l+0x1a6>
 8006e76:	b91c      	cbnz	r4, 8006e80 <_strtod_l+0x188>
 8006e78:	9b07      	ldr	r3, [sp, #28]
 8006e7a:	4303      	orrs	r3, r0
 8006e7c:	d099      	beq.n	8006db2 <_strtod_l+0xba>
 8006e7e:	2400      	movs	r4, #0
 8006e80:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006e82:	1c73      	adds	r3, r6, #1
 8006e84:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e86:	7873      	ldrb	r3, [r6, #1]
 8006e88:	2b2b      	cmp	r3, #43	; 0x2b
 8006e8a:	d078      	beq.n	8006f7e <_strtod_l+0x286>
 8006e8c:	2b2d      	cmp	r3, #45	; 0x2d
 8006e8e:	d07b      	beq.n	8006f88 <_strtod_l+0x290>
 8006e90:	2700      	movs	r7, #0
 8006e92:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006e96:	2909      	cmp	r1, #9
 8006e98:	f240 8082 	bls.w	8006fa0 <_strtod_l+0x2a8>
 8006e9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e9e:	2500      	movs	r5, #0
 8006ea0:	e09e      	b.n	8006fe0 <_strtod_l+0x2e8>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e7c9      	b.n	8006e3a <_strtod_l+0x142>
 8006ea6:	f1bb 0f08 	cmp.w	fp, #8
 8006eaa:	bfd5      	itete	le
 8006eac:	9906      	ldrle	r1, [sp, #24]
 8006eae:	9905      	ldrgt	r1, [sp, #20]
 8006eb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006eb8:	f100 0001 	add.w	r0, r0, #1
 8006ebc:	bfd4      	ite	le
 8006ebe:	9306      	strle	r3, [sp, #24]
 8006ec0:	9305      	strgt	r3, [sp, #20]
 8006ec2:	f10b 0b01 	add.w	fp, fp, #1
 8006ec6:	901b      	str	r0, [sp, #108]	; 0x6c
 8006ec8:	e7bf      	b.n	8006e4a <_strtod_l+0x152>
 8006eca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ecc:	191a      	adds	r2, r3, r4
 8006ece:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ed0:	5d1b      	ldrb	r3, [r3, r4]
 8006ed2:	f1bb 0f00 	cmp.w	fp, #0
 8006ed6:	d036      	beq.n	8006f46 <_strtod_l+0x24e>
 8006ed8:	465c      	mov	r4, fp
 8006eda:	9004      	str	r0, [sp, #16]
 8006edc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006ee0:	2a09      	cmp	r2, #9
 8006ee2:	d912      	bls.n	8006f0a <_strtod_l+0x212>
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	e7c2      	b.n	8006e6e <_strtod_l+0x176>
 8006ee8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eea:	3001      	adds	r0, #1
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b30      	cmp	r3, #48	; 0x30
 8006ef4:	d0f8      	beq.n	8006ee8 <_strtod_l+0x1f0>
 8006ef6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006efa:	2a08      	cmp	r2, #8
 8006efc:	f200 84dc 	bhi.w	80078b8 <_strtod_l+0xbc0>
 8006f00:	9004      	str	r0, [sp, #16]
 8006f02:	2000      	movs	r0, #0
 8006f04:	4604      	mov	r4, r0
 8006f06:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006f08:	9208      	str	r2, [sp, #32]
 8006f0a:	3b30      	subs	r3, #48	; 0x30
 8006f0c:	f100 0201 	add.w	r2, r0, #1
 8006f10:	d013      	beq.n	8006f3a <_strtod_l+0x242>
 8006f12:	9904      	ldr	r1, [sp, #16]
 8006f14:	1905      	adds	r5, r0, r4
 8006f16:	4411      	add	r1, r2
 8006f18:	9104      	str	r1, [sp, #16]
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	210a      	movs	r1, #10
 8006f1e:	42aa      	cmp	r2, r5
 8006f20:	d113      	bne.n	8006f4a <_strtod_l+0x252>
 8006f22:	1822      	adds	r2, r4, r0
 8006f24:	2a08      	cmp	r2, #8
 8006f26:	f104 0401 	add.w	r4, r4, #1
 8006f2a:	4404      	add	r4, r0
 8006f2c:	dc1b      	bgt.n	8006f66 <_strtod_l+0x26e>
 8006f2e:	220a      	movs	r2, #10
 8006f30:	9906      	ldr	r1, [sp, #24]
 8006f32:	fb02 3301 	mla	r3, r2, r1, r3
 8006f36:	9306      	str	r3, [sp, #24]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	1c59      	adds	r1, r3, #1
 8006f40:	911b      	str	r1, [sp, #108]	; 0x6c
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	e7ca      	b.n	8006edc <_strtod_l+0x1e4>
 8006f46:	4658      	mov	r0, fp
 8006f48:	e7d3      	b.n	8006ef2 <_strtod_l+0x1fa>
 8006f4a:	2a08      	cmp	r2, #8
 8006f4c:	dc04      	bgt.n	8006f58 <_strtod_l+0x260>
 8006f4e:	9f06      	ldr	r7, [sp, #24]
 8006f50:	434f      	muls	r7, r1
 8006f52:	9706      	str	r7, [sp, #24]
 8006f54:	3201      	adds	r2, #1
 8006f56:	e7e2      	b.n	8006f1e <_strtod_l+0x226>
 8006f58:	1c57      	adds	r7, r2, #1
 8006f5a:	2f10      	cmp	r7, #16
 8006f5c:	bfde      	ittt	le
 8006f5e:	9f05      	ldrle	r7, [sp, #20]
 8006f60:	434f      	mulle	r7, r1
 8006f62:	9705      	strle	r7, [sp, #20]
 8006f64:	e7f6      	b.n	8006f54 <_strtod_l+0x25c>
 8006f66:	2c10      	cmp	r4, #16
 8006f68:	bfdf      	itttt	le
 8006f6a:	220a      	movle	r2, #10
 8006f6c:	9905      	ldrle	r1, [sp, #20]
 8006f6e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f72:	9305      	strle	r3, [sp, #20]
 8006f74:	e7e0      	b.n	8006f38 <_strtod_l+0x240>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2201      	movs	r2, #1
 8006f7a:	9304      	str	r3, [sp, #16]
 8006f7c:	e77c      	b.n	8006e78 <_strtod_l+0x180>
 8006f7e:	2700      	movs	r7, #0
 8006f80:	1cb3      	adds	r3, r6, #2
 8006f82:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f84:	78b3      	ldrb	r3, [r6, #2]
 8006f86:	e784      	b.n	8006e92 <_strtod_l+0x19a>
 8006f88:	2701      	movs	r7, #1
 8006f8a:	e7f9      	b.n	8006f80 <_strtod_l+0x288>
 8006f8c:	08009ca8 	.word	0x08009ca8
 8006f90:	08009b24 	.word	0x08009b24
 8006f94:	7ff00000 	.word	0x7ff00000
 8006f98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	911b      	str	r1, [sp, #108]	; 0x6c
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b30      	cmp	r3, #48	; 0x30
 8006fa2:	d0f9      	beq.n	8006f98 <_strtod_l+0x2a0>
 8006fa4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006fa8:	2908      	cmp	r1, #8
 8006faa:	f63f af78 	bhi.w	8006e9e <_strtod_l+0x1a6>
 8006fae:	f04f 0e0a 	mov.w	lr, #10
 8006fb2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8006fb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fbc:	1c59      	adds	r1, r3, #1
 8006fbe:	911b      	str	r1, [sp, #108]	; 0x6c
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006fc6:	2d09      	cmp	r5, #9
 8006fc8:	d935      	bls.n	8007036 <_strtod_l+0x33e>
 8006fca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006fcc:	1b49      	subs	r1, r1, r5
 8006fce:	2908      	cmp	r1, #8
 8006fd0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006fd4:	dc02      	bgt.n	8006fdc <_strtod_l+0x2e4>
 8006fd6:	4565      	cmp	r5, ip
 8006fd8:	bfa8      	it	ge
 8006fda:	4665      	movge	r5, ip
 8006fdc:	b107      	cbz	r7, 8006fe0 <_strtod_l+0x2e8>
 8006fde:	426d      	negs	r5, r5
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	d14c      	bne.n	800707e <_strtod_l+0x386>
 8006fe4:	9907      	ldr	r1, [sp, #28]
 8006fe6:	4301      	orrs	r1, r0
 8006fe8:	f47f aec7 	bne.w	8006d7a <_strtod_l+0x82>
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	f47f aee0 	bne.w	8006db2 <_strtod_l+0xba>
 8006ff2:	2b69      	cmp	r3, #105	; 0x69
 8006ff4:	d026      	beq.n	8007044 <_strtod_l+0x34c>
 8006ff6:	dc23      	bgt.n	8007040 <_strtod_l+0x348>
 8006ff8:	2b49      	cmp	r3, #73	; 0x49
 8006ffa:	d023      	beq.n	8007044 <_strtod_l+0x34c>
 8006ffc:	2b4e      	cmp	r3, #78	; 0x4e
 8006ffe:	f47f aed8 	bne.w	8006db2 <_strtod_l+0xba>
 8007002:	499c      	ldr	r1, [pc, #624]	; (8007274 <_strtod_l+0x57c>)
 8007004:	a81b      	add	r0, sp, #108	; 0x6c
 8007006:	f000 ffb9 	bl	8007f7c <__match>
 800700a:	2800      	cmp	r0, #0
 800700c:	f43f aed1 	beq.w	8006db2 <_strtod_l+0xba>
 8007010:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b28      	cmp	r3, #40	; 0x28
 8007016:	d12c      	bne.n	8007072 <_strtod_l+0x37a>
 8007018:	4997      	ldr	r1, [pc, #604]	; (8007278 <_strtod_l+0x580>)
 800701a:	aa1e      	add	r2, sp, #120	; 0x78
 800701c:	a81b      	add	r0, sp, #108	; 0x6c
 800701e:	f000 ffc1 	bl	8007fa4 <__hexnan>
 8007022:	2805      	cmp	r0, #5
 8007024:	d125      	bne.n	8007072 <_strtod_l+0x37a>
 8007026:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007028:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800702c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007030:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007034:	e6a1      	b.n	8006d7a <_strtod_l+0x82>
 8007036:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800703a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800703e:	e7bc      	b.n	8006fba <_strtod_l+0x2c2>
 8007040:	2b6e      	cmp	r3, #110	; 0x6e
 8007042:	e7dc      	b.n	8006ffe <_strtod_l+0x306>
 8007044:	498d      	ldr	r1, [pc, #564]	; (800727c <_strtod_l+0x584>)
 8007046:	a81b      	add	r0, sp, #108	; 0x6c
 8007048:	f000 ff98 	bl	8007f7c <__match>
 800704c:	2800      	cmp	r0, #0
 800704e:	f43f aeb0 	beq.w	8006db2 <_strtod_l+0xba>
 8007052:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007054:	498a      	ldr	r1, [pc, #552]	; (8007280 <_strtod_l+0x588>)
 8007056:	3b01      	subs	r3, #1
 8007058:	a81b      	add	r0, sp, #108	; 0x6c
 800705a:	931b      	str	r3, [sp, #108]	; 0x6c
 800705c:	f000 ff8e 	bl	8007f7c <__match>
 8007060:	b910      	cbnz	r0, 8007068 <_strtod_l+0x370>
 8007062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007064:	3301      	adds	r3, #1
 8007066:	931b      	str	r3, [sp, #108]	; 0x6c
 8007068:	f04f 0800 	mov.w	r8, #0
 800706c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007290 <_strtod_l+0x598>
 8007070:	e683      	b.n	8006d7a <_strtod_l+0x82>
 8007072:	4884      	ldr	r0, [pc, #528]	; (8007284 <_strtod_l+0x58c>)
 8007074:	f002 f8a6 	bl	80091c4 <nan>
 8007078:	4680      	mov	r8, r0
 800707a:	4689      	mov	r9, r1
 800707c:	e67d      	b.n	8006d7a <_strtod_l+0x82>
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	f1bb 0f00 	cmp.w	fp, #0
 8007084:	bf08      	it	eq
 8007086:	46a3      	moveq	fp, r4
 8007088:	1aeb      	subs	r3, r5, r3
 800708a:	2c10      	cmp	r4, #16
 800708c:	9806      	ldr	r0, [sp, #24]
 800708e:	4626      	mov	r6, r4
 8007090:	9307      	str	r3, [sp, #28]
 8007092:	bfa8      	it	ge
 8007094:	2610      	movge	r6, #16
 8007096:	f7f9 f9c7 	bl	8000428 <__aeabi_ui2d>
 800709a:	2c09      	cmp	r4, #9
 800709c:	4680      	mov	r8, r0
 800709e:	4689      	mov	r9, r1
 80070a0:	dd13      	ble.n	80070ca <_strtod_l+0x3d2>
 80070a2:	4b79      	ldr	r3, [pc, #484]	; (8007288 <_strtod_l+0x590>)
 80070a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070ac:	f7f9 fa36 	bl	800051c <__aeabi_dmul>
 80070b0:	4680      	mov	r8, r0
 80070b2:	9805      	ldr	r0, [sp, #20]
 80070b4:	4689      	mov	r9, r1
 80070b6:	f7f9 f9b7 	bl	8000428 <__aeabi_ui2d>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4640      	mov	r0, r8
 80070c0:	4649      	mov	r1, r9
 80070c2:	f7f9 f875 	bl	80001b0 <__adddf3>
 80070c6:	4680      	mov	r8, r0
 80070c8:	4689      	mov	r9, r1
 80070ca:	2c0f      	cmp	r4, #15
 80070cc:	dc36      	bgt.n	800713c <_strtod_l+0x444>
 80070ce:	9b07      	ldr	r3, [sp, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f43f ae52 	beq.w	8006d7a <_strtod_l+0x82>
 80070d6:	dd22      	ble.n	800711e <_strtod_l+0x426>
 80070d8:	2b16      	cmp	r3, #22
 80070da:	dc09      	bgt.n	80070f0 <_strtod_l+0x3f8>
 80070dc:	4c6a      	ldr	r4, [pc, #424]	; (8007288 <_strtod_l+0x590>)
 80070de:	4642      	mov	r2, r8
 80070e0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80070e4:	464b      	mov	r3, r9
 80070e6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80070ea:	f7f9 fa17 	bl	800051c <__aeabi_dmul>
 80070ee:	e7c3      	b.n	8007078 <_strtod_l+0x380>
 80070f0:	9a07      	ldr	r2, [sp, #28]
 80070f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80070f6:	4293      	cmp	r3, r2
 80070f8:	db20      	blt.n	800713c <_strtod_l+0x444>
 80070fa:	4d63      	ldr	r5, [pc, #396]	; (8007288 <_strtod_l+0x590>)
 80070fc:	f1c4 040f 	rsb	r4, r4, #15
 8007100:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007104:	4642      	mov	r2, r8
 8007106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800710a:	464b      	mov	r3, r9
 800710c:	f7f9 fa06 	bl	800051c <__aeabi_dmul>
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	1b1c      	subs	r4, r3, r4
 8007114:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007118:	e9d5 2300 	ldrd	r2, r3, [r5]
 800711c:	e7e5      	b.n	80070ea <_strtod_l+0x3f2>
 800711e:	9b07      	ldr	r3, [sp, #28]
 8007120:	3316      	adds	r3, #22
 8007122:	db0b      	blt.n	800713c <_strtod_l+0x444>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	4a58      	ldr	r2, [pc, #352]	; (8007288 <_strtod_l+0x590>)
 8007128:	1b5d      	subs	r5, r3, r5
 800712a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800712e:	4640      	mov	r0, r8
 8007130:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 fb1b 	bl	8000770 <__aeabi_ddiv>
 800713a:	e79d      	b.n	8007078 <_strtod_l+0x380>
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	1ba6      	subs	r6, r4, r6
 8007140:	441e      	add	r6, r3
 8007142:	2e00      	cmp	r6, #0
 8007144:	dd71      	ble.n	800722a <_strtod_l+0x532>
 8007146:	f016 030f 	ands.w	r3, r6, #15
 800714a:	d00a      	beq.n	8007162 <_strtod_l+0x46a>
 800714c:	494e      	ldr	r1, [pc, #312]	; (8007288 <_strtod_l+0x590>)
 800714e:	4642      	mov	r2, r8
 8007150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007158:	464b      	mov	r3, r9
 800715a:	f7f9 f9df 	bl	800051c <__aeabi_dmul>
 800715e:	4680      	mov	r8, r0
 8007160:	4689      	mov	r9, r1
 8007162:	f036 060f 	bics.w	r6, r6, #15
 8007166:	d050      	beq.n	800720a <_strtod_l+0x512>
 8007168:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800716c:	dd27      	ble.n	80071be <_strtod_l+0x4c6>
 800716e:	f04f 0b00 	mov.w	fp, #0
 8007172:	f8cd b010 	str.w	fp, [sp, #16]
 8007176:	f8cd b020 	str.w	fp, [sp, #32]
 800717a:	f8cd b018 	str.w	fp, [sp, #24]
 800717e:	2322      	movs	r3, #34	; 0x22
 8007180:	f04f 0800 	mov.w	r8, #0
 8007184:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007290 <_strtod_l+0x598>
 8007188:	f8ca 3000 	str.w	r3, [sl]
 800718c:	9b08      	ldr	r3, [sp, #32]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f43f adf3 	beq.w	8006d7a <_strtod_l+0x82>
 8007194:	4650      	mov	r0, sl
 8007196:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007198:	f000 fffa 	bl	8008190 <_Bfree>
 800719c:	4650      	mov	r0, sl
 800719e:	9906      	ldr	r1, [sp, #24]
 80071a0:	f000 fff6 	bl	8008190 <_Bfree>
 80071a4:	4650      	mov	r0, sl
 80071a6:	9904      	ldr	r1, [sp, #16]
 80071a8:	f000 fff2 	bl	8008190 <_Bfree>
 80071ac:	4650      	mov	r0, sl
 80071ae:	9908      	ldr	r1, [sp, #32]
 80071b0:	f000 ffee 	bl	8008190 <_Bfree>
 80071b4:	4659      	mov	r1, fp
 80071b6:	4650      	mov	r0, sl
 80071b8:	f000 ffea 	bl	8008190 <_Bfree>
 80071bc:	e5dd      	b.n	8006d7a <_strtod_l+0x82>
 80071be:	2300      	movs	r3, #0
 80071c0:	4640      	mov	r0, r8
 80071c2:	4649      	mov	r1, r9
 80071c4:	461f      	mov	r7, r3
 80071c6:	1136      	asrs	r6, r6, #4
 80071c8:	2e01      	cmp	r6, #1
 80071ca:	dc21      	bgt.n	8007210 <_strtod_l+0x518>
 80071cc:	b10b      	cbz	r3, 80071d2 <_strtod_l+0x4da>
 80071ce:	4680      	mov	r8, r0
 80071d0:	4689      	mov	r9, r1
 80071d2:	4b2e      	ldr	r3, [pc, #184]	; (800728c <_strtod_l+0x594>)
 80071d4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80071d8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80071dc:	4642      	mov	r2, r8
 80071de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071e2:	464b      	mov	r3, r9
 80071e4:	f7f9 f99a 	bl	800051c <__aeabi_dmul>
 80071e8:	4b29      	ldr	r3, [pc, #164]	; (8007290 <_strtod_l+0x598>)
 80071ea:	460a      	mov	r2, r1
 80071ec:	400b      	ands	r3, r1
 80071ee:	4929      	ldr	r1, [pc, #164]	; (8007294 <_strtod_l+0x59c>)
 80071f0:	4680      	mov	r8, r0
 80071f2:	428b      	cmp	r3, r1
 80071f4:	d8bb      	bhi.n	800716e <_strtod_l+0x476>
 80071f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071fa:	428b      	cmp	r3, r1
 80071fc:	bf86      	itte	hi
 80071fe:	f04f 38ff 	movhi.w	r8, #4294967295
 8007202:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007298 <_strtod_l+0x5a0>
 8007206:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800720a:	2300      	movs	r3, #0
 800720c:	9305      	str	r3, [sp, #20]
 800720e:	e07e      	b.n	800730e <_strtod_l+0x616>
 8007210:	07f2      	lsls	r2, r6, #31
 8007212:	d507      	bpl.n	8007224 <_strtod_l+0x52c>
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <_strtod_l+0x594>)
 8007216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f97d 	bl	800051c <__aeabi_dmul>
 8007222:	2301      	movs	r3, #1
 8007224:	3701      	adds	r7, #1
 8007226:	1076      	asrs	r6, r6, #1
 8007228:	e7ce      	b.n	80071c8 <_strtod_l+0x4d0>
 800722a:	d0ee      	beq.n	800720a <_strtod_l+0x512>
 800722c:	4276      	negs	r6, r6
 800722e:	f016 020f 	ands.w	r2, r6, #15
 8007232:	d00a      	beq.n	800724a <_strtod_l+0x552>
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <_strtod_l+0x590>)
 8007236:	4640      	mov	r0, r8
 8007238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800723c:	4649      	mov	r1, r9
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 fa95 	bl	8000770 <__aeabi_ddiv>
 8007246:	4680      	mov	r8, r0
 8007248:	4689      	mov	r9, r1
 800724a:	1136      	asrs	r6, r6, #4
 800724c:	d0dd      	beq.n	800720a <_strtod_l+0x512>
 800724e:	2e1f      	cmp	r6, #31
 8007250:	dd24      	ble.n	800729c <_strtod_l+0x5a4>
 8007252:	f04f 0b00 	mov.w	fp, #0
 8007256:	f8cd b010 	str.w	fp, [sp, #16]
 800725a:	f8cd b020 	str.w	fp, [sp, #32]
 800725e:	f8cd b018 	str.w	fp, [sp, #24]
 8007262:	2322      	movs	r3, #34	; 0x22
 8007264:	f04f 0800 	mov.w	r8, #0
 8007268:	f04f 0900 	mov.w	r9, #0
 800726c:	f8ca 3000 	str.w	r3, [sl]
 8007270:	e78c      	b.n	800718c <_strtod_l+0x494>
 8007272:	bf00      	nop
 8007274:	08009b21 	.word	0x08009b21
 8007278:	08009b38 	.word	0x08009b38
 800727c:	08009b18 	.word	0x08009b18
 8007280:	08009b1b 	.word	0x08009b1b
 8007284:	08009c2b 	.word	0x08009c2b
 8007288:	08009d48 	.word	0x08009d48
 800728c:	08009d20 	.word	0x08009d20
 8007290:	7ff00000 	.word	0x7ff00000
 8007294:	7ca00000 	.word	0x7ca00000
 8007298:	7fefffff 	.word	0x7fefffff
 800729c:	f016 0310 	ands.w	r3, r6, #16
 80072a0:	bf18      	it	ne
 80072a2:	236a      	movne	r3, #106	; 0x6a
 80072a4:	4640      	mov	r0, r8
 80072a6:	9305      	str	r3, [sp, #20]
 80072a8:	4649      	mov	r1, r9
 80072aa:	2300      	movs	r3, #0
 80072ac:	4fb2      	ldr	r7, [pc, #712]	; (8007578 <_strtod_l+0x880>)
 80072ae:	07f2      	lsls	r2, r6, #31
 80072b0:	d504      	bpl.n	80072bc <_strtod_l+0x5c4>
 80072b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b6:	f7f9 f931 	bl	800051c <__aeabi_dmul>
 80072ba:	2301      	movs	r3, #1
 80072bc:	1076      	asrs	r6, r6, #1
 80072be:	f107 0708 	add.w	r7, r7, #8
 80072c2:	d1f4      	bne.n	80072ae <_strtod_l+0x5b6>
 80072c4:	b10b      	cbz	r3, 80072ca <_strtod_l+0x5d2>
 80072c6:	4680      	mov	r8, r0
 80072c8:	4689      	mov	r9, r1
 80072ca:	9b05      	ldr	r3, [sp, #20]
 80072cc:	b1bb      	cbz	r3, 80072fe <_strtod_l+0x606>
 80072ce:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80072d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	4649      	mov	r1, r9
 80072da:	dd10      	ble.n	80072fe <_strtod_l+0x606>
 80072dc:	2b1f      	cmp	r3, #31
 80072de:	f340 812b 	ble.w	8007538 <_strtod_l+0x840>
 80072e2:	2b34      	cmp	r3, #52	; 0x34
 80072e4:	bfd8      	it	le
 80072e6:	f04f 32ff 	movle.w	r2, #4294967295
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	bfcf      	iteee	gt
 80072f0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80072f4:	3b20      	suble	r3, #32
 80072f6:	fa02 f303 	lslle.w	r3, r2, r3
 80072fa:	ea03 0901 	andle.w	r9, r3, r1
 80072fe:	2200      	movs	r2, #0
 8007300:	2300      	movs	r3, #0
 8007302:	4640      	mov	r0, r8
 8007304:	4649      	mov	r1, r9
 8007306:	f7f9 fb71 	bl	80009ec <__aeabi_dcmpeq>
 800730a:	2800      	cmp	r0, #0
 800730c:	d1a1      	bne.n	8007252 <_strtod_l+0x55a>
 800730e:	9b06      	ldr	r3, [sp, #24]
 8007310:	465a      	mov	r2, fp
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	4650      	mov	r0, sl
 8007316:	4623      	mov	r3, r4
 8007318:	9908      	ldr	r1, [sp, #32]
 800731a:	f000 ffa5 	bl	8008268 <__s2b>
 800731e:	9008      	str	r0, [sp, #32]
 8007320:	2800      	cmp	r0, #0
 8007322:	f43f af24 	beq.w	800716e <_strtod_l+0x476>
 8007326:	9b04      	ldr	r3, [sp, #16]
 8007328:	f04f 0b00 	mov.w	fp, #0
 800732c:	1b5d      	subs	r5, r3, r5
 800732e:	9b07      	ldr	r3, [sp, #28]
 8007330:	f8cd b010 	str.w	fp, [sp, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	bfb4      	ite	lt
 8007338:	462b      	movlt	r3, r5
 800733a:	2300      	movge	r3, #0
 800733c:	930e      	str	r3, [sp, #56]	; 0x38
 800733e:	9b07      	ldr	r3, [sp, #28]
 8007340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007344:	9316      	str	r3, [sp, #88]	; 0x58
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	4650      	mov	r0, sl
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	f000 fee0 	bl	8008110 <_Balloc>
 8007350:	9006      	str	r0, [sp, #24]
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f af13 	beq.w	800717e <_strtod_l+0x486>
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	300c      	adds	r0, #12
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	f103 010c 	add.w	r1, r3, #12
 8007362:	3202      	adds	r2, #2
 8007364:	0092      	lsls	r2, r2, #2
 8007366:	f7ff fc7d 	bl	8006c64 <memcpy>
 800736a:	ab1e      	add	r3, sp, #120	; 0x78
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	ab1d      	add	r3, sp, #116	; 0x74
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	4642      	mov	r2, r8
 8007374:	464b      	mov	r3, r9
 8007376:	4650      	mov	r0, sl
 8007378:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800737c:	f001 fab2 	bl	80088e4 <__d2b>
 8007380:	901c      	str	r0, [sp, #112]	; 0x70
 8007382:	2800      	cmp	r0, #0
 8007384:	f43f aefb 	beq.w	800717e <_strtod_l+0x486>
 8007388:	2101      	movs	r1, #1
 800738a:	4650      	mov	r0, sl
 800738c:	f001 f804 	bl	8008398 <__i2b>
 8007390:	4603      	mov	r3, r0
 8007392:	9004      	str	r0, [sp, #16]
 8007394:	2800      	cmp	r0, #0
 8007396:	f43f aef2 	beq.w	800717e <_strtod_l+0x486>
 800739a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800739c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800739e:	2d00      	cmp	r5, #0
 80073a0:	bfab      	itete	ge
 80073a2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80073a4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80073a6:	18ee      	addge	r6, r5, r3
 80073a8:	1b5c      	sublt	r4, r3, r5
 80073aa:	9b05      	ldr	r3, [sp, #20]
 80073ac:	bfa8      	it	ge
 80073ae:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80073b0:	eba5 0503 	sub.w	r5, r5, r3
 80073b4:	4415      	add	r5, r2
 80073b6:	4b71      	ldr	r3, [pc, #452]	; (800757c <_strtod_l+0x884>)
 80073b8:	f105 35ff 	add.w	r5, r5, #4294967295
 80073bc:	bfb8      	it	lt
 80073be:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80073c0:	429d      	cmp	r5, r3
 80073c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073c6:	f280 80c9 	bge.w	800755c <_strtod_l+0x864>
 80073ca:	1b5b      	subs	r3, r3, r5
 80073cc:	2b1f      	cmp	r3, #31
 80073ce:	f04f 0701 	mov.w	r7, #1
 80073d2:	eba2 0203 	sub.w	r2, r2, r3
 80073d6:	f300 80b6 	bgt.w	8007546 <_strtod_l+0x84e>
 80073da:	2500      	movs	r5, #0
 80073dc:	fa07 f303 	lsl.w	r3, r7, r3
 80073e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e2:	18b7      	adds	r7, r6, r2
 80073e4:	9b05      	ldr	r3, [sp, #20]
 80073e6:	42be      	cmp	r6, r7
 80073e8:	4414      	add	r4, r2
 80073ea:	441c      	add	r4, r3
 80073ec:	4633      	mov	r3, r6
 80073ee:	bfa8      	it	ge
 80073f0:	463b      	movge	r3, r7
 80073f2:	42a3      	cmp	r3, r4
 80073f4:	bfa8      	it	ge
 80073f6:	4623      	movge	r3, r4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfc2      	ittt	gt
 80073fc:	1aff      	subgt	r7, r7, r3
 80073fe:	1ae4      	subgt	r4, r4, r3
 8007400:	1af6      	subgt	r6, r6, r3
 8007402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	dd17      	ble.n	8007438 <_strtod_l+0x740>
 8007408:	461a      	mov	r2, r3
 800740a:	4650      	mov	r0, sl
 800740c:	9904      	ldr	r1, [sp, #16]
 800740e:	f001 f87d 	bl	800850c <__pow5mult>
 8007412:	9004      	str	r0, [sp, #16]
 8007414:	2800      	cmp	r0, #0
 8007416:	f43f aeb2 	beq.w	800717e <_strtod_l+0x486>
 800741a:	4601      	mov	r1, r0
 800741c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800741e:	4650      	mov	r0, sl
 8007420:	f000 ffd0 	bl	80083c4 <__multiply>
 8007424:	9009      	str	r0, [sp, #36]	; 0x24
 8007426:	2800      	cmp	r0, #0
 8007428:	f43f aea9 	beq.w	800717e <_strtod_l+0x486>
 800742c:	4650      	mov	r0, sl
 800742e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007430:	f000 feae 	bl	8008190 <_Bfree>
 8007434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007436:	931c      	str	r3, [sp, #112]	; 0x70
 8007438:	2f00      	cmp	r7, #0
 800743a:	f300 8093 	bgt.w	8007564 <_strtod_l+0x86c>
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	2b00      	cmp	r3, #0
 8007442:	dd08      	ble.n	8007456 <_strtod_l+0x75e>
 8007444:	4650      	mov	r0, sl
 8007446:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007448:	9906      	ldr	r1, [sp, #24]
 800744a:	f001 f85f 	bl	800850c <__pow5mult>
 800744e:	9006      	str	r0, [sp, #24]
 8007450:	2800      	cmp	r0, #0
 8007452:	f43f ae94 	beq.w	800717e <_strtod_l+0x486>
 8007456:	2c00      	cmp	r4, #0
 8007458:	dd08      	ble.n	800746c <_strtod_l+0x774>
 800745a:	4622      	mov	r2, r4
 800745c:	4650      	mov	r0, sl
 800745e:	9906      	ldr	r1, [sp, #24]
 8007460:	f001 f8ae 	bl	80085c0 <__lshift>
 8007464:	9006      	str	r0, [sp, #24]
 8007466:	2800      	cmp	r0, #0
 8007468:	f43f ae89 	beq.w	800717e <_strtod_l+0x486>
 800746c:	2e00      	cmp	r6, #0
 800746e:	dd08      	ble.n	8007482 <_strtod_l+0x78a>
 8007470:	4632      	mov	r2, r6
 8007472:	4650      	mov	r0, sl
 8007474:	9904      	ldr	r1, [sp, #16]
 8007476:	f001 f8a3 	bl	80085c0 <__lshift>
 800747a:	9004      	str	r0, [sp, #16]
 800747c:	2800      	cmp	r0, #0
 800747e:	f43f ae7e 	beq.w	800717e <_strtod_l+0x486>
 8007482:	4650      	mov	r0, sl
 8007484:	9a06      	ldr	r2, [sp, #24]
 8007486:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007488:	f001 f922 	bl	80086d0 <__mdiff>
 800748c:	4683      	mov	fp, r0
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f ae75 	beq.w	800717e <_strtod_l+0x486>
 8007494:	2400      	movs	r4, #0
 8007496:	68c3      	ldr	r3, [r0, #12]
 8007498:	9904      	ldr	r1, [sp, #16]
 800749a:	60c4      	str	r4, [r0, #12]
 800749c:	930d      	str	r3, [sp, #52]	; 0x34
 800749e:	f001 f8fb 	bl	8008698 <__mcmp>
 80074a2:	42a0      	cmp	r0, r4
 80074a4:	da70      	bge.n	8007588 <_strtod_l+0x890>
 80074a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a8:	ea53 0308 	orrs.w	r3, r3, r8
 80074ac:	f040 8096 	bne.w	80075dc <_strtod_l+0x8e4>
 80074b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f040 8091 	bne.w	80075dc <_strtod_l+0x8e4>
 80074ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074be:	0d1b      	lsrs	r3, r3, #20
 80074c0:	051b      	lsls	r3, r3, #20
 80074c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074c6:	f240 8089 	bls.w	80075dc <_strtod_l+0x8e4>
 80074ca:	f8db 3014 	ldr.w	r3, [fp, #20]
 80074ce:	b923      	cbnz	r3, 80074da <_strtod_l+0x7e2>
 80074d0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	f340 8081 	ble.w	80075dc <_strtod_l+0x8e4>
 80074da:	4659      	mov	r1, fp
 80074dc:	2201      	movs	r2, #1
 80074de:	4650      	mov	r0, sl
 80074e0:	f001 f86e 	bl	80085c0 <__lshift>
 80074e4:	9904      	ldr	r1, [sp, #16]
 80074e6:	4683      	mov	fp, r0
 80074e8:	f001 f8d6 	bl	8008698 <__mcmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	dd75      	ble.n	80075dc <_strtod_l+0x8e4>
 80074f0:	9905      	ldr	r1, [sp, #20]
 80074f2:	464b      	mov	r3, r9
 80074f4:	4a22      	ldr	r2, [pc, #136]	; (8007580 <_strtod_l+0x888>)
 80074f6:	2900      	cmp	r1, #0
 80074f8:	f000 8091 	beq.w	800761e <_strtod_l+0x926>
 80074fc:	ea02 0109 	and.w	r1, r2, r9
 8007500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007504:	f300 808b 	bgt.w	800761e <_strtod_l+0x926>
 8007508:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800750c:	f77f aea9 	ble.w	8007262 <_strtod_l+0x56a>
 8007510:	2300      	movs	r3, #0
 8007512:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <_strtod_l+0x88c>)
 8007514:	4640      	mov	r0, r8
 8007516:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800751a:	4649      	mov	r1, r9
 800751c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007520:	f7f8 fffc 	bl	800051c <__aeabi_dmul>
 8007524:	460b      	mov	r3, r1
 8007526:	4303      	orrs	r3, r0
 8007528:	bf08      	it	eq
 800752a:	2322      	moveq	r3, #34	; 0x22
 800752c:	4680      	mov	r8, r0
 800752e:	4689      	mov	r9, r1
 8007530:	bf08      	it	eq
 8007532:	f8ca 3000 	streq.w	r3, [sl]
 8007536:	e62d      	b.n	8007194 <_strtod_l+0x49c>
 8007538:	f04f 32ff 	mov.w	r2, #4294967295
 800753c:	fa02 f303 	lsl.w	r3, r2, r3
 8007540:	ea03 0808 	and.w	r8, r3, r8
 8007544:	e6db      	b.n	80072fe <_strtod_l+0x606>
 8007546:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800754a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800754e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007552:	35e2      	adds	r5, #226	; 0xe2
 8007554:	fa07 f505 	lsl.w	r5, r7, r5
 8007558:	970f      	str	r7, [sp, #60]	; 0x3c
 800755a:	e742      	b.n	80073e2 <_strtod_l+0x6ea>
 800755c:	2301      	movs	r3, #1
 800755e:	2500      	movs	r5, #0
 8007560:	930f      	str	r3, [sp, #60]	; 0x3c
 8007562:	e73e      	b.n	80073e2 <_strtod_l+0x6ea>
 8007564:	463a      	mov	r2, r7
 8007566:	4650      	mov	r0, sl
 8007568:	991c      	ldr	r1, [sp, #112]	; 0x70
 800756a:	f001 f829 	bl	80085c0 <__lshift>
 800756e:	901c      	str	r0, [sp, #112]	; 0x70
 8007570:	2800      	cmp	r0, #0
 8007572:	f47f af64 	bne.w	800743e <_strtod_l+0x746>
 8007576:	e602      	b.n	800717e <_strtod_l+0x486>
 8007578:	08009b50 	.word	0x08009b50
 800757c:	fffffc02 	.word	0xfffffc02
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	39500000 	.word	0x39500000
 8007588:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800758c:	d166      	bne.n	800765c <_strtod_l+0x964>
 800758e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007594:	b35a      	cbz	r2, 80075ee <_strtod_l+0x8f6>
 8007596:	4a9c      	ldr	r2, [pc, #624]	; (8007808 <_strtod_l+0xb10>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d12c      	bne.n	80075f6 <_strtod_l+0x8fe>
 800759c:	9b05      	ldr	r3, [sp, #20]
 800759e:	4640      	mov	r0, r8
 80075a0:	b303      	cbz	r3, 80075e4 <_strtod_l+0x8ec>
 80075a2:	464b      	mov	r3, r9
 80075a4:	4a99      	ldr	r2, [pc, #612]	; (800780c <_strtod_l+0xb14>)
 80075a6:	f04f 31ff 	mov.w	r1, #4294967295
 80075aa:	401a      	ands	r2, r3
 80075ac:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80075b0:	d81b      	bhi.n	80075ea <_strtod_l+0x8f2>
 80075b2:	0d12      	lsrs	r2, r2, #20
 80075b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075b8:	fa01 f303 	lsl.w	r3, r1, r3
 80075bc:	4298      	cmp	r0, r3
 80075be:	d11a      	bne.n	80075f6 <_strtod_l+0x8fe>
 80075c0:	4b93      	ldr	r3, [pc, #588]	; (8007810 <_strtod_l+0xb18>)
 80075c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d102      	bne.n	80075ce <_strtod_l+0x8d6>
 80075c8:	3001      	adds	r0, #1
 80075ca:	f43f add8 	beq.w	800717e <_strtod_l+0x486>
 80075ce:	f04f 0800 	mov.w	r8, #0
 80075d2:	4b8e      	ldr	r3, [pc, #568]	; (800780c <_strtod_l+0xb14>)
 80075d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d6:	401a      	ands	r2, r3
 80075d8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80075dc:	9b05      	ldr	r3, [sp, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d196      	bne.n	8007510 <_strtod_l+0x818>
 80075e2:	e5d7      	b.n	8007194 <_strtod_l+0x49c>
 80075e4:	f04f 33ff 	mov.w	r3, #4294967295
 80075e8:	e7e8      	b.n	80075bc <_strtod_l+0x8c4>
 80075ea:	460b      	mov	r3, r1
 80075ec:	e7e6      	b.n	80075bc <_strtod_l+0x8c4>
 80075ee:	ea53 0308 	orrs.w	r3, r3, r8
 80075f2:	f43f af7d 	beq.w	80074f0 <_strtod_l+0x7f8>
 80075f6:	b1e5      	cbz	r5, 8007632 <_strtod_l+0x93a>
 80075f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fa:	421d      	tst	r5, r3
 80075fc:	d0ee      	beq.n	80075dc <_strtod_l+0x8e4>
 80075fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	9a05      	ldr	r2, [sp, #20]
 8007606:	b1c3      	cbz	r3, 800763a <_strtod_l+0x942>
 8007608:	f7ff fb53 	bl	8006cb2 <sulp>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007614:	f7f8 fdcc 	bl	80001b0 <__adddf3>
 8007618:	4680      	mov	r8, r0
 800761a:	4689      	mov	r9, r1
 800761c:	e7de      	b.n	80075dc <_strtod_l+0x8e4>
 800761e:	4013      	ands	r3, r2
 8007620:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007624:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007628:	f04f 38ff 	mov.w	r8, #4294967295
 800762c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007630:	e7d4      	b.n	80075dc <_strtod_l+0x8e4>
 8007632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007634:	ea13 0f08 	tst.w	r3, r8
 8007638:	e7e0      	b.n	80075fc <_strtod_l+0x904>
 800763a:	f7ff fb3a 	bl	8006cb2 <sulp>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007646:	f7f8 fdb1 	bl	80001ac <__aeabi_dsub>
 800764a:	2200      	movs	r2, #0
 800764c:	2300      	movs	r3, #0
 800764e:	4680      	mov	r8, r0
 8007650:	4689      	mov	r9, r1
 8007652:	f7f9 f9cb 	bl	80009ec <__aeabi_dcmpeq>
 8007656:	2800      	cmp	r0, #0
 8007658:	d0c0      	beq.n	80075dc <_strtod_l+0x8e4>
 800765a:	e602      	b.n	8007262 <_strtod_l+0x56a>
 800765c:	4658      	mov	r0, fp
 800765e:	9904      	ldr	r1, [sp, #16]
 8007660:	f001 f99c 	bl	800899c <__ratio>
 8007664:	2200      	movs	r2, #0
 8007666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800766a:	4606      	mov	r6, r0
 800766c:	460f      	mov	r7, r1
 800766e:	f7f9 f9d1 	bl	8000a14 <__aeabi_dcmple>
 8007672:	2800      	cmp	r0, #0
 8007674:	d075      	beq.n	8007762 <_strtod_l+0xa6a>
 8007676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007678:	2b00      	cmp	r3, #0
 800767a:	d047      	beq.n	800770c <_strtod_l+0xa14>
 800767c:	2600      	movs	r6, #0
 800767e:	4f65      	ldr	r7, [pc, #404]	; (8007814 <_strtod_l+0xb1c>)
 8007680:	4d64      	ldr	r5, [pc, #400]	; (8007814 <_strtod_l+0xb1c>)
 8007682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007688:	0d1b      	lsrs	r3, r3, #20
 800768a:	051b      	lsls	r3, r3, #20
 800768c:	930f      	str	r3, [sp, #60]	; 0x3c
 800768e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007690:	4b61      	ldr	r3, [pc, #388]	; (8007818 <_strtod_l+0xb20>)
 8007692:	429a      	cmp	r2, r3
 8007694:	f040 80c8 	bne.w	8007828 <_strtod_l+0xb30>
 8007698:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800769c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80076a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a2:	4640      	mov	r0, r8
 80076a4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80076a8:	4649      	mov	r1, r9
 80076aa:	f001 f8a1 	bl	80087f0 <__ulp>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4630      	mov	r0, r6
 80076b4:	4639      	mov	r1, r7
 80076b6:	f7f8 ff31 	bl	800051c <__aeabi_dmul>
 80076ba:	4642      	mov	r2, r8
 80076bc:	464b      	mov	r3, r9
 80076be:	f7f8 fd77 	bl	80001b0 <__adddf3>
 80076c2:	460b      	mov	r3, r1
 80076c4:	4951      	ldr	r1, [pc, #324]	; (800780c <_strtod_l+0xb14>)
 80076c6:	4a55      	ldr	r2, [pc, #340]	; (800781c <_strtod_l+0xb24>)
 80076c8:	4019      	ands	r1, r3
 80076ca:	4291      	cmp	r1, r2
 80076cc:	4680      	mov	r8, r0
 80076ce:	d95e      	bls.n	800778e <_strtod_l+0xa96>
 80076d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d103      	bne.n	80076e2 <_strtod_l+0x9ea>
 80076da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076dc:	3301      	adds	r3, #1
 80076de:	f43f ad4e 	beq.w	800717e <_strtod_l+0x486>
 80076e2:	f04f 38ff 	mov.w	r8, #4294967295
 80076e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007810 <_strtod_l+0xb18>
 80076ea:	4650      	mov	r0, sl
 80076ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076ee:	f000 fd4f 	bl	8008190 <_Bfree>
 80076f2:	4650      	mov	r0, sl
 80076f4:	9906      	ldr	r1, [sp, #24]
 80076f6:	f000 fd4b 	bl	8008190 <_Bfree>
 80076fa:	4650      	mov	r0, sl
 80076fc:	9904      	ldr	r1, [sp, #16]
 80076fe:	f000 fd47 	bl	8008190 <_Bfree>
 8007702:	4659      	mov	r1, fp
 8007704:	4650      	mov	r0, sl
 8007706:	f000 fd43 	bl	8008190 <_Bfree>
 800770a:	e61c      	b.n	8007346 <_strtod_l+0x64e>
 800770c:	f1b8 0f00 	cmp.w	r8, #0
 8007710:	d119      	bne.n	8007746 <_strtod_l+0xa4e>
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007718:	b9e3      	cbnz	r3, 8007754 <_strtod_l+0xa5c>
 800771a:	2200      	movs	r2, #0
 800771c:	4630      	mov	r0, r6
 800771e:	4639      	mov	r1, r7
 8007720:	4b3c      	ldr	r3, [pc, #240]	; (8007814 <_strtod_l+0xb1c>)
 8007722:	f7f9 f96d 	bl	8000a00 <__aeabi_dcmplt>
 8007726:	b9c8      	cbnz	r0, 800775c <_strtod_l+0xa64>
 8007728:	2200      	movs	r2, #0
 800772a:	4630      	mov	r0, r6
 800772c:	4639      	mov	r1, r7
 800772e:	4b3c      	ldr	r3, [pc, #240]	; (8007820 <_strtod_l+0xb28>)
 8007730:	f7f8 fef4 	bl	800051c <__aeabi_dmul>
 8007734:	4604      	mov	r4, r0
 8007736:	460d      	mov	r5, r1
 8007738:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800773c:	9418      	str	r4, [sp, #96]	; 0x60
 800773e:	9319      	str	r3, [sp, #100]	; 0x64
 8007740:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007744:	e79d      	b.n	8007682 <_strtod_l+0x98a>
 8007746:	f1b8 0f01 	cmp.w	r8, #1
 800774a:	d103      	bne.n	8007754 <_strtod_l+0xa5c>
 800774c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	f43f ad87 	beq.w	8007262 <_strtod_l+0x56a>
 8007754:	2600      	movs	r6, #0
 8007756:	2400      	movs	r4, #0
 8007758:	4f32      	ldr	r7, [pc, #200]	; (8007824 <_strtod_l+0xb2c>)
 800775a:	e791      	b.n	8007680 <_strtod_l+0x988>
 800775c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800775e:	4d30      	ldr	r5, [pc, #192]	; (8007820 <_strtod_l+0xb28>)
 8007760:	e7ea      	b.n	8007738 <_strtod_l+0xa40>
 8007762:	4b2f      	ldr	r3, [pc, #188]	; (8007820 <_strtod_l+0xb28>)
 8007764:	2200      	movs	r2, #0
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	f7f8 fed7 	bl	800051c <__aeabi_dmul>
 800776e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	b933      	cbnz	r3, 8007784 <_strtod_l+0xa8c>
 8007776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800777a:	9010      	str	r0, [sp, #64]	; 0x40
 800777c:	9311      	str	r3, [sp, #68]	; 0x44
 800777e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007782:	e77e      	b.n	8007682 <_strtod_l+0x98a>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800778c:	e7f7      	b.n	800777e <_strtod_l+0xa86>
 800778e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1a8      	bne.n	80076ea <_strtod_l+0x9f2>
 8007798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800779c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800779e:	0d1b      	lsrs	r3, r3, #20
 80077a0:	051b      	lsls	r3, r3, #20
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d1a1      	bne.n	80076ea <_strtod_l+0x9f2>
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f9 fccd 	bl	8001148 <__aeabi_d2lz>
 80077ae:	f7f8 fe87 	bl	80004c0 <__aeabi_l2d>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4620      	mov	r0, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	f7f8 fcf7 	bl	80001ac <__aeabi_dsub>
 80077be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077c4:	ea43 0308 	orr.w	r3, r3, r8
 80077c8:	4313      	orrs	r3, r2
 80077ca:	4604      	mov	r4, r0
 80077cc:	460d      	mov	r5, r1
 80077ce:	d066      	beq.n	800789e <_strtod_l+0xba6>
 80077d0:	a309      	add	r3, pc, #36	; (adr r3, 80077f8 <_strtod_l+0xb00>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f9 f913 	bl	8000a00 <__aeabi_dcmplt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	f47f acda 	bne.w	8007194 <_strtod_l+0x49c>
 80077e0:	a307      	add	r3, pc, #28	; (adr r3, 8007800 <_strtod_l+0xb08>)
 80077e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f927 	bl	8000a3c <__aeabi_dcmpgt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f af7b 	beq.w	80076ea <_strtod_l+0x9f2>
 80077f4:	e4ce      	b.n	8007194 <_strtod_l+0x49c>
 80077f6:	bf00      	nop
 80077f8:	94a03595 	.word	0x94a03595
 80077fc:	3fdfffff 	.word	0x3fdfffff
 8007800:	35afe535 	.word	0x35afe535
 8007804:	3fe00000 	.word	0x3fe00000
 8007808:	000fffff 	.word	0x000fffff
 800780c:	7ff00000 	.word	0x7ff00000
 8007810:	7fefffff 	.word	0x7fefffff
 8007814:	3ff00000 	.word	0x3ff00000
 8007818:	7fe00000 	.word	0x7fe00000
 800781c:	7c9fffff 	.word	0x7c9fffff
 8007820:	3fe00000 	.word	0x3fe00000
 8007824:	bff00000 	.word	0xbff00000
 8007828:	9b05      	ldr	r3, [sp, #20]
 800782a:	b313      	cbz	r3, 8007872 <_strtod_l+0xb7a>
 800782c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800782e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007832:	d81e      	bhi.n	8007872 <_strtod_l+0xb7a>
 8007834:	a326      	add	r3, pc, #152	; (adr r3, 80078d0 <_strtod_l+0xbd8>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	4620      	mov	r0, r4
 800783c:	4629      	mov	r1, r5
 800783e:	f7f9 f8e9 	bl	8000a14 <__aeabi_dcmple>
 8007842:	b190      	cbz	r0, 800786a <_strtod_l+0xb72>
 8007844:	4629      	mov	r1, r5
 8007846:	4620      	mov	r0, r4
 8007848:	f7f9 f902 	bl	8000a50 <__aeabi_d2uiz>
 800784c:	2801      	cmp	r0, #1
 800784e:	bf38      	it	cc
 8007850:	2001      	movcc	r0, #1
 8007852:	f7f8 fde9 	bl	8000428 <__aeabi_ui2d>
 8007856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007858:	4604      	mov	r4, r0
 800785a:	460d      	mov	r5, r1
 800785c:	b9d3      	cbnz	r3, 8007894 <_strtod_l+0xb9c>
 800785e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007862:	9012      	str	r0, [sp, #72]	; 0x48
 8007864:	9313      	str	r3, [sp, #76]	; 0x4c
 8007866:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800786a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800786c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007870:	1a9f      	subs	r7, r3, r2
 8007872:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007876:	f000 ffbb 	bl	80087f0 <__ulp>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4630      	mov	r0, r6
 8007880:	4639      	mov	r1, r7
 8007882:	f7f8 fe4b 	bl	800051c <__aeabi_dmul>
 8007886:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800788a:	f7f8 fc91 	bl	80001b0 <__adddf3>
 800788e:	4680      	mov	r8, r0
 8007890:	4689      	mov	r9, r1
 8007892:	e77e      	b.n	8007792 <_strtod_l+0xa9a>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800789c:	e7e3      	b.n	8007866 <_strtod_l+0xb6e>
 800789e:	a30e      	add	r3, pc, #56	; (adr r3, 80078d8 <_strtod_l+0xbe0>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	f7f9 f8ac 	bl	8000a00 <__aeabi_dcmplt>
 80078a8:	e7a1      	b.n	80077ee <_strtod_l+0xaf6>
 80078aa:	2300      	movs	r3, #0
 80078ac:	930c      	str	r3, [sp, #48]	; 0x30
 80078ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	f7ff ba65 	b.w	8006d82 <_strtod_l+0x8a>
 80078b8:	2b65      	cmp	r3, #101	; 0x65
 80078ba:	f43f ab5c 	beq.w	8006f76 <_strtod_l+0x27e>
 80078be:	2b45      	cmp	r3, #69	; 0x45
 80078c0:	f43f ab59 	beq.w	8006f76 <_strtod_l+0x27e>
 80078c4:	2201      	movs	r2, #1
 80078c6:	f7ff bb8d 	b.w	8006fe4 <_strtod_l+0x2ec>
 80078ca:	bf00      	nop
 80078cc:	f3af 8000 	nop.w
 80078d0:	ffc00000 	.word	0xffc00000
 80078d4:	41dfffff 	.word	0x41dfffff
 80078d8:	94a03595 	.word	0x94a03595
 80078dc:	3fcfffff 	.word	0x3fcfffff

080078e0 <strtod>:
 80078e0:	460a      	mov	r2, r1
 80078e2:	4601      	mov	r1, r0
 80078e4:	4802      	ldr	r0, [pc, #8]	; (80078f0 <strtod+0x10>)
 80078e6:	4b03      	ldr	r3, [pc, #12]	; (80078f4 <strtod+0x14>)
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	f7ff ba05 	b.w	8006cf8 <_strtod_l>
 80078ee:	bf00      	nop
 80078f0:	2000043c 	.word	0x2000043c
 80078f4:	200004a4 	.word	0x200004a4

080078f8 <strtok>:
 80078f8:	4b16      	ldr	r3, [pc, #88]	; (8007954 <strtok+0x5c>)
 80078fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	681f      	ldr	r7, [r3, #0]
 8007900:	4605      	mov	r5, r0
 8007902:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007904:	460e      	mov	r6, r1
 8007906:	b9ec      	cbnz	r4, 8007944 <strtok+0x4c>
 8007908:	2050      	movs	r0, #80	; 0x50
 800790a:	f000 fbe7 	bl	80080dc <malloc>
 800790e:	4602      	mov	r2, r0
 8007910:	65b8      	str	r0, [r7, #88]	; 0x58
 8007912:	b920      	cbnz	r0, 800791e <strtok+0x26>
 8007914:	2157      	movs	r1, #87	; 0x57
 8007916:	4b10      	ldr	r3, [pc, #64]	; (8007958 <strtok+0x60>)
 8007918:	4810      	ldr	r0, [pc, #64]	; (800795c <strtok+0x64>)
 800791a:	f000 f849 	bl	80079b0 <__assert_func>
 800791e:	e9c0 4400 	strd	r4, r4, [r0]
 8007922:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007926:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800792a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800792e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007932:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007936:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800793a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800793e:	6184      	str	r4, [r0, #24]
 8007940:	7704      	strb	r4, [r0, #28]
 8007942:	6244      	str	r4, [r0, #36]	; 0x24
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800794a:	2301      	movs	r3, #1
 800794c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007950:	f000 b806 	b.w	8007960 <__strtok_r>
 8007954:	2000043c 	.word	0x2000043c
 8007958:	08009b78 	.word	0x08009b78
 800795c:	08009b8f 	.word	0x08009b8f

08007960 <__strtok_r>:
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	b908      	cbnz	r0, 8007968 <__strtok_r+0x8>
 8007964:	6810      	ldr	r0, [r2, #0]
 8007966:	b188      	cbz	r0, 800798c <__strtok_r+0x2c>
 8007968:	4604      	mov	r4, r0
 800796a:	460f      	mov	r7, r1
 800796c:	4620      	mov	r0, r4
 800796e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007972:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007976:	b91e      	cbnz	r6, 8007980 <__strtok_r+0x20>
 8007978:	b965      	cbnz	r5, 8007994 <__strtok_r+0x34>
 800797a:	4628      	mov	r0, r5
 800797c:	6015      	str	r5, [r2, #0]
 800797e:	e005      	b.n	800798c <__strtok_r+0x2c>
 8007980:	42b5      	cmp	r5, r6
 8007982:	d1f6      	bne.n	8007972 <__strtok_r+0x12>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f0      	bne.n	800796a <__strtok_r+0xa>
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	7003      	strb	r3, [r0, #0]
 800798c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800798e:	461c      	mov	r4, r3
 8007990:	e00c      	b.n	80079ac <__strtok_r+0x4c>
 8007992:	b915      	cbnz	r5, 800799a <__strtok_r+0x3a>
 8007994:	460e      	mov	r6, r1
 8007996:	f814 3b01 	ldrb.w	r3, [r4], #1
 800799a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800799e:	42ab      	cmp	r3, r5
 80079a0:	d1f7      	bne.n	8007992 <__strtok_r+0x32>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0f3      	beq.n	800798e <__strtok_r+0x2e>
 80079a6:	2300      	movs	r3, #0
 80079a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80079ac:	6014      	str	r4, [r2, #0]
 80079ae:	e7ed      	b.n	800798c <__strtok_r+0x2c>

080079b0 <__assert_func>:
 80079b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079b2:	4614      	mov	r4, r2
 80079b4:	461a      	mov	r2, r3
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <__assert_func+0x2c>)
 80079b8:	4605      	mov	r5, r0
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68d8      	ldr	r0, [r3, #12]
 80079be:	b14c      	cbz	r4, 80079d4 <__assert_func+0x24>
 80079c0:	4b07      	ldr	r3, [pc, #28]	; (80079e0 <__assert_func+0x30>)
 80079c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079c6:	9100      	str	r1, [sp, #0]
 80079c8:	462b      	mov	r3, r5
 80079ca:	4906      	ldr	r1, [pc, #24]	; (80079e4 <__assert_func+0x34>)
 80079cc:	f000 f80e 	bl	80079ec <fiprintf>
 80079d0:	f001 fcee 	bl	80093b0 <abort>
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <__assert_func+0x38>)
 80079d6:	461c      	mov	r4, r3
 80079d8:	e7f3      	b.n	80079c2 <__assert_func+0x12>
 80079da:	bf00      	nop
 80079dc:	2000043c 	.word	0x2000043c
 80079e0:	08009bf0 	.word	0x08009bf0
 80079e4:	08009bfd 	.word	0x08009bfd
 80079e8:	08009c2b 	.word	0x08009c2b

080079ec <fiprintf>:
 80079ec:	b40e      	push	{r1, r2, r3}
 80079ee:	b503      	push	{r0, r1, lr}
 80079f0:	4601      	mov	r1, r0
 80079f2:	ab03      	add	r3, sp, #12
 80079f4:	4805      	ldr	r0, [pc, #20]	; (8007a0c <fiprintf+0x20>)
 80079f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	f001 f91b 	bl	8008c38 <_vfiprintf_r>
 8007a02:	b002      	add	sp, #8
 8007a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a08:	b003      	add	sp, #12
 8007a0a:	4770      	bx	lr
 8007a0c:	2000043c 	.word	0x2000043c

08007a10 <rshift>:
 8007a10:	6903      	ldr	r3, [r0, #16]
 8007a12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a1a:	f100 0414 	add.w	r4, r0, #20
 8007a1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a22:	dd46      	ble.n	8007ab2 <rshift+0xa2>
 8007a24:	f011 011f 	ands.w	r1, r1, #31
 8007a28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a30:	d10c      	bne.n	8007a4c <rshift+0x3c>
 8007a32:	4629      	mov	r1, r5
 8007a34:	f100 0710 	add.w	r7, r0, #16
 8007a38:	42b1      	cmp	r1, r6
 8007a3a:	d335      	bcc.n	8007aa8 <rshift+0x98>
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	1eea      	subs	r2, r5, #3
 8007a42:	4296      	cmp	r6, r2
 8007a44:	bf38      	it	cc
 8007a46:	2300      	movcc	r3, #0
 8007a48:	4423      	add	r3, r4
 8007a4a:	e015      	b.n	8007a78 <rshift+0x68>
 8007a4c:	46a1      	mov	r9, r4
 8007a4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a52:	f1c1 0820 	rsb	r8, r1, #32
 8007a56:	40cf      	lsrs	r7, r1
 8007a58:	f105 0e04 	add.w	lr, r5, #4
 8007a5c:	4576      	cmp	r6, lr
 8007a5e:	46f4      	mov	ip, lr
 8007a60:	d816      	bhi.n	8007a90 <rshift+0x80>
 8007a62:	1a9b      	subs	r3, r3, r2
 8007a64:	009a      	lsls	r2, r3, #2
 8007a66:	3a04      	subs	r2, #4
 8007a68:	3501      	adds	r5, #1
 8007a6a:	42ae      	cmp	r6, r5
 8007a6c:	bf38      	it	cc
 8007a6e:	2200      	movcc	r2, #0
 8007a70:	18a3      	adds	r3, r4, r2
 8007a72:	50a7      	str	r7, [r4, r2]
 8007a74:	b107      	cbz	r7, 8007a78 <rshift+0x68>
 8007a76:	3304      	adds	r3, #4
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	eba3 0204 	sub.w	r2, r3, r4
 8007a7e:	bf08      	it	eq
 8007a80:	2300      	moveq	r3, #0
 8007a82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a86:	6102      	str	r2, [r0, #16]
 8007a88:	bf08      	it	eq
 8007a8a:	6143      	streq	r3, [r0, #20]
 8007a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a90:	f8dc c000 	ldr.w	ip, [ip]
 8007a94:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a98:	ea4c 0707 	orr.w	r7, ip, r7
 8007a9c:	f849 7b04 	str.w	r7, [r9], #4
 8007aa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007aa4:	40cf      	lsrs	r7, r1
 8007aa6:	e7d9      	b.n	8007a5c <rshift+0x4c>
 8007aa8:	f851 cb04 	ldr.w	ip, [r1], #4
 8007aac:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ab0:	e7c2      	b.n	8007a38 <rshift+0x28>
 8007ab2:	4623      	mov	r3, r4
 8007ab4:	e7e0      	b.n	8007a78 <rshift+0x68>

08007ab6 <__hexdig_fun>:
 8007ab6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007aba:	2b09      	cmp	r3, #9
 8007abc:	d802      	bhi.n	8007ac4 <__hexdig_fun+0xe>
 8007abe:	3820      	subs	r0, #32
 8007ac0:	b2c0      	uxtb	r0, r0
 8007ac2:	4770      	bx	lr
 8007ac4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	d801      	bhi.n	8007ad0 <__hexdig_fun+0x1a>
 8007acc:	3847      	subs	r0, #71	; 0x47
 8007ace:	e7f7      	b.n	8007ac0 <__hexdig_fun+0xa>
 8007ad0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007ad4:	2b05      	cmp	r3, #5
 8007ad6:	d801      	bhi.n	8007adc <__hexdig_fun+0x26>
 8007ad8:	3827      	subs	r0, #39	; 0x27
 8007ada:	e7f1      	b.n	8007ac0 <__hexdig_fun+0xa>
 8007adc:	2000      	movs	r0, #0
 8007ade:	4770      	bx	lr

08007ae0 <__gethex>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	b08b      	sub	sp, #44	; 0x2c
 8007ae6:	9306      	str	r3, [sp, #24]
 8007ae8:	4bb9      	ldr	r3, [pc, #740]	; (8007dd0 <__gethex+0x2f0>)
 8007aea:	9002      	str	r0, [sp, #8]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	468b      	mov	fp, r1
 8007af0:	4618      	mov	r0, r3
 8007af2:	4690      	mov	r8, r2
 8007af4:	9303      	str	r3, [sp, #12]
 8007af6:	f7f8 fb4d 	bl	8000194 <strlen>
 8007afa:	4682      	mov	sl, r0
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	f8db 2000 	ldr.w	r2, [fp]
 8007b02:	4403      	add	r3, r0
 8007b04:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007b08:	9307      	str	r3, [sp, #28]
 8007b0a:	1c93      	adds	r3, r2, #2
 8007b0c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007b10:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007b14:	32fe      	adds	r2, #254	; 0xfe
 8007b16:	18d1      	adds	r1, r2, r3
 8007b18:	461f      	mov	r7, r3
 8007b1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007b1e:	9101      	str	r1, [sp, #4]
 8007b20:	2830      	cmp	r0, #48	; 0x30
 8007b22:	d0f8      	beq.n	8007b16 <__gethex+0x36>
 8007b24:	f7ff ffc7 	bl	8007ab6 <__hexdig_fun>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d13a      	bne.n	8007ba4 <__gethex+0xc4>
 8007b2e:	4652      	mov	r2, sl
 8007b30:	4638      	mov	r0, r7
 8007b32:	9903      	ldr	r1, [sp, #12]
 8007b34:	f001 fb5c 	bl	80091f0 <strncmp>
 8007b38:	4605      	mov	r5, r0
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d166      	bne.n	8007c0c <__gethex+0x12c>
 8007b3e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007b42:	eb07 060a 	add.w	r6, r7, sl
 8007b46:	f7ff ffb6 	bl	8007ab6 <__hexdig_fun>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d060      	beq.n	8007c10 <__gethex+0x130>
 8007b4e:	4633      	mov	r3, r6
 8007b50:	7818      	ldrb	r0, [r3, #0]
 8007b52:	461f      	mov	r7, r3
 8007b54:	2830      	cmp	r0, #48	; 0x30
 8007b56:	f103 0301 	add.w	r3, r3, #1
 8007b5a:	d0f9      	beq.n	8007b50 <__gethex+0x70>
 8007b5c:	f7ff ffab 	bl	8007ab6 <__hexdig_fun>
 8007b60:	2301      	movs	r3, #1
 8007b62:	fab0 f480 	clz	r4, r0
 8007b66:	4635      	mov	r5, r6
 8007b68:	0964      	lsrs	r4, r4, #5
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	463a      	mov	r2, r7
 8007b6e:	4616      	mov	r6, r2
 8007b70:	7830      	ldrb	r0, [r6, #0]
 8007b72:	3201      	adds	r2, #1
 8007b74:	f7ff ff9f 	bl	8007ab6 <__hexdig_fun>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d1f8      	bne.n	8007b6e <__gethex+0x8e>
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	4630      	mov	r0, r6
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	f001 fb35 	bl	80091f0 <strncmp>
 8007b86:	b980      	cbnz	r0, 8007baa <__gethex+0xca>
 8007b88:	b94d      	cbnz	r5, 8007b9e <__gethex+0xbe>
 8007b8a:	eb06 050a 	add.w	r5, r6, sl
 8007b8e:	462a      	mov	r2, r5
 8007b90:	4616      	mov	r6, r2
 8007b92:	7830      	ldrb	r0, [r6, #0]
 8007b94:	3201      	adds	r2, #1
 8007b96:	f7ff ff8e 	bl	8007ab6 <__hexdig_fun>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d1f8      	bne.n	8007b90 <__gethex+0xb0>
 8007b9e:	1bad      	subs	r5, r5, r6
 8007ba0:	00ad      	lsls	r5, r5, #2
 8007ba2:	e004      	b.n	8007bae <__gethex+0xce>
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	4625      	mov	r5, r4
 8007ba8:	e7e0      	b.n	8007b6c <__gethex+0x8c>
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	d1f7      	bne.n	8007b9e <__gethex+0xbe>
 8007bae:	7833      	ldrb	r3, [r6, #0]
 8007bb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007bb4:	2b50      	cmp	r3, #80	; 0x50
 8007bb6:	d139      	bne.n	8007c2c <__gethex+0x14c>
 8007bb8:	7873      	ldrb	r3, [r6, #1]
 8007bba:	2b2b      	cmp	r3, #43	; 0x2b
 8007bbc:	d02a      	beq.n	8007c14 <__gethex+0x134>
 8007bbe:	2b2d      	cmp	r3, #45	; 0x2d
 8007bc0:	d02c      	beq.n	8007c1c <__gethex+0x13c>
 8007bc2:	f04f 0900 	mov.w	r9, #0
 8007bc6:	1c71      	adds	r1, r6, #1
 8007bc8:	7808      	ldrb	r0, [r1, #0]
 8007bca:	f7ff ff74 	bl	8007ab6 <__hexdig_fun>
 8007bce:	1e43      	subs	r3, r0, #1
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b18      	cmp	r3, #24
 8007bd4:	d82a      	bhi.n	8007c2c <__gethex+0x14c>
 8007bd6:	f1a0 0210 	sub.w	r2, r0, #16
 8007bda:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007bde:	f7ff ff6a 	bl	8007ab6 <__hexdig_fun>
 8007be2:	1e43      	subs	r3, r0, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b18      	cmp	r3, #24
 8007be8:	d91b      	bls.n	8007c22 <__gethex+0x142>
 8007bea:	f1b9 0f00 	cmp.w	r9, #0
 8007bee:	d000      	beq.n	8007bf2 <__gethex+0x112>
 8007bf0:	4252      	negs	r2, r2
 8007bf2:	4415      	add	r5, r2
 8007bf4:	f8cb 1000 	str.w	r1, [fp]
 8007bf8:	b1d4      	cbz	r4, 8007c30 <__gethex+0x150>
 8007bfa:	9b01      	ldr	r3, [sp, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bf14      	ite	ne
 8007c00:	2700      	movne	r7, #0
 8007c02:	2706      	moveq	r7, #6
 8007c04:	4638      	mov	r0, r7
 8007c06:	b00b      	add	sp, #44	; 0x2c
 8007c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0c:	463e      	mov	r6, r7
 8007c0e:	4625      	mov	r5, r4
 8007c10:	2401      	movs	r4, #1
 8007c12:	e7cc      	b.n	8007bae <__gethex+0xce>
 8007c14:	f04f 0900 	mov.w	r9, #0
 8007c18:	1cb1      	adds	r1, r6, #2
 8007c1a:	e7d5      	b.n	8007bc8 <__gethex+0xe8>
 8007c1c:	f04f 0901 	mov.w	r9, #1
 8007c20:	e7fa      	b.n	8007c18 <__gethex+0x138>
 8007c22:	230a      	movs	r3, #10
 8007c24:	fb03 0202 	mla	r2, r3, r2, r0
 8007c28:	3a10      	subs	r2, #16
 8007c2a:	e7d6      	b.n	8007bda <__gethex+0xfa>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	e7e1      	b.n	8007bf4 <__gethex+0x114>
 8007c30:	4621      	mov	r1, r4
 8007c32:	1bf3      	subs	r3, r6, r7
 8007c34:	3b01      	subs	r3, #1
 8007c36:	2b07      	cmp	r3, #7
 8007c38:	dc0a      	bgt.n	8007c50 <__gethex+0x170>
 8007c3a:	9802      	ldr	r0, [sp, #8]
 8007c3c:	f000 fa68 	bl	8008110 <_Balloc>
 8007c40:	4604      	mov	r4, r0
 8007c42:	b940      	cbnz	r0, 8007c56 <__gethex+0x176>
 8007c44:	4602      	mov	r2, r0
 8007c46:	21de      	movs	r1, #222	; 0xde
 8007c48:	4b62      	ldr	r3, [pc, #392]	; (8007dd4 <__gethex+0x2f4>)
 8007c4a:	4863      	ldr	r0, [pc, #396]	; (8007dd8 <__gethex+0x2f8>)
 8007c4c:	f7ff feb0 	bl	80079b0 <__assert_func>
 8007c50:	3101      	adds	r1, #1
 8007c52:	105b      	asrs	r3, r3, #1
 8007c54:	e7ef      	b.n	8007c36 <__gethex+0x156>
 8007c56:	f04f 0b00 	mov.w	fp, #0
 8007c5a:	f100 0914 	add.w	r9, r0, #20
 8007c5e:	f1ca 0301 	rsb	r3, sl, #1
 8007c62:	f8cd 9010 	str.w	r9, [sp, #16]
 8007c66:	f8cd b004 	str.w	fp, [sp, #4]
 8007c6a:	9308      	str	r3, [sp, #32]
 8007c6c:	42b7      	cmp	r7, r6
 8007c6e:	d33f      	bcc.n	8007cf0 <__gethex+0x210>
 8007c70:	9f04      	ldr	r7, [sp, #16]
 8007c72:	9b01      	ldr	r3, [sp, #4]
 8007c74:	f847 3b04 	str.w	r3, [r7], #4
 8007c78:	eba7 0709 	sub.w	r7, r7, r9
 8007c7c:	10bf      	asrs	r7, r7, #2
 8007c7e:	6127      	str	r7, [r4, #16]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fb3b 	bl	80082fc <__hi0bits>
 8007c86:	017f      	lsls	r7, r7, #5
 8007c88:	f8d8 6000 	ldr.w	r6, [r8]
 8007c8c:	1a3f      	subs	r7, r7, r0
 8007c8e:	42b7      	cmp	r7, r6
 8007c90:	dd62      	ble.n	8007d58 <__gethex+0x278>
 8007c92:	1bbf      	subs	r7, r7, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 fed1 	bl	8008a3e <__any_on>
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	b1a8      	cbz	r0, 8007ccc <__gethex+0x1ec>
 8007ca0:	f04f 0a01 	mov.w	sl, #1
 8007ca4:	1e7b      	subs	r3, r7, #1
 8007ca6:	1159      	asrs	r1, r3, #5
 8007ca8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007cac:	f003 021f 	and.w	r2, r3, #31
 8007cb0:	fa0a f202 	lsl.w	r2, sl, r2
 8007cb4:	420a      	tst	r2, r1
 8007cb6:	d009      	beq.n	8007ccc <__gethex+0x1ec>
 8007cb8:	4553      	cmp	r3, sl
 8007cba:	dd05      	ble.n	8007cc8 <__gethex+0x1e8>
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	1eb9      	subs	r1, r7, #2
 8007cc0:	f000 febd 	bl	8008a3e <__any_on>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d144      	bne.n	8007d52 <__gethex+0x272>
 8007cc8:	f04f 0a02 	mov.w	sl, #2
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff fe9e 	bl	8007a10 <rshift>
 8007cd4:	443d      	add	r5, r7
 8007cd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	da4a      	bge.n	8007d74 <__gethex+0x294>
 8007cde:	4621      	mov	r1, r4
 8007ce0:	9802      	ldr	r0, [sp, #8]
 8007ce2:	f000 fa55 	bl	8008190 <_Bfree>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cea:	27a3      	movs	r7, #163	; 0xa3
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e789      	b.n	8007c04 <__gethex+0x124>
 8007cf0:	1e73      	subs	r3, r6, #1
 8007cf2:	9a07      	ldr	r2, [sp, #28]
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d019      	beq.n	8007d32 <__gethex+0x252>
 8007cfe:	f1bb 0f20 	cmp.w	fp, #32
 8007d02:	d107      	bne.n	8007d14 <__gethex+0x234>
 8007d04:	9b04      	ldr	r3, [sp, #16]
 8007d06:	9a01      	ldr	r2, [sp, #4]
 8007d08:	f843 2b04 	str.w	r2, [r3], #4
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	469b      	mov	fp, r3
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007d18:	f7ff fecd 	bl	8007ab6 <__hexdig_fun>
 8007d1c:	9b01      	ldr	r3, [sp, #4]
 8007d1e:	f000 000f 	and.w	r0, r0, #15
 8007d22:	fa00 f00b 	lsl.w	r0, r0, fp
 8007d26:	4303      	orrs	r3, r0
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	f10b 0b04 	add.w	fp, fp, #4
 8007d2e:	9b05      	ldr	r3, [sp, #20]
 8007d30:	e00d      	b.n	8007d4e <__gethex+0x26e>
 8007d32:	9b05      	ldr	r3, [sp, #20]
 8007d34:	9a08      	ldr	r2, [sp, #32]
 8007d36:	4413      	add	r3, r2
 8007d38:	42bb      	cmp	r3, r7
 8007d3a:	d3e0      	bcc.n	8007cfe <__gethex+0x21e>
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	4652      	mov	r2, sl
 8007d40:	9903      	ldr	r1, [sp, #12]
 8007d42:	9309      	str	r3, [sp, #36]	; 0x24
 8007d44:	f001 fa54 	bl	80091f0 <strncmp>
 8007d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d1d7      	bne.n	8007cfe <__gethex+0x21e>
 8007d4e:	461e      	mov	r6, r3
 8007d50:	e78c      	b.n	8007c6c <__gethex+0x18c>
 8007d52:	f04f 0a03 	mov.w	sl, #3
 8007d56:	e7b9      	b.n	8007ccc <__gethex+0x1ec>
 8007d58:	da09      	bge.n	8007d6e <__gethex+0x28e>
 8007d5a:	1bf7      	subs	r7, r6, r7
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	463a      	mov	r2, r7
 8007d60:	9802      	ldr	r0, [sp, #8]
 8007d62:	f000 fc2d 	bl	80085c0 <__lshift>
 8007d66:	4604      	mov	r4, r0
 8007d68:	1bed      	subs	r5, r5, r7
 8007d6a:	f100 0914 	add.w	r9, r0, #20
 8007d6e:	f04f 0a00 	mov.w	sl, #0
 8007d72:	e7b0      	b.n	8007cd6 <__gethex+0x1f6>
 8007d74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d78:	42a8      	cmp	r0, r5
 8007d7a:	dd71      	ble.n	8007e60 <__gethex+0x380>
 8007d7c:	1b45      	subs	r5, r0, r5
 8007d7e:	42ae      	cmp	r6, r5
 8007d80:	dc34      	bgt.n	8007dec <__gethex+0x30c>
 8007d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d028      	beq.n	8007ddc <__gethex+0x2fc>
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d02a      	beq.n	8007de4 <__gethex+0x304>
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d115      	bne.n	8007dbe <__gethex+0x2de>
 8007d92:	42ae      	cmp	r6, r5
 8007d94:	d113      	bne.n	8007dbe <__gethex+0x2de>
 8007d96:	2e01      	cmp	r6, #1
 8007d98:	d10b      	bne.n	8007db2 <__gethex+0x2d2>
 8007d9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d9e:	9a06      	ldr	r2, [sp, #24]
 8007da0:	2762      	movs	r7, #98	; 0x62
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	2301      	movs	r3, #1
 8007da6:	6123      	str	r3, [r4, #16]
 8007da8:	f8c9 3000 	str.w	r3, [r9]
 8007dac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dae:	601c      	str	r4, [r3, #0]
 8007db0:	e728      	b.n	8007c04 <__gethex+0x124>
 8007db2:	4620      	mov	r0, r4
 8007db4:	1e71      	subs	r1, r6, #1
 8007db6:	f000 fe42 	bl	8008a3e <__any_on>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d1ed      	bne.n	8007d9a <__gethex+0x2ba>
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	9802      	ldr	r0, [sp, #8]
 8007dc2:	f000 f9e5 	bl	8008190 <_Bfree>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007dca:	2750      	movs	r7, #80	; 0x50
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	e719      	b.n	8007c04 <__gethex+0x124>
 8007dd0:	08009ca8 	.word	0x08009ca8
 8007dd4:	08009c2c 	.word	0x08009c2c
 8007dd8:	08009c3d 	.word	0x08009c3d
 8007ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1ed      	bne.n	8007dbe <__gethex+0x2de>
 8007de2:	e7da      	b.n	8007d9a <__gethex+0x2ba>
 8007de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1d7      	bne.n	8007d9a <__gethex+0x2ba>
 8007dea:	e7e8      	b.n	8007dbe <__gethex+0x2de>
 8007dec:	1e6f      	subs	r7, r5, #1
 8007dee:	f1ba 0f00 	cmp.w	sl, #0
 8007df2:	d132      	bne.n	8007e5a <__gethex+0x37a>
 8007df4:	b127      	cbz	r7, 8007e00 <__gethex+0x320>
 8007df6:	4639      	mov	r1, r7
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fe20 	bl	8008a3e <__any_on>
 8007dfe:	4682      	mov	sl, r0
 8007e00:	2101      	movs	r1, #1
 8007e02:	117b      	asrs	r3, r7, #5
 8007e04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007e08:	f007 071f 	and.w	r7, r7, #31
 8007e0c:	fa01 f707 	lsl.w	r7, r1, r7
 8007e10:	421f      	tst	r7, r3
 8007e12:	f04f 0702 	mov.w	r7, #2
 8007e16:	4629      	mov	r1, r5
 8007e18:	4620      	mov	r0, r4
 8007e1a:	bf18      	it	ne
 8007e1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007e20:	1b76      	subs	r6, r6, r5
 8007e22:	f7ff fdf5 	bl	8007a10 <rshift>
 8007e26:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007e2a:	f1ba 0f00 	cmp.w	sl, #0
 8007e2e:	d048      	beq.n	8007ec2 <__gethex+0x3e2>
 8007e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d015      	beq.n	8007e64 <__gethex+0x384>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d017      	beq.n	8007e6c <__gethex+0x38c>
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d109      	bne.n	8007e54 <__gethex+0x374>
 8007e40:	f01a 0f02 	tst.w	sl, #2
 8007e44:	d006      	beq.n	8007e54 <__gethex+0x374>
 8007e46:	f8d9 0000 	ldr.w	r0, [r9]
 8007e4a:	ea4a 0a00 	orr.w	sl, sl, r0
 8007e4e:	f01a 0f01 	tst.w	sl, #1
 8007e52:	d10e      	bne.n	8007e72 <__gethex+0x392>
 8007e54:	f047 0710 	orr.w	r7, r7, #16
 8007e58:	e033      	b.n	8007ec2 <__gethex+0x3e2>
 8007e5a:	f04f 0a01 	mov.w	sl, #1
 8007e5e:	e7cf      	b.n	8007e00 <__gethex+0x320>
 8007e60:	2701      	movs	r7, #1
 8007e62:	e7e2      	b.n	8007e2a <__gethex+0x34a>
 8007e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e66:	f1c3 0301 	rsb	r3, r3, #1
 8007e6a:	9315      	str	r3, [sp, #84]	; 0x54
 8007e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <__gethex+0x374>
 8007e72:	f04f 0c00 	mov.w	ip, #0
 8007e76:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e7a:	f104 0314 	add.w	r3, r4, #20
 8007e7e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e82:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e90:	d01c      	beq.n	8007ecc <__gethex+0x3ec>
 8007e92:	3201      	adds	r2, #1
 8007e94:	6002      	str	r2, [r0, #0]
 8007e96:	2f02      	cmp	r7, #2
 8007e98:	f104 0314 	add.w	r3, r4, #20
 8007e9c:	d13d      	bne.n	8007f1a <__gethex+0x43a>
 8007e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8007ea2:	3a01      	subs	r2, #1
 8007ea4:	42b2      	cmp	r2, r6
 8007ea6:	d10a      	bne.n	8007ebe <__gethex+0x3de>
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	1171      	asrs	r1, r6, #5
 8007eac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007eb0:	f006 061f 	and.w	r6, r6, #31
 8007eb4:	fa02 f606 	lsl.w	r6, r2, r6
 8007eb8:	421e      	tst	r6, r3
 8007eba:	bf18      	it	ne
 8007ebc:	4617      	movne	r7, r2
 8007ebe:	f047 0720 	orr.w	r7, r7, #32
 8007ec2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ec4:	601c      	str	r4, [r3, #0]
 8007ec6:	9b06      	ldr	r3, [sp, #24]
 8007ec8:	601d      	str	r5, [r3, #0]
 8007eca:	e69b      	b.n	8007c04 <__gethex+0x124>
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ed2:	d8d8      	bhi.n	8007e86 <__gethex+0x3a6>
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	459b      	cmp	fp, r3
 8007ed8:	db17      	blt.n	8007f0a <__gethex+0x42a>
 8007eda:	6861      	ldr	r1, [r4, #4]
 8007edc:	9802      	ldr	r0, [sp, #8]
 8007ede:	3101      	adds	r1, #1
 8007ee0:	f000 f916 	bl	8008110 <_Balloc>
 8007ee4:	4681      	mov	r9, r0
 8007ee6:	b918      	cbnz	r0, 8007ef0 <__gethex+0x410>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	2184      	movs	r1, #132	; 0x84
 8007eec:	4b19      	ldr	r3, [pc, #100]	; (8007f54 <__gethex+0x474>)
 8007eee:	e6ac      	b.n	8007c4a <__gethex+0x16a>
 8007ef0:	6922      	ldr	r2, [r4, #16]
 8007ef2:	f104 010c 	add.w	r1, r4, #12
 8007ef6:	3202      	adds	r2, #2
 8007ef8:	0092      	lsls	r2, r2, #2
 8007efa:	300c      	adds	r0, #12
 8007efc:	f7fe feb2 	bl	8006c64 <memcpy>
 8007f00:	4621      	mov	r1, r4
 8007f02:	9802      	ldr	r0, [sp, #8]
 8007f04:	f000 f944 	bl	8008190 <_Bfree>
 8007f08:	464c      	mov	r4, r9
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	6122      	str	r2, [r4, #16]
 8007f10:	2201      	movs	r2, #1
 8007f12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f16:	615a      	str	r2, [r3, #20]
 8007f18:	e7bd      	b.n	8007e96 <__gethex+0x3b6>
 8007f1a:	6922      	ldr	r2, [r4, #16]
 8007f1c:	455a      	cmp	r2, fp
 8007f1e:	dd0b      	ble.n	8007f38 <__gethex+0x458>
 8007f20:	2101      	movs	r1, #1
 8007f22:	4620      	mov	r0, r4
 8007f24:	f7ff fd74 	bl	8007a10 <rshift>
 8007f28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	42ab      	cmp	r3, r5
 8007f30:	f6ff aed5 	blt.w	8007cde <__gethex+0x1fe>
 8007f34:	2701      	movs	r7, #1
 8007f36:	e7c2      	b.n	8007ebe <__gethex+0x3de>
 8007f38:	f016 061f 	ands.w	r6, r6, #31
 8007f3c:	d0fa      	beq.n	8007f34 <__gethex+0x454>
 8007f3e:	449a      	add	sl, r3
 8007f40:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007f44:	f000 f9da 	bl	80082fc <__hi0bits>
 8007f48:	f1c6 0620 	rsb	r6, r6, #32
 8007f4c:	42b0      	cmp	r0, r6
 8007f4e:	dbe7      	blt.n	8007f20 <__gethex+0x440>
 8007f50:	e7f0      	b.n	8007f34 <__gethex+0x454>
 8007f52:	bf00      	nop
 8007f54:	08009c2c 	.word	0x08009c2c

08007f58 <L_shift>:
 8007f58:	f1c2 0208 	rsb	r2, r2, #8
 8007f5c:	0092      	lsls	r2, r2, #2
 8007f5e:	b570      	push	{r4, r5, r6, lr}
 8007f60:	f1c2 0620 	rsb	r6, r2, #32
 8007f64:	6843      	ldr	r3, [r0, #4]
 8007f66:	6804      	ldr	r4, [r0, #0]
 8007f68:	fa03 f506 	lsl.w	r5, r3, r6
 8007f6c:	432c      	orrs	r4, r5
 8007f6e:	40d3      	lsrs	r3, r2
 8007f70:	6004      	str	r4, [r0, #0]
 8007f72:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f76:	4288      	cmp	r0, r1
 8007f78:	d3f4      	bcc.n	8007f64 <L_shift+0xc>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}

08007f7c <__match>:
 8007f7c:	b530      	push	{r4, r5, lr}
 8007f7e:	6803      	ldr	r3, [r0, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f86:	b914      	cbnz	r4, 8007f8e <__match+0x12>
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	bd30      	pop	{r4, r5, pc}
 8007f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f96:	2d19      	cmp	r5, #25
 8007f98:	bf98      	it	ls
 8007f9a:	3220      	addls	r2, #32
 8007f9c:	42a2      	cmp	r2, r4
 8007f9e:	d0f0      	beq.n	8007f82 <__match+0x6>
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e7f3      	b.n	8007f8c <__match+0x10>

08007fa4 <__hexnan>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	2500      	movs	r5, #0
 8007faa:	680b      	ldr	r3, [r1, #0]
 8007fac:	4682      	mov	sl, r0
 8007fae:	115e      	asrs	r6, r3, #5
 8007fb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007fb4:	f013 031f 	ands.w	r3, r3, #31
 8007fb8:	bf18      	it	ne
 8007fba:	3604      	addne	r6, #4
 8007fbc:	1f37      	subs	r7, r6, #4
 8007fbe:	4690      	mov	r8, r2
 8007fc0:	46b9      	mov	r9, r7
 8007fc2:	463c      	mov	r4, r7
 8007fc4:	46ab      	mov	fp, r5
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	6801      	ldr	r1, [r0, #0]
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fd0:	9502      	str	r5, [sp, #8]
 8007fd2:	784a      	ldrb	r2, [r1, #1]
 8007fd4:	1c4b      	adds	r3, r1, #1
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	b342      	cbz	r2, 800802c <__hexnan+0x88>
 8007fda:	4610      	mov	r0, r2
 8007fdc:	9105      	str	r1, [sp, #20]
 8007fde:	9204      	str	r2, [sp, #16]
 8007fe0:	f7ff fd69 	bl	8007ab6 <__hexdig_fun>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d14f      	bne.n	8008088 <__hexnan+0xe4>
 8007fe8:	9a04      	ldr	r2, [sp, #16]
 8007fea:	9905      	ldr	r1, [sp, #20]
 8007fec:	2a20      	cmp	r2, #32
 8007fee:	d818      	bhi.n	8008022 <__hexnan+0x7e>
 8007ff0:	9b02      	ldr	r3, [sp, #8]
 8007ff2:	459b      	cmp	fp, r3
 8007ff4:	dd13      	ble.n	800801e <__hexnan+0x7a>
 8007ff6:	454c      	cmp	r4, r9
 8007ff8:	d206      	bcs.n	8008008 <__hexnan+0x64>
 8007ffa:	2d07      	cmp	r5, #7
 8007ffc:	dc04      	bgt.n	8008008 <__hexnan+0x64>
 8007ffe:	462a      	mov	r2, r5
 8008000:	4649      	mov	r1, r9
 8008002:	4620      	mov	r0, r4
 8008004:	f7ff ffa8 	bl	8007f58 <L_shift>
 8008008:	4544      	cmp	r4, r8
 800800a:	d950      	bls.n	80080ae <__hexnan+0x10a>
 800800c:	2300      	movs	r3, #0
 800800e:	f1a4 0904 	sub.w	r9, r4, #4
 8008012:	f844 3c04 	str.w	r3, [r4, #-4]
 8008016:	461d      	mov	r5, r3
 8008018:	464c      	mov	r4, r9
 800801a:	f8cd b008 	str.w	fp, [sp, #8]
 800801e:	9903      	ldr	r1, [sp, #12]
 8008020:	e7d7      	b.n	8007fd2 <__hexnan+0x2e>
 8008022:	2a29      	cmp	r2, #41	; 0x29
 8008024:	d156      	bne.n	80080d4 <__hexnan+0x130>
 8008026:	3102      	adds	r1, #2
 8008028:	f8ca 1000 	str.w	r1, [sl]
 800802c:	f1bb 0f00 	cmp.w	fp, #0
 8008030:	d050      	beq.n	80080d4 <__hexnan+0x130>
 8008032:	454c      	cmp	r4, r9
 8008034:	d206      	bcs.n	8008044 <__hexnan+0xa0>
 8008036:	2d07      	cmp	r5, #7
 8008038:	dc04      	bgt.n	8008044 <__hexnan+0xa0>
 800803a:	462a      	mov	r2, r5
 800803c:	4649      	mov	r1, r9
 800803e:	4620      	mov	r0, r4
 8008040:	f7ff ff8a 	bl	8007f58 <L_shift>
 8008044:	4544      	cmp	r4, r8
 8008046:	d934      	bls.n	80080b2 <__hexnan+0x10e>
 8008048:	4623      	mov	r3, r4
 800804a:	f1a8 0204 	sub.w	r2, r8, #4
 800804e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008052:	429f      	cmp	r7, r3
 8008054:	f842 1f04 	str.w	r1, [r2, #4]!
 8008058:	d2f9      	bcs.n	800804e <__hexnan+0xaa>
 800805a:	1b3b      	subs	r3, r7, r4
 800805c:	f023 0303 	bic.w	r3, r3, #3
 8008060:	3304      	adds	r3, #4
 8008062:	3401      	adds	r4, #1
 8008064:	3e03      	subs	r6, #3
 8008066:	42b4      	cmp	r4, r6
 8008068:	bf88      	it	hi
 800806a:	2304      	movhi	r3, #4
 800806c:	2200      	movs	r2, #0
 800806e:	4443      	add	r3, r8
 8008070:	f843 2b04 	str.w	r2, [r3], #4
 8008074:	429f      	cmp	r7, r3
 8008076:	d2fb      	bcs.n	8008070 <__hexnan+0xcc>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	b91b      	cbnz	r3, 8008084 <__hexnan+0xe0>
 800807c:	4547      	cmp	r7, r8
 800807e:	d127      	bne.n	80080d0 <__hexnan+0x12c>
 8008080:	2301      	movs	r3, #1
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	2005      	movs	r0, #5
 8008086:	e026      	b.n	80080d6 <__hexnan+0x132>
 8008088:	3501      	adds	r5, #1
 800808a:	2d08      	cmp	r5, #8
 800808c:	f10b 0b01 	add.w	fp, fp, #1
 8008090:	dd06      	ble.n	80080a0 <__hexnan+0xfc>
 8008092:	4544      	cmp	r4, r8
 8008094:	d9c3      	bls.n	800801e <__hexnan+0x7a>
 8008096:	2300      	movs	r3, #0
 8008098:	2501      	movs	r5, #1
 800809a:	f844 3c04 	str.w	r3, [r4, #-4]
 800809e:	3c04      	subs	r4, #4
 80080a0:	6822      	ldr	r2, [r4, #0]
 80080a2:	f000 000f 	and.w	r0, r0, #15
 80080a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80080aa:	6022      	str	r2, [r4, #0]
 80080ac:	e7b7      	b.n	800801e <__hexnan+0x7a>
 80080ae:	2508      	movs	r5, #8
 80080b0:	e7b5      	b.n	800801e <__hexnan+0x7a>
 80080b2:	9b01      	ldr	r3, [sp, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0df      	beq.n	8008078 <__hexnan+0xd4>
 80080b8:	f04f 32ff 	mov.w	r2, #4294967295
 80080bc:	f1c3 0320 	rsb	r3, r3, #32
 80080c0:	fa22 f303 	lsr.w	r3, r2, r3
 80080c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080c8:	401a      	ands	r2, r3
 80080ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80080ce:	e7d3      	b.n	8008078 <__hexnan+0xd4>
 80080d0:	3f04      	subs	r7, #4
 80080d2:	e7d1      	b.n	8008078 <__hexnan+0xd4>
 80080d4:	2004      	movs	r0, #4
 80080d6:	b007      	add	sp, #28
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080dc <malloc>:
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <malloc+0xc>)
 80080de:	4601      	mov	r1, r0
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	f000 bd27 	b.w	8008b34 <_malloc_r>
 80080e6:	bf00      	nop
 80080e8:	2000043c 	.word	0x2000043c

080080ec <__ascii_mbtowc>:
 80080ec:	b082      	sub	sp, #8
 80080ee:	b901      	cbnz	r1, 80080f2 <__ascii_mbtowc+0x6>
 80080f0:	a901      	add	r1, sp, #4
 80080f2:	b142      	cbz	r2, 8008106 <__ascii_mbtowc+0x1a>
 80080f4:	b14b      	cbz	r3, 800810a <__ascii_mbtowc+0x1e>
 80080f6:	7813      	ldrb	r3, [r2, #0]
 80080f8:	600b      	str	r3, [r1, #0]
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	1e10      	subs	r0, r2, #0
 80080fe:	bf18      	it	ne
 8008100:	2001      	movne	r0, #1
 8008102:	b002      	add	sp, #8
 8008104:	4770      	bx	lr
 8008106:	4610      	mov	r0, r2
 8008108:	e7fb      	b.n	8008102 <__ascii_mbtowc+0x16>
 800810a:	f06f 0001 	mvn.w	r0, #1
 800810e:	e7f8      	b.n	8008102 <__ascii_mbtowc+0x16>

08008110 <_Balloc>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008114:	4604      	mov	r4, r0
 8008116:	460d      	mov	r5, r1
 8008118:	b976      	cbnz	r6, 8008138 <_Balloc+0x28>
 800811a:	2010      	movs	r0, #16
 800811c:	f7ff ffde 	bl	80080dc <malloc>
 8008120:	4602      	mov	r2, r0
 8008122:	6260      	str	r0, [r4, #36]	; 0x24
 8008124:	b920      	cbnz	r0, 8008130 <_Balloc+0x20>
 8008126:	2166      	movs	r1, #102	; 0x66
 8008128:	4b17      	ldr	r3, [pc, #92]	; (8008188 <_Balloc+0x78>)
 800812a:	4818      	ldr	r0, [pc, #96]	; (800818c <_Balloc+0x7c>)
 800812c:	f7ff fc40 	bl	80079b0 <__assert_func>
 8008130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008134:	6006      	str	r6, [r0, #0]
 8008136:	60c6      	str	r6, [r0, #12]
 8008138:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800813a:	68f3      	ldr	r3, [r6, #12]
 800813c:	b183      	cbz	r3, 8008160 <_Balloc+0x50>
 800813e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008146:	b9b8      	cbnz	r0, 8008178 <_Balloc+0x68>
 8008148:	2101      	movs	r1, #1
 800814a:	fa01 f605 	lsl.w	r6, r1, r5
 800814e:	1d72      	adds	r2, r6, #5
 8008150:	4620      	mov	r0, r4
 8008152:	0092      	lsls	r2, r2, #2
 8008154:	f000 fc94 	bl	8008a80 <_calloc_r>
 8008158:	b160      	cbz	r0, 8008174 <_Balloc+0x64>
 800815a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800815e:	e00e      	b.n	800817e <_Balloc+0x6e>
 8008160:	2221      	movs	r2, #33	; 0x21
 8008162:	2104      	movs	r1, #4
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fc8b 	bl	8008a80 <_calloc_r>
 800816a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800816c:	60f0      	str	r0, [r6, #12]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e4      	bne.n	800813e <_Balloc+0x2e>
 8008174:	2000      	movs	r0, #0
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	6802      	ldr	r2, [r0, #0]
 800817a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800817e:	2300      	movs	r3, #0
 8008180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008184:	e7f7      	b.n	8008176 <_Balloc+0x66>
 8008186:	bf00      	nop
 8008188:	08009b78 	.word	0x08009b78
 800818c:	08009cbc 	.word	0x08009cbc

08008190 <_Bfree>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008194:	4605      	mov	r5, r0
 8008196:	460c      	mov	r4, r1
 8008198:	b976      	cbnz	r6, 80081b8 <_Bfree+0x28>
 800819a:	2010      	movs	r0, #16
 800819c:	f7ff ff9e 	bl	80080dc <malloc>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6268      	str	r0, [r5, #36]	; 0x24
 80081a4:	b920      	cbnz	r0, 80081b0 <_Bfree+0x20>
 80081a6:	218a      	movs	r1, #138	; 0x8a
 80081a8:	4b08      	ldr	r3, [pc, #32]	; (80081cc <_Bfree+0x3c>)
 80081aa:	4809      	ldr	r0, [pc, #36]	; (80081d0 <_Bfree+0x40>)
 80081ac:	f7ff fc00 	bl	80079b0 <__assert_func>
 80081b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081b4:	6006      	str	r6, [r0, #0]
 80081b6:	60c6      	str	r6, [r0, #12]
 80081b8:	b13c      	cbz	r4, 80081ca <_Bfree+0x3a>
 80081ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081bc:	6862      	ldr	r2, [r4, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081c4:	6021      	str	r1, [r4, #0]
 80081c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	08009b78 	.word	0x08009b78
 80081d0:	08009cbc 	.word	0x08009cbc

080081d4 <__multadd>:
 80081d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d8:	4698      	mov	r8, r3
 80081da:	460c      	mov	r4, r1
 80081dc:	2300      	movs	r3, #0
 80081de:	690e      	ldr	r6, [r1, #16]
 80081e0:	4607      	mov	r7, r0
 80081e2:	f101 0014 	add.w	r0, r1, #20
 80081e6:	6805      	ldr	r5, [r0, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	b2a9      	uxth	r1, r5
 80081ec:	fb02 8101 	mla	r1, r2, r1, r8
 80081f0:	0c2d      	lsrs	r5, r5, #16
 80081f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80081f6:	fb02 c505 	mla	r5, r2, r5, ip
 80081fa:	b289      	uxth	r1, r1
 80081fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008200:	429e      	cmp	r6, r3
 8008202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008206:	f840 1b04 	str.w	r1, [r0], #4
 800820a:	dcec      	bgt.n	80081e6 <__multadd+0x12>
 800820c:	f1b8 0f00 	cmp.w	r8, #0
 8008210:	d022      	beq.n	8008258 <__multadd+0x84>
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	42b3      	cmp	r3, r6
 8008216:	dc19      	bgt.n	800824c <__multadd+0x78>
 8008218:	6861      	ldr	r1, [r4, #4]
 800821a:	4638      	mov	r0, r7
 800821c:	3101      	adds	r1, #1
 800821e:	f7ff ff77 	bl	8008110 <_Balloc>
 8008222:	4605      	mov	r5, r0
 8008224:	b928      	cbnz	r0, 8008232 <__multadd+0x5e>
 8008226:	4602      	mov	r2, r0
 8008228:	21b5      	movs	r1, #181	; 0xb5
 800822a:	4b0d      	ldr	r3, [pc, #52]	; (8008260 <__multadd+0x8c>)
 800822c:	480d      	ldr	r0, [pc, #52]	; (8008264 <__multadd+0x90>)
 800822e:	f7ff fbbf 	bl	80079b0 <__assert_func>
 8008232:	6922      	ldr	r2, [r4, #16]
 8008234:	f104 010c 	add.w	r1, r4, #12
 8008238:	3202      	adds	r2, #2
 800823a:	0092      	lsls	r2, r2, #2
 800823c:	300c      	adds	r0, #12
 800823e:	f7fe fd11 	bl	8006c64 <memcpy>
 8008242:	4621      	mov	r1, r4
 8008244:	4638      	mov	r0, r7
 8008246:	f7ff ffa3 	bl	8008190 <_Bfree>
 800824a:	462c      	mov	r4, r5
 800824c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008250:	3601      	adds	r6, #1
 8008252:	f8c3 8014 	str.w	r8, [r3, #20]
 8008256:	6126      	str	r6, [r4, #16]
 8008258:	4620      	mov	r0, r4
 800825a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800825e:	bf00      	nop
 8008260:	08009c2c 	.word	0x08009c2c
 8008264:	08009cbc 	.word	0x08009cbc

08008268 <__s2b>:
 8008268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800826c:	4615      	mov	r5, r2
 800826e:	2209      	movs	r2, #9
 8008270:	461f      	mov	r7, r3
 8008272:	3308      	adds	r3, #8
 8008274:	460c      	mov	r4, r1
 8008276:	fb93 f3f2 	sdiv	r3, r3, r2
 800827a:	4606      	mov	r6, r0
 800827c:	2201      	movs	r2, #1
 800827e:	2100      	movs	r1, #0
 8008280:	429a      	cmp	r2, r3
 8008282:	db09      	blt.n	8008298 <__s2b+0x30>
 8008284:	4630      	mov	r0, r6
 8008286:	f7ff ff43 	bl	8008110 <_Balloc>
 800828a:	b940      	cbnz	r0, 800829e <__s2b+0x36>
 800828c:	4602      	mov	r2, r0
 800828e:	21ce      	movs	r1, #206	; 0xce
 8008290:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <__s2b+0x8c>)
 8008292:	4819      	ldr	r0, [pc, #100]	; (80082f8 <__s2b+0x90>)
 8008294:	f7ff fb8c 	bl	80079b0 <__assert_func>
 8008298:	0052      	lsls	r2, r2, #1
 800829a:	3101      	adds	r1, #1
 800829c:	e7f0      	b.n	8008280 <__s2b+0x18>
 800829e:	9b08      	ldr	r3, [sp, #32]
 80082a0:	2d09      	cmp	r5, #9
 80082a2:	6143      	str	r3, [r0, #20]
 80082a4:	f04f 0301 	mov.w	r3, #1
 80082a8:	6103      	str	r3, [r0, #16]
 80082aa:	dd16      	ble.n	80082da <__s2b+0x72>
 80082ac:	f104 0909 	add.w	r9, r4, #9
 80082b0:	46c8      	mov	r8, r9
 80082b2:	442c      	add	r4, r5
 80082b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80082b8:	4601      	mov	r1, r0
 80082ba:	220a      	movs	r2, #10
 80082bc:	4630      	mov	r0, r6
 80082be:	3b30      	subs	r3, #48	; 0x30
 80082c0:	f7ff ff88 	bl	80081d4 <__multadd>
 80082c4:	45a0      	cmp	r8, r4
 80082c6:	d1f5      	bne.n	80082b4 <__s2b+0x4c>
 80082c8:	f1a5 0408 	sub.w	r4, r5, #8
 80082cc:	444c      	add	r4, r9
 80082ce:	1b2d      	subs	r5, r5, r4
 80082d0:	1963      	adds	r3, r4, r5
 80082d2:	42bb      	cmp	r3, r7
 80082d4:	db04      	blt.n	80082e0 <__s2b+0x78>
 80082d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082da:	2509      	movs	r5, #9
 80082dc:	340a      	adds	r4, #10
 80082de:	e7f6      	b.n	80082ce <__s2b+0x66>
 80082e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082e4:	4601      	mov	r1, r0
 80082e6:	220a      	movs	r2, #10
 80082e8:	4630      	mov	r0, r6
 80082ea:	3b30      	subs	r3, #48	; 0x30
 80082ec:	f7ff ff72 	bl	80081d4 <__multadd>
 80082f0:	e7ee      	b.n	80082d0 <__s2b+0x68>
 80082f2:	bf00      	nop
 80082f4:	08009c2c 	.word	0x08009c2c
 80082f8:	08009cbc 	.word	0x08009cbc

080082fc <__hi0bits>:
 80082fc:	0c02      	lsrs	r2, r0, #16
 80082fe:	0412      	lsls	r2, r2, #16
 8008300:	4603      	mov	r3, r0
 8008302:	b9ca      	cbnz	r2, 8008338 <__hi0bits+0x3c>
 8008304:	0403      	lsls	r3, r0, #16
 8008306:	2010      	movs	r0, #16
 8008308:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800830c:	bf04      	itt	eq
 800830e:	021b      	lsleq	r3, r3, #8
 8008310:	3008      	addeq	r0, #8
 8008312:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008316:	bf04      	itt	eq
 8008318:	011b      	lsleq	r3, r3, #4
 800831a:	3004      	addeq	r0, #4
 800831c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008320:	bf04      	itt	eq
 8008322:	009b      	lsleq	r3, r3, #2
 8008324:	3002      	addeq	r0, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	db05      	blt.n	8008336 <__hi0bits+0x3a>
 800832a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800832e:	f100 0001 	add.w	r0, r0, #1
 8008332:	bf08      	it	eq
 8008334:	2020      	moveq	r0, #32
 8008336:	4770      	bx	lr
 8008338:	2000      	movs	r0, #0
 800833a:	e7e5      	b.n	8008308 <__hi0bits+0xc>

0800833c <__lo0bits>:
 800833c:	6803      	ldr	r3, [r0, #0]
 800833e:	4602      	mov	r2, r0
 8008340:	f013 0007 	ands.w	r0, r3, #7
 8008344:	d00b      	beq.n	800835e <__lo0bits+0x22>
 8008346:	07d9      	lsls	r1, r3, #31
 8008348:	d422      	bmi.n	8008390 <__lo0bits+0x54>
 800834a:	0798      	lsls	r0, r3, #30
 800834c:	bf49      	itett	mi
 800834e:	085b      	lsrmi	r3, r3, #1
 8008350:	089b      	lsrpl	r3, r3, #2
 8008352:	2001      	movmi	r0, #1
 8008354:	6013      	strmi	r3, [r2, #0]
 8008356:	bf5c      	itt	pl
 8008358:	2002      	movpl	r0, #2
 800835a:	6013      	strpl	r3, [r2, #0]
 800835c:	4770      	bx	lr
 800835e:	b299      	uxth	r1, r3
 8008360:	b909      	cbnz	r1, 8008366 <__lo0bits+0x2a>
 8008362:	2010      	movs	r0, #16
 8008364:	0c1b      	lsrs	r3, r3, #16
 8008366:	f013 0fff 	tst.w	r3, #255	; 0xff
 800836a:	bf04      	itt	eq
 800836c:	0a1b      	lsreq	r3, r3, #8
 800836e:	3008      	addeq	r0, #8
 8008370:	0719      	lsls	r1, r3, #28
 8008372:	bf04      	itt	eq
 8008374:	091b      	lsreq	r3, r3, #4
 8008376:	3004      	addeq	r0, #4
 8008378:	0799      	lsls	r1, r3, #30
 800837a:	bf04      	itt	eq
 800837c:	089b      	lsreq	r3, r3, #2
 800837e:	3002      	addeq	r0, #2
 8008380:	07d9      	lsls	r1, r3, #31
 8008382:	d403      	bmi.n	800838c <__lo0bits+0x50>
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	f100 0001 	add.w	r0, r0, #1
 800838a:	d003      	beq.n	8008394 <__lo0bits+0x58>
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	4770      	bx	lr
 8008390:	2000      	movs	r0, #0
 8008392:	4770      	bx	lr
 8008394:	2020      	movs	r0, #32
 8008396:	4770      	bx	lr

08008398 <__i2b>:
 8008398:	b510      	push	{r4, lr}
 800839a:	460c      	mov	r4, r1
 800839c:	2101      	movs	r1, #1
 800839e:	f7ff feb7 	bl	8008110 <_Balloc>
 80083a2:	4602      	mov	r2, r0
 80083a4:	b928      	cbnz	r0, 80083b2 <__i2b+0x1a>
 80083a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083aa:	4b04      	ldr	r3, [pc, #16]	; (80083bc <__i2b+0x24>)
 80083ac:	4804      	ldr	r0, [pc, #16]	; (80083c0 <__i2b+0x28>)
 80083ae:	f7ff faff 	bl	80079b0 <__assert_func>
 80083b2:	2301      	movs	r3, #1
 80083b4:	6144      	str	r4, [r0, #20]
 80083b6:	6103      	str	r3, [r0, #16]
 80083b8:	bd10      	pop	{r4, pc}
 80083ba:	bf00      	nop
 80083bc:	08009c2c 	.word	0x08009c2c
 80083c0:	08009cbc 	.word	0x08009cbc

080083c4 <__multiply>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	4614      	mov	r4, r2
 80083ca:	690a      	ldr	r2, [r1, #16]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	460d      	mov	r5, r1
 80083d0:	429a      	cmp	r2, r3
 80083d2:	bfbe      	ittt	lt
 80083d4:	460b      	movlt	r3, r1
 80083d6:	4625      	movlt	r5, r4
 80083d8:	461c      	movlt	r4, r3
 80083da:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80083de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80083e2:	68ab      	ldr	r3, [r5, #8]
 80083e4:	6869      	ldr	r1, [r5, #4]
 80083e6:	eb0a 0709 	add.w	r7, sl, r9
 80083ea:	42bb      	cmp	r3, r7
 80083ec:	b085      	sub	sp, #20
 80083ee:	bfb8      	it	lt
 80083f0:	3101      	addlt	r1, #1
 80083f2:	f7ff fe8d 	bl	8008110 <_Balloc>
 80083f6:	b930      	cbnz	r0, 8008406 <__multiply+0x42>
 80083f8:	4602      	mov	r2, r0
 80083fa:	f240 115d 	movw	r1, #349	; 0x15d
 80083fe:	4b41      	ldr	r3, [pc, #260]	; (8008504 <__multiply+0x140>)
 8008400:	4841      	ldr	r0, [pc, #260]	; (8008508 <__multiply+0x144>)
 8008402:	f7ff fad5 	bl	80079b0 <__assert_func>
 8008406:	f100 0614 	add.w	r6, r0, #20
 800840a:	4633      	mov	r3, r6
 800840c:	2200      	movs	r2, #0
 800840e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008412:	4543      	cmp	r3, r8
 8008414:	d31e      	bcc.n	8008454 <__multiply+0x90>
 8008416:	f105 0c14 	add.w	ip, r5, #20
 800841a:	f104 0314 	add.w	r3, r4, #20
 800841e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008422:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	ebac 0205 	sub.w	r2, ip, r5
 800842c:	3a15      	subs	r2, #21
 800842e:	f022 0203 	bic.w	r2, r2, #3
 8008432:	3204      	adds	r2, #4
 8008434:	f105 0115 	add.w	r1, r5, #21
 8008438:	458c      	cmp	ip, r1
 800843a:	bf38      	it	cc
 800843c:	2204      	movcc	r2, #4
 800843e:	9201      	str	r2, [sp, #4]
 8008440:	9a02      	ldr	r2, [sp, #8]
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	429a      	cmp	r2, r3
 8008446:	d808      	bhi.n	800845a <__multiply+0x96>
 8008448:	2f00      	cmp	r7, #0
 800844a:	dc55      	bgt.n	80084f8 <__multiply+0x134>
 800844c:	6107      	str	r7, [r0, #16]
 800844e:	b005      	add	sp, #20
 8008450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008454:	f843 2b04 	str.w	r2, [r3], #4
 8008458:	e7db      	b.n	8008412 <__multiply+0x4e>
 800845a:	f8b3 a000 	ldrh.w	sl, [r3]
 800845e:	f1ba 0f00 	cmp.w	sl, #0
 8008462:	d020      	beq.n	80084a6 <__multiply+0xe2>
 8008464:	46b1      	mov	r9, r6
 8008466:	2200      	movs	r2, #0
 8008468:	f105 0e14 	add.w	lr, r5, #20
 800846c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008470:	f8d9 b000 	ldr.w	fp, [r9]
 8008474:	b2a1      	uxth	r1, r4
 8008476:	fa1f fb8b 	uxth.w	fp, fp
 800847a:	fb0a b101 	mla	r1, sl, r1, fp
 800847e:	4411      	add	r1, r2
 8008480:	f8d9 2000 	ldr.w	r2, [r9]
 8008484:	0c24      	lsrs	r4, r4, #16
 8008486:	0c12      	lsrs	r2, r2, #16
 8008488:	fb0a 2404 	mla	r4, sl, r4, r2
 800848c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008490:	b289      	uxth	r1, r1
 8008492:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008496:	45f4      	cmp	ip, lr
 8008498:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800849c:	f849 1b04 	str.w	r1, [r9], #4
 80084a0:	d8e4      	bhi.n	800846c <__multiply+0xa8>
 80084a2:	9901      	ldr	r1, [sp, #4]
 80084a4:	5072      	str	r2, [r6, r1]
 80084a6:	9a03      	ldr	r2, [sp, #12]
 80084a8:	3304      	adds	r3, #4
 80084aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084ae:	f1b9 0f00 	cmp.w	r9, #0
 80084b2:	d01f      	beq.n	80084f4 <__multiply+0x130>
 80084b4:	46b6      	mov	lr, r6
 80084b6:	f04f 0a00 	mov.w	sl, #0
 80084ba:	6834      	ldr	r4, [r6, #0]
 80084bc:	f105 0114 	add.w	r1, r5, #20
 80084c0:	880a      	ldrh	r2, [r1, #0]
 80084c2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80084c6:	b2a4      	uxth	r4, r4
 80084c8:	fb09 b202 	mla	r2, r9, r2, fp
 80084cc:	4492      	add	sl, r2
 80084ce:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80084d2:	f84e 4b04 	str.w	r4, [lr], #4
 80084d6:	f851 4b04 	ldr.w	r4, [r1], #4
 80084da:	f8be 2000 	ldrh.w	r2, [lr]
 80084de:	0c24      	lsrs	r4, r4, #16
 80084e0:	fb09 2404 	mla	r4, r9, r4, r2
 80084e4:	458c      	cmp	ip, r1
 80084e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80084ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80084ee:	d8e7      	bhi.n	80084c0 <__multiply+0xfc>
 80084f0:	9a01      	ldr	r2, [sp, #4]
 80084f2:	50b4      	str	r4, [r6, r2]
 80084f4:	3604      	adds	r6, #4
 80084f6:	e7a3      	b.n	8008440 <__multiply+0x7c>
 80084f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1a5      	bne.n	800844c <__multiply+0x88>
 8008500:	3f01      	subs	r7, #1
 8008502:	e7a1      	b.n	8008448 <__multiply+0x84>
 8008504:	08009c2c 	.word	0x08009c2c
 8008508:	08009cbc 	.word	0x08009cbc

0800850c <__pow5mult>:
 800850c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008510:	4615      	mov	r5, r2
 8008512:	f012 0203 	ands.w	r2, r2, #3
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	d007      	beq.n	800852c <__pow5mult+0x20>
 800851c:	4c25      	ldr	r4, [pc, #148]	; (80085b4 <__pow5mult+0xa8>)
 800851e:	3a01      	subs	r2, #1
 8008520:	2300      	movs	r3, #0
 8008522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008526:	f7ff fe55 	bl	80081d4 <__multadd>
 800852a:	4607      	mov	r7, r0
 800852c:	10ad      	asrs	r5, r5, #2
 800852e:	d03d      	beq.n	80085ac <__pow5mult+0xa0>
 8008530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008532:	b97c      	cbnz	r4, 8008554 <__pow5mult+0x48>
 8008534:	2010      	movs	r0, #16
 8008536:	f7ff fdd1 	bl	80080dc <malloc>
 800853a:	4602      	mov	r2, r0
 800853c:	6270      	str	r0, [r6, #36]	; 0x24
 800853e:	b928      	cbnz	r0, 800854c <__pow5mult+0x40>
 8008540:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008544:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <__pow5mult+0xac>)
 8008546:	481d      	ldr	r0, [pc, #116]	; (80085bc <__pow5mult+0xb0>)
 8008548:	f7ff fa32 	bl	80079b0 <__assert_func>
 800854c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008550:	6004      	str	r4, [r0, #0]
 8008552:	60c4      	str	r4, [r0, #12]
 8008554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800855c:	b94c      	cbnz	r4, 8008572 <__pow5mult+0x66>
 800855e:	f240 2171 	movw	r1, #625	; 0x271
 8008562:	4630      	mov	r0, r6
 8008564:	f7ff ff18 	bl	8008398 <__i2b>
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008570:	6003      	str	r3, [r0, #0]
 8008572:	f04f 0900 	mov.w	r9, #0
 8008576:	07eb      	lsls	r3, r5, #31
 8008578:	d50a      	bpl.n	8008590 <__pow5mult+0x84>
 800857a:	4639      	mov	r1, r7
 800857c:	4622      	mov	r2, r4
 800857e:	4630      	mov	r0, r6
 8008580:	f7ff ff20 	bl	80083c4 <__multiply>
 8008584:	4680      	mov	r8, r0
 8008586:	4639      	mov	r1, r7
 8008588:	4630      	mov	r0, r6
 800858a:	f7ff fe01 	bl	8008190 <_Bfree>
 800858e:	4647      	mov	r7, r8
 8008590:	106d      	asrs	r5, r5, #1
 8008592:	d00b      	beq.n	80085ac <__pow5mult+0xa0>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	b938      	cbnz	r0, 80085a8 <__pow5mult+0x9c>
 8008598:	4622      	mov	r2, r4
 800859a:	4621      	mov	r1, r4
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ff11 	bl	80083c4 <__multiply>
 80085a2:	6020      	str	r0, [r4, #0]
 80085a4:	f8c0 9000 	str.w	r9, [r0]
 80085a8:	4604      	mov	r4, r0
 80085aa:	e7e4      	b.n	8008576 <__pow5mult+0x6a>
 80085ac:	4638      	mov	r0, r7
 80085ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b2:	bf00      	nop
 80085b4:	08009e10 	.word	0x08009e10
 80085b8:	08009b78 	.word	0x08009b78
 80085bc:	08009cbc 	.word	0x08009cbc

080085c0 <__lshift>:
 80085c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c4:	460c      	mov	r4, r1
 80085c6:	4607      	mov	r7, r0
 80085c8:	4691      	mov	r9, r2
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	6849      	ldr	r1, [r1, #4]
 80085ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085d8:	f108 0601 	add.w	r6, r8, #1
 80085dc:	42b3      	cmp	r3, r6
 80085de:	db0b      	blt.n	80085f8 <__lshift+0x38>
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff fd95 	bl	8008110 <_Balloc>
 80085e6:	4605      	mov	r5, r0
 80085e8:	b948      	cbnz	r0, 80085fe <__lshift+0x3e>
 80085ea:	4602      	mov	r2, r0
 80085ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085f0:	4b27      	ldr	r3, [pc, #156]	; (8008690 <__lshift+0xd0>)
 80085f2:	4828      	ldr	r0, [pc, #160]	; (8008694 <__lshift+0xd4>)
 80085f4:	f7ff f9dc 	bl	80079b0 <__assert_func>
 80085f8:	3101      	adds	r1, #1
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	e7ee      	b.n	80085dc <__lshift+0x1c>
 80085fe:	2300      	movs	r3, #0
 8008600:	f100 0114 	add.w	r1, r0, #20
 8008604:	f100 0210 	add.w	r2, r0, #16
 8008608:	4618      	mov	r0, r3
 800860a:	4553      	cmp	r3, sl
 800860c:	db33      	blt.n	8008676 <__lshift+0xb6>
 800860e:	6920      	ldr	r0, [r4, #16]
 8008610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008614:	f104 0314 	add.w	r3, r4, #20
 8008618:	f019 091f 	ands.w	r9, r9, #31
 800861c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008624:	d02b      	beq.n	800867e <__lshift+0xbe>
 8008626:	468a      	mov	sl, r1
 8008628:	2200      	movs	r2, #0
 800862a:	f1c9 0e20 	rsb	lr, r9, #32
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	fa00 f009 	lsl.w	r0, r0, r9
 8008634:	4302      	orrs	r2, r0
 8008636:	f84a 2b04 	str.w	r2, [sl], #4
 800863a:	f853 2b04 	ldr.w	r2, [r3], #4
 800863e:	459c      	cmp	ip, r3
 8008640:	fa22 f20e 	lsr.w	r2, r2, lr
 8008644:	d8f3      	bhi.n	800862e <__lshift+0x6e>
 8008646:	ebac 0304 	sub.w	r3, ip, r4
 800864a:	3b15      	subs	r3, #21
 800864c:	f023 0303 	bic.w	r3, r3, #3
 8008650:	3304      	adds	r3, #4
 8008652:	f104 0015 	add.w	r0, r4, #21
 8008656:	4584      	cmp	ip, r0
 8008658:	bf38      	it	cc
 800865a:	2304      	movcc	r3, #4
 800865c:	50ca      	str	r2, [r1, r3]
 800865e:	b10a      	cbz	r2, 8008664 <__lshift+0xa4>
 8008660:	f108 0602 	add.w	r6, r8, #2
 8008664:	3e01      	subs	r6, #1
 8008666:	4638      	mov	r0, r7
 8008668:	4621      	mov	r1, r4
 800866a:	612e      	str	r6, [r5, #16]
 800866c:	f7ff fd90 	bl	8008190 <_Bfree>
 8008670:	4628      	mov	r0, r5
 8008672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008676:	f842 0f04 	str.w	r0, [r2, #4]!
 800867a:	3301      	adds	r3, #1
 800867c:	e7c5      	b.n	800860a <__lshift+0x4a>
 800867e:	3904      	subs	r1, #4
 8008680:	f853 2b04 	ldr.w	r2, [r3], #4
 8008684:	459c      	cmp	ip, r3
 8008686:	f841 2f04 	str.w	r2, [r1, #4]!
 800868a:	d8f9      	bhi.n	8008680 <__lshift+0xc0>
 800868c:	e7ea      	b.n	8008664 <__lshift+0xa4>
 800868e:	bf00      	nop
 8008690:	08009c2c 	.word	0x08009c2c
 8008694:	08009cbc 	.word	0x08009cbc

08008698 <__mcmp>:
 8008698:	4603      	mov	r3, r0
 800869a:	690a      	ldr	r2, [r1, #16]
 800869c:	6900      	ldr	r0, [r0, #16]
 800869e:	b530      	push	{r4, r5, lr}
 80086a0:	1a80      	subs	r0, r0, r2
 80086a2:	d10d      	bne.n	80086c0 <__mcmp+0x28>
 80086a4:	3314      	adds	r3, #20
 80086a6:	3114      	adds	r1, #20
 80086a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086b8:	4295      	cmp	r5, r2
 80086ba:	d002      	beq.n	80086c2 <__mcmp+0x2a>
 80086bc:	d304      	bcc.n	80086c8 <__mcmp+0x30>
 80086be:	2001      	movs	r0, #1
 80086c0:	bd30      	pop	{r4, r5, pc}
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	d3f4      	bcc.n	80086b0 <__mcmp+0x18>
 80086c6:	e7fb      	b.n	80086c0 <__mcmp+0x28>
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	e7f8      	b.n	80086c0 <__mcmp+0x28>
	...

080086d0 <__mdiff>:
 80086d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	4606      	mov	r6, r0
 80086d8:	4611      	mov	r1, r2
 80086da:	4620      	mov	r0, r4
 80086dc:	4692      	mov	sl, r2
 80086de:	f7ff ffdb 	bl	8008698 <__mcmp>
 80086e2:	1e05      	subs	r5, r0, #0
 80086e4:	d111      	bne.n	800870a <__mdiff+0x3a>
 80086e6:	4629      	mov	r1, r5
 80086e8:	4630      	mov	r0, r6
 80086ea:	f7ff fd11 	bl	8008110 <_Balloc>
 80086ee:	4602      	mov	r2, r0
 80086f0:	b928      	cbnz	r0, 80086fe <__mdiff+0x2e>
 80086f2:	f240 2132 	movw	r1, #562	; 0x232
 80086f6:	4b3c      	ldr	r3, [pc, #240]	; (80087e8 <__mdiff+0x118>)
 80086f8:	483c      	ldr	r0, [pc, #240]	; (80087ec <__mdiff+0x11c>)
 80086fa:	f7ff f959 	bl	80079b0 <__assert_func>
 80086fe:	2301      	movs	r3, #1
 8008700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008704:	4610      	mov	r0, r2
 8008706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	bfa4      	itt	ge
 800870c:	4653      	movge	r3, sl
 800870e:	46a2      	movge	sl, r4
 8008710:	4630      	mov	r0, r6
 8008712:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008716:	bfa6      	itte	ge
 8008718:	461c      	movge	r4, r3
 800871a:	2500      	movge	r5, #0
 800871c:	2501      	movlt	r5, #1
 800871e:	f7ff fcf7 	bl	8008110 <_Balloc>
 8008722:	4602      	mov	r2, r0
 8008724:	b918      	cbnz	r0, 800872e <__mdiff+0x5e>
 8008726:	f44f 7110 	mov.w	r1, #576	; 0x240
 800872a:	4b2f      	ldr	r3, [pc, #188]	; (80087e8 <__mdiff+0x118>)
 800872c:	e7e4      	b.n	80086f8 <__mdiff+0x28>
 800872e:	f100 0814 	add.w	r8, r0, #20
 8008732:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008736:	60c5      	str	r5, [r0, #12]
 8008738:	f04f 0c00 	mov.w	ip, #0
 800873c:	f10a 0514 	add.w	r5, sl, #20
 8008740:	f10a 0010 	add.w	r0, sl, #16
 8008744:	46c2      	mov	sl, r8
 8008746:	6926      	ldr	r6, [r4, #16]
 8008748:	f104 0914 	add.w	r9, r4, #20
 800874c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008750:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008754:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008758:	f859 3b04 	ldr.w	r3, [r9], #4
 800875c:	fa1f f18b 	uxth.w	r1, fp
 8008760:	4461      	add	r1, ip
 8008762:	fa1f fc83 	uxth.w	ip, r3
 8008766:	0c1b      	lsrs	r3, r3, #16
 8008768:	eba1 010c 	sub.w	r1, r1, ip
 800876c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008770:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008774:	b289      	uxth	r1, r1
 8008776:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800877a:	454e      	cmp	r6, r9
 800877c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008780:	f84a 3b04 	str.w	r3, [sl], #4
 8008784:	d8e6      	bhi.n	8008754 <__mdiff+0x84>
 8008786:	1b33      	subs	r3, r6, r4
 8008788:	3b15      	subs	r3, #21
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	3415      	adds	r4, #21
 8008790:	3304      	adds	r3, #4
 8008792:	42a6      	cmp	r6, r4
 8008794:	bf38      	it	cc
 8008796:	2304      	movcc	r3, #4
 8008798:	441d      	add	r5, r3
 800879a:	4443      	add	r3, r8
 800879c:	461e      	mov	r6, r3
 800879e:	462c      	mov	r4, r5
 80087a0:	4574      	cmp	r4, lr
 80087a2:	d30e      	bcc.n	80087c2 <__mdiff+0xf2>
 80087a4:	f10e 0103 	add.w	r1, lr, #3
 80087a8:	1b49      	subs	r1, r1, r5
 80087aa:	f021 0103 	bic.w	r1, r1, #3
 80087ae:	3d03      	subs	r5, #3
 80087b0:	45ae      	cmp	lr, r5
 80087b2:	bf38      	it	cc
 80087b4:	2100      	movcc	r1, #0
 80087b6:	4419      	add	r1, r3
 80087b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80087bc:	b18b      	cbz	r3, 80087e2 <__mdiff+0x112>
 80087be:	6117      	str	r7, [r2, #16]
 80087c0:	e7a0      	b.n	8008704 <__mdiff+0x34>
 80087c2:	f854 8b04 	ldr.w	r8, [r4], #4
 80087c6:	fa1f f188 	uxth.w	r1, r8
 80087ca:	4461      	add	r1, ip
 80087cc:	1408      	asrs	r0, r1, #16
 80087ce:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80087d2:	b289      	uxth	r1, r1
 80087d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80087d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087dc:	f846 1b04 	str.w	r1, [r6], #4
 80087e0:	e7de      	b.n	80087a0 <__mdiff+0xd0>
 80087e2:	3f01      	subs	r7, #1
 80087e4:	e7e8      	b.n	80087b8 <__mdiff+0xe8>
 80087e6:	bf00      	nop
 80087e8:	08009c2c 	.word	0x08009c2c
 80087ec:	08009cbc 	.word	0x08009cbc

080087f0 <__ulp>:
 80087f0:	4b11      	ldr	r3, [pc, #68]	; (8008838 <__ulp+0x48>)
 80087f2:	400b      	ands	r3, r1
 80087f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dd02      	ble.n	8008802 <__ulp+0x12>
 80087fc:	2000      	movs	r0, #0
 80087fe:	4619      	mov	r1, r3
 8008800:	4770      	bx	lr
 8008802:	425b      	negs	r3, r3
 8008804:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008808:	f04f 0000 	mov.w	r0, #0
 800880c:	f04f 0100 	mov.w	r1, #0
 8008810:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008814:	da04      	bge.n	8008820 <__ulp+0x30>
 8008816:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800881a:	fa43 f102 	asr.w	r1, r3, r2
 800881e:	4770      	bx	lr
 8008820:	f1a2 0314 	sub.w	r3, r2, #20
 8008824:	2b1e      	cmp	r3, #30
 8008826:	bfd6      	itet	le
 8008828:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800882c:	2301      	movgt	r3, #1
 800882e:	fa22 f303 	lsrle.w	r3, r2, r3
 8008832:	4618      	mov	r0, r3
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	7ff00000 	.word	0x7ff00000

0800883c <__b2d>:
 800883c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008840:	6907      	ldr	r7, [r0, #16]
 8008842:	f100 0914 	add.w	r9, r0, #20
 8008846:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800884a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800884e:	f1a7 0804 	sub.w	r8, r7, #4
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff fd52 	bl	80082fc <__hi0bits>
 8008858:	f1c0 0320 	rsb	r3, r0, #32
 800885c:	280a      	cmp	r0, #10
 800885e:	600b      	str	r3, [r1, #0]
 8008860:	491f      	ldr	r1, [pc, #124]	; (80088e0 <__b2d+0xa4>)
 8008862:	dc17      	bgt.n	8008894 <__b2d+0x58>
 8008864:	45c1      	cmp	r9, r8
 8008866:	bf28      	it	cs
 8008868:	2200      	movcs	r2, #0
 800886a:	f1c0 0c0b 	rsb	ip, r0, #11
 800886e:	fa26 f30c 	lsr.w	r3, r6, ip
 8008872:	bf38      	it	cc
 8008874:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008878:	ea43 0501 	orr.w	r5, r3, r1
 800887c:	f100 0315 	add.w	r3, r0, #21
 8008880:	fa06 f303 	lsl.w	r3, r6, r3
 8008884:	fa22 f20c 	lsr.w	r2, r2, ip
 8008888:	ea43 0402 	orr.w	r4, r3, r2
 800888c:	4620      	mov	r0, r4
 800888e:	4629      	mov	r1, r5
 8008890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008894:	45c1      	cmp	r9, r8
 8008896:	bf2e      	itee	cs
 8008898:	2200      	movcs	r2, #0
 800889a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800889e:	f1a7 0808 	subcc.w	r8, r7, #8
 80088a2:	f1b0 030b 	subs.w	r3, r0, #11
 80088a6:	d016      	beq.n	80088d6 <__b2d+0x9a>
 80088a8:	f1c3 0720 	rsb	r7, r3, #32
 80088ac:	fa22 f107 	lsr.w	r1, r2, r7
 80088b0:	45c8      	cmp	r8, r9
 80088b2:	fa06 f603 	lsl.w	r6, r6, r3
 80088b6:	ea46 0601 	orr.w	r6, r6, r1
 80088ba:	bf94      	ite	ls
 80088bc:	2100      	movls	r1, #0
 80088be:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80088c2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80088c6:	fa02 f003 	lsl.w	r0, r2, r3
 80088ca:	40f9      	lsrs	r1, r7
 80088cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088d0:	ea40 0401 	orr.w	r4, r0, r1
 80088d4:	e7da      	b.n	800888c <__b2d+0x50>
 80088d6:	4614      	mov	r4, r2
 80088d8:	ea46 0501 	orr.w	r5, r6, r1
 80088dc:	e7d6      	b.n	800888c <__b2d+0x50>
 80088de:	bf00      	nop
 80088e0:	3ff00000 	.word	0x3ff00000

080088e4 <__d2b>:
 80088e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088e8:	2101      	movs	r1, #1
 80088ea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80088ee:	4690      	mov	r8, r2
 80088f0:	461d      	mov	r5, r3
 80088f2:	f7ff fc0d 	bl	8008110 <_Balloc>
 80088f6:	4604      	mov	r4, r0
 80088f8:	b930      	cbnz	r0, 8008908 <__d2b+0x24>
 80088fa:	4602      	mov	r2, r0
 80088fc:	f240 310a 	movw	r1, #778	; 0x30a
 8008900:	4b24      	ldr	r3, [pc, #144]	; (8008994 <__d2b+0xb0>)
 8008902:	4825      	ldr	r0, [pc, #148]	; (8008998 <__d2b+0xb4>)
 8008904:	f7ff f854 	bl	80079b0 <__assert_func>
 8008908:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800890c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008910:	bb2d      	cbnz	r5, 800895e <__d2b+0x7a>
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f1b8 0300 	subs.w	r3, r8, #0
 8008918:	d026      	beq.n	8008968 <__d2b+0x84>
 800891a:	4668      	mov	r0, sp
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	f7ff fd0d 	bl	800833c <__lo0bits>
 8008922:	9900      	ldr	r1, [sp, #0]
 8008924:	b1f0      	cbz	r0, 8008964 <__d2b+0x80>
 8008926:	9a01      	ldr	r2, [sp, #4]
 8008928:	f1c0 0320 	rsb	r3, r0, #32
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	430b      	orrs	r3, r1
 8008932:	40c2      	lsrs	r2, r0
 8008934:	6163      	str	r3, [r4, #20]
 8008936:	9201      	str	r2, [sp, #4]
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	bf14      	ite	ne
 800893e:	2102      	movne	r1, #2
 8008940:	2101      	moveq	r1, #1
 8008942:	61a3      	str	r3, [r4, #24]
 8008944:	6121      	str	r1, [r4, #16]
 8008946:	b1c5      	cbz	r5, 800897a <__d2b+0x96>
 8008948:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800894c:	4405      	add	r5, r0
 800894e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008952:	603d      	str	r5, [r7, #0]
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	4620      	mov	r0, r4
 8008958:	b002      	add	sp, #8
 800895a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008962:	e7d6      	b.n	8008912 <__d2b+0x2e>
 8008964:	6161      	str	r1, [r4, #20]
 8008966:	e7e7      	b.n	8008938 <__d2b+0x54>
 8008968:	a801      	add	r0, sp, #4
 800896a:	f7ff fce7 	bl	800833c <__lo0bits>
 800896e:	2101      	movs	r1, #1
 8008970:	9b01      	ldr	r3, [sp, #4]
 8008972:	6121      	str	r1, [r4, #16]
 8008974:	6163      	str	r3, [r4, #20]
 8008976:	3020      	adds	r0, #32
 8008978:	e7e5      	b.n	8008946 <__d2b+0x62>
 800897a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800897e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008982:	6038      	str	r0, [r7, #0]
 8008984:	6918      	ldr	r0, [r3, #16]
 8008986:	f7ff fcb9 	bl	80082fc <__hi0bits>
 800898a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800898e:	6031      	str	r1, [r6, #0]
 8008990:	e7e1      	b.n	8008956 <__d2b+0x72>
 8008992:	bf00      	nop
 8008994:	08009c2c 	.word	0x08009c2c
 8008998:	08009cbc 	.word	0x08009cbc

0800899c <__ratio>:
 800899c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4688      	mov	r8, r1
 80089a2:	4669      	mov	r1, sp
 80089a4:	4681      	mov	r9, r0
 80089a6:	f7ff ff49 	bl	800883c <__b2d>
 80089aa:	460f      	mov	r7, r1
 80089ac:	4604      	mov	r4, r0
 80089ae:	460d      	mov	r5, r1
 80089b0:	4640      	mov	r0, r8
 80089b2:	a901      	add	r1, sp, #4
 80089b4:	f7ff ff42 	bl	800883c <__b2d>
 80089b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80089c0:	468b      	mov	fp, r1
 80089c2:	eba3 0c02 	sub.w	ip, r3, r2
 80089c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089ca:	1a9b      	subs	r3, r3, r2
 80089cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfd5      	itete	le
 80089d4:	460a      	movle	r2, r1
 80089d6:	462a      	movgt	r2, r5
 80089d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089dc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80089e0:	bfd8      	it	le
 80089e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80089e6:	465b      	mov	r3, fp
 80089e8:	4602      	mov	r2, r0
 80089ea:	4639      	mov	r1, r7
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7f7 febf 	bl	8000770 <__aeabi_ddiv>
 80089f2:	b003      	add	sp, #12
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089f8 <__copybits>:
 80089f8:	3901      	subs	r1, #1
 80089fa:	b570      	push	{r4, r5, r6, lr}
 80089fc:	1149      	asrs	r1, r1, #5
 80089fe:	6914      	ldr	r4, [r2, #16]
 8008a00:	3101      	adds	r1, #1
 8008a02:	f102 0314 	add.w	r3, r2, #20
 8008a06:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a0a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a0e:	1f05      	subs	r5, r0, #4
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	d30c      	bcc.n	8008a2e <__copybits+0x36>
 8008a14:	1aa3      	subs	r3, r4, r2
 8008a16:	3b11      	subs	r3, #17
 8008a18:	f023 0303 	bic.w	r3, r3, #3
 8008a1c:	3211      	adds	r2, #17
 8008a1e:	42a2      	cmp	r2, r4
 8008a20:	bf88      	it	hi
 8008a22:	2300      	movhi	r3, #0
 8008a24:	4418      	add	r0, r3
 8008a26:	2300      	movs	r3, #0
 8008a28:	4288      	cmp	r0, r1
 8008a2a:	d305      	bcc.n	8008a38 <__copybits+0x40>
 8008a2c:	bd70      	pop	{r4, r5, r6, pc}
 8008a2e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a32:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a36:	e7eb      	b.n	8008a10 <__copybits+0x18>
 8008a38:	f840 3b04 	str.w	r3, [r0], #4
 8008a3c:	e7f4      	b.n	8008a28 <__copybits+0x30>

08008a3e <__any_on>:
 8008a3e:	f100 0214 	add.w	r2, r0, #20
 8008a42:	6900      	ldr	r0, [r0, #16]
 8008a44:	114b      	asrs	r3, r1, #5
 8008a46:	4298      	cmp	r0, r3
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	db11      	blt.n	8008a70 <__any_on+0x32>
 8008a4c:	dd0a      	ble.n	8008a64 <__any_on+0x26>
 8008a4e:	f011 011f 	ands.w	r1, r1, #31
 8008a52:	d007      	beq.n	8008a64 <__any_on+0x26>
 8008a54:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a58:	fa24 f001 	lsr.w	r0, r4, r1
 8008a5c:	fa00 f101 	lsl.w	r1, r0, r1
 8008a60:	428c      	cmp	r4, r1
 8008a62:	d10b      	bne.n	8008a7c <__any_on+0x3e>
 8008a64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d803      	bhi.n	8008a74 <__any_on+0x36>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	bd10      	pop	{r4, pc}
 8008a70:	4603      	mov	r3, r0
 8008a72:	e7f7      	b.n	8008a64 <__any_on+0x26>
 8008a74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d0f5      	beq.n	8008a68 <__any_on+0x2a>
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	e7f6      	b.n	8008a6e <__any_on+0x30>

08008a80 <_calloc_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	fb02 f501 	mul.w	r5, r2, r1
 8008a86:	4629      	mov	r1, r5
 8008a88:	f000 f854 	bl	8008b34 <_malloc_r>
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	b118      	cbz	r0, 8008a98 <_calloc_r+0x18>
 8008a90:	462a      	mov	r2, r5
 8008a92:	2100      	movs	r1, #0
 8008a94:	f7fe f8f4 	bl	8006c80 <memset>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}

08008a9c <_free_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d043      	beq.n	8008b2c <_free_r+0x90>
 8008aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa8:	1f0c      	subs	r4, r1, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfb8      	it	lt
 8008aae:	18e4      	addlt	r4, r4, r3
 8008ab0:	f000 feb2 	bl	8009818 <__malloc_lock>
 8008ab4:	4a1e      	ldr	r2, [pc, #120]	; (8008b30 <_free_r+0x94>)
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	4610      	mov	r0, r2
 8008aba:	b933      	cbnz	r3, 8008aca <_free_r+0x2e>
 8008abc:	6063      	str	r3, [r4, #4]
 8008abe:	6014      	str	r4, [r2, #0]
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac6:	f000 bead 	b.w	8009824 <__malloc_unlock>
 8008aca:	42a3      	cmp	r3, r4
 8008acc:	d90a      	bls.n	8008ae4 <_free_r+0x48>
 8008ace:	6821      	ldr	r1, [r4, #0]
 8008ad0:	1862      	adds	r2, r4, r1
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bf01      	itttt	eq
 8008ad6:	681a      	ldreq	r2, [r3, #0]
 8008ad8:	685b      	ldreq	r3, [r3, #4]
 8008ada:	1852      	addeq	r2, r2, r1
 8008adc:	6022      	streq	r2, [r4, #0]
 8008ade:	6063      	str	r3, [r4, #4]
 8008ae0:	6004      	str	r4, [r0, #0]
 8008ae2:	e7ed      	b.n	8008ac0 <_free_r+0x24>
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	b10b      	cbz	r3, 8008aee <_free_r+0x52>
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	d9fa      	bls.n	8008ae4 <_free_r+0x48>
 8008aee:	6811      	ldr	r1, [r2, #0]
 8008af0:	1850      	adds	r0, r2, r1
 8008af2:	42a0      	cmp	r0, r4
 8008af4:	d10b      	bne.n	8008b0e <_free_r+0x72>
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	4401      	add	r1, r0
 8008afa:	1850      	adds	r0, r2, r1
 8008afc:	4283      	cmp	r3, r0
 8008afe:	6011      	str	r1, [r2, #0]
 8008b00:	d1de      	bne.n	8008ac0 <_free_r+0x24>
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	4401      	add	r1, r0
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	6053      	str	r3, [r2, #4]
 8008b0c:	e7d8      	b.n	8008ac0 <_free_r+0x24>
 8008b0e:	d902      	bls.n	8008b16 <_free_r+0x7a>
 8008b10:	230c      	movs	r3, #12
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	e7d4      	b.n	8008ac0 <_free_r+0x24>
 8008b16:	6820      	ldr	r0, [r4, #0]
 8008b18:	1821      	adds	r1, r4, r0
 8008b1a:	428b      	cmp	r3, r1
 8008b1c:	bf01      	itttt	eq
 8008b1e:	6819      	ldreq	r1, [r3, #0]
 8008b20:	685b      	ldreq	r3, [r3, #4]
 8008b22:	1809      	addeq	r1, r1, r0
 8008b24:	6021      	streq	r1, [r4, #0]
 8008b26:	6063      	str	r3, [r4, #4]
 8008b28:	6054      	str	r4, [r2, #4]
 8008b2a:	e7c9      	b.n	8008ac0 <_free_r+0x24>
 8008b2c:	bd38      	pop	{r3, r4, r5, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000858 	.word	0x20000858

08008b34 <_malloc_r>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	1ccd      	adds	r5, r1, #3
 8008b38:	f025 0503 	bic.w	r5, r5, #3
 8008b3c:	3508      	adds	r5, #8
 8008b3e:	2d0c      	cmp	r5, #12
 8008b40:	bf38      	it	cc
 8008b42:	250c      	movcc	r5, #12
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	4606      	mov	r6, r0
 8008b48:	db01      	blt.n	8008b4e <_malloc_r+0x1a>
 8008b4a:	42a9      	cmp	r1, r5
 8008b4c:	d903      	bls.n	8008b56 <_malloc_r+0x22>
 8008b4e:	230c      	movs	r3, #12
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	2000      	movs	r0, #0
 8008b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b56:	f000 fe5f 	bl	8009818 <__malloc_lock>
 8008b5a:	4921      	ldr	r1, [pc, #132]	; (8008be0 <_malloc_r+0xac>)
 8008b5c:	680a      	ldr	r2, [r1, #0]
 8008b5e:	4614      	mov	r4, r2
 8008b60:	b99c      	cbnz	r4, 8008b8a <_malloc_r+0x56>
 8008b62:	4f20      	ldr	r7, [pc, #128]	; (8008be4 <_malloc_r+0xb0>)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	b923      	cbnz	r3, 8008b72 <_malloc_r+0x3e>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f000 fb30 	bl	80091d0 <_sbrk_r>
 8008b70:	6038      	str	r0, [r7, #0]
 8008b72:	4629      	mov	r1, r5
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 fb2b 	bl	80091d0 <_sbrk_r>
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	d123      	bne.n	8008bc6 <_malloc_r+0x92>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	4630      	mov	r0, r6
 8008b82:	6033      	str	r3, [r6, #0]
 8008b84:	f000 fe4e 	bl	8009824 <__malloc_unlock>
 8008b88:	e7e3      	b.n	8008b52 <_malloc_r+0x1e>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	1b5b      	subs	r3, r3, r5
 8008b8e:	d417      	bmi.n	8008bc0 <_malloc_r+0x8c>
 8008b90:	2b0b      	cmp	r3, #11
 8008b92:	d903      	bls.n	8008b9c <_malloc_r+0x68>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	441c      	add	r4, r3
 8008b98:	6025      	str	r5, [r4, #0]
 8008b9a:	e004      	b.n	8008ba6 <_malloc_r+0x72>
 8008b9c:	6863      	ldr	r3, [r4, #4]
 8008b9e:	42a2      	cmp	r2, r4
 8008ba0:	bf0c      	ite	eq
 8008ba2:	600b      	streq	r3, [r1, #0]
 8008ba4:	6053      	strne	r3, [r2, #4]
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 fe3c 	bl	8009824 <__malloc_unlock>
 8008bac:	f104 000b 	add.w	r0, r4, #11
 8008bb0:	1d23      	adds	r3, r4, #4
 8008bb2:	f020 0007 	bic.w	r0, r0, #7
 8008bb6:	1ac2      	subs	r2, r0, r3
 8008bb8:	d0cc      	beq.n	8008b54 <_malloc_r+0x20>
 8008bba:	1a1b      	subs	r3, r3, r0
 8008bbc:	50a3      	str	r3, [r4, r2]
 8008bbe:	e7c9      	b.n	8008b54 <_malloc_r+0x20>
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	6864      	ldr	r4, [r4, #4]
 8008bc4:	e7cc      	b.n	8008b60 <_malloc_r+0x2c>
 8008bc6:	1cc4      	adds	r4, r0, #3
 8008bc8:	f024 0403 	bic.w	r4, r4, #3
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d0e3      	beq.n	8008b98 <_malloc_r+0x64>
 8008bd0:	1a21      	subs	r1, r4, r0
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 fafc 	bl	80091d0 <_sbrk_r>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d1dd      	bne.n	8008b98 <_malloc_r+0x64>
 8008bdc:	e7cf      	b.n	8008b7e <_malloc_r+0x4a>
 8008bde:	bf00      	nop
 8008be0:	20000858 	.word	0x20000858
 8008be4:	2000085c 	.word	0x2000085c

08008be8 <__sfputc_r>:
 8008be8:	6893      	ldr	r3, [r2, #8]
 8008bea:	b410      	push	{r4}
 8008bec:	3b01      	subs	r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	6093      	str	r3, [r2, #8]
 8008bf2:	da07      	bge.n	8008c04 <__sfputc_r+0x1c>
 8008bf4:	6994      	ldr	r4, [r2, #24]
 8008bf6:	42a3      	cmp	r3, r4
 8008bf8:	db01      	blt.n	8008bfe <__sfputc_r+0x16>
 8008bfa:	290a      	cmp	r1, #10
 8008bfc:	d102      	bne.n	8008c04 <__sfputc_r+0x1c>
 8008bfe:	bc10      	pop	{r4}
 8008c00:	f000 bb08 	b.w	8009214 <__swbuf_r>
 8008c04:	6813      	ldr	r3, [r2, #0]
 8008c06:	1c58      	adds	r0, r3, #1
 8008c08:	6010      	str	r0, [r2, #0]
 8008c0a:	7019      	strb	r1, [r3, #0]
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	bc10      	pop	{r4}
 8008c10:	4770      	bx	lr

08008c12 <__sfputs_r>:
 8008c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	4614      	mov	r4, r2
 8008c1a:	18d5      	adds	r5, r2, r3
 8008c1c:	42ac      	cmp	r4, r5
 8008c1e:	d101      	bne.n	8008c24 <__sfputs_r+0x12>
 8008c20:	2000      	movs	r0, #0
 8008c22:	e007      	b.n	8008c34 <__sfputs_r+0x22>
 8008c24:	463a      	mov	r2, r7
 8008c26:	4630      	mov	r0, r6
 8008c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2c:	f7ff ffdc 	bl	8008be8 <__sfputc_r>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d1f3      	bne.n	8008c1c <__sfputs_r+0xa>
 8008c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c38 <_vfiprintf_r>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	460d      	mov	r5, r1
 8008c3e:	4614      	mov	r4, r2
 8008c40:	4698      	mov	r8, r3
 8008c42:	4606      	mov	r6, r0
 8008c44:	b09d      	sub	sp, #116	; 0x74
 8008c46:	b118      	cbz	r0, 8008c50 <_vfiprintf_r+0x18>
 8008c48:	6983      	ldr	r3, [r0, #24]
 8008c4a:	b90b      	cbnz	r3, 8008c50 <_vfiprintf_r+0x18>
 8008c4c:	f000 fcd2 	bl	80095f4 <__sinit>
 8008c50:	4b89      	ldr	r3, [pc, #548]	; (8008e78 <_vfiprintf_r+0x240>)
 8008c52:	429d      	cmp	r5, r3
 8008c54:	d11b      	bne.n	8008c8e <_vfiprintf_r+0x56>
 8008c56:	6875      	ldr	r5, [r6, #4]
 8008c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c5a:	07d9      	lsls	r1, r3, #31
 8008c5c:	d405      	bmi.n	8008c6a <_vfiprintf_r+0x32>
 8008c5e:	89ab      	ldrh	r3, [r5, #12]
 8008c60:	059a      	lsls	r2, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_vfiprintf_r+0x32>
 8008c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c66:	f000 fd63 	bl	8009730 <__retarget_lock_acquire_recursive>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	071b      	lsls	r3, r3, #28
 8008c6e:	d501      	bpl.n	8008c74 <_vfiprintf_r+0x3c>
 8008c70:	692b      	ldr	r3, [r5, #16]
 8008c72:	b9eb      	cbnz	r3, 8008cb0 <_vfiprintf_r+0x78>
 8008c74:	4629      	mov	r1, r5
 8008c76:	4630      	mov	r0, r6
 8008c78:	f000 fb2c 	bl	80092d4 <__swsetup_r>
 8008c7c:	b1c0      	cbz	r0, 8008cb0 <_vfiprintf_r+0x78>
 8008c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c80:	07dc      	lsls	r4, r3, #31
 8008c82:	d50e      	bpl.n	8008ca2 <_vfiprintf_r+0x6a>
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295
 8008c88:	b01d      	add	sp, #116	; 0x74
 8008c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8e:	4b7b      	ldr	r3, [pc, #492]	; (8008e7c <_vfiprintf_r+0x244>)
 8008c90:	429d      	cmp	r5, r3
 8008c92:	d101      	bne.n	8008c98 <_vfiprintf_r+0x60>
 8008c94:	68b5      	ldr	r5, [r6, #8]
 8008c96:	e7df      	b.n	8008c58 <_vfiprintf_r+0x20>
 8008c98:	4b79      	ldr	r3, [pc, #484]	; (8008e80 <_vfiprintf_r+0x248>)
 8008c9a:	429d      	cmp	r5, r3
 8008c9c:	bf08      	it	eq
 8008c9e:	68f5      	ldreq	r5, [r6, #12]
 8008ca0:	e7da      	b.n	8008c58 <_vfiprintf_r+0x20>
 8008ca2:	89ab      	ldrh	r3, [r5, #12]
 8008ca4:	0598      	lsls	r0, r3, #22
 8008ca6:	d4ed      	bmi.n	8008c84 <_vfiprintf_r+0x4c>
 8008ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008caa:	f000 fd42 	bl	8009732 <__retarget_lock_release_recursive>
 8008cae:	e7e9      	b.n	8008c84 <_vfiprintf_r+0x4c>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cba:	2330      	movs	r3, #48	; 0x30
 8008cbc:	f04f 0901 	mov.w	r9, #1
 8008cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e84 <_vfiprintf_r+0x24c>
 8008cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ccc:	4623      	mov	r3, r4
 8008cce:	469a      	mov	sl, r3
 8008cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd4:	b10a      	cbz	r2, 8008cda <_vfiprintf_r+0xa2>
 8008cd6:	2a25      	cmp	r2, #37	; 0x25
 8008cd8:	d1f9      	bne.n	8008cce <_vfiprintf_r+0x96>
 8008cda:	ebba 0b04 	subs.w	fp, sl, r4
 8008cde:	d00b      	beq.n	8008cf8 <_vfiprintf_r+0xc0>
 8008ce0:	465b      	mov	r3, fp
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7ff ff93 	bl	8008c12 <__sfputs_r>
 8008cec:	3001      	adds	r0, #1
 8008cee:	f000 80aa 	beq.w	8008e46 <_vfiprintf_r+0x20e>
 8008cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cf4:	445a      	add	r2, fp
 8008cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 80a2 	beq.w	8008e46 <_vfiprintf_r+0x20e>
 8008d02:	2300      	movs	r3, #0
 8008d04:	f04f 32ff 	mov.w	r2, #4294967295
 8008d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d0c:	f10a 0a01 	add.w	sl, sl, #1
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d18:	931a      	str	r3, [sp, #104]	; 0x68
 8008d1a:	4654      	mov	r4, sl
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d22:	4858      	ldr	r0, [pc, #352]	; (8008e84 <_vfiprintf_r+0x24c>)
 8008d24:	f000 fd6a 	bl	80097fc <memchr>
 8008d28:	9a04      	ldr	r2, [sp, #16]
 8008d2a:	b9d8      	cbnz	r0, 8008d64 <_vfiprintf_r+0x12c>
 8008d2c:	06d1      	lsls	r1, r2, #27
 8008d2e:	bf44      	itt	mi
 8008d30:	2320      	movmi	r3, #32
 8008d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d36:	0713      	lsls	r3, r2, #28
 8008d38:	bf44      	itt	mi
 8008d3a:	232b      	movmi	r3, #43	; 0x2b
 8008d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d40:	f89a 3000 	ldrb.w	r3, [sl]
 8008d44:	2b2a      	cmp	r3, #42	; 0x2a
 8008d46:	d015      	beq.n	8008d74 <_vfiprintf_r+0x13c>
 8008d48:	4654      	mov	r4, sl
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f04f 0c0a 	mov.w	ip, #10
 8008d50:	9a07      	ldr	r2, [sp, #28]
 8008d52:	4621      	mov	r1, r4
 8008d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d58:	3b30      	subs	r3, #48	; 0x30
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d94e      	bls.n	8008dfc <_vfiprintf_r+0x1c4>
 8008d5e:	b1b0      	cbz	r0, 8008d8e <_vfiprintf_r+0x156>
 8008d60:	9207      	str	r2, [sp, #28]
 8008d62:	e014      	b.n	8008d8e <_vfiprintf_r+0x156>
 8008d64:	eba0 0308 	sub.w	r3, r0, r8
 8008d68:	fa09 f303 	lsl.w	r3, r9, r3
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	46a2      	mov	sl, r4
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	e7d2      	b.n	8008d1a <_vfiprintf_r+0xe2>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	1d19      	adds	r1, r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	9103      	str	r1, [sp, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfbb      	ittet	lt
 8008d80:	425b      	neglt	r3, r3
 8008d82:	f042 0202 	orrlt.w	r2, r2, #2
 8008d86:	9307      	strge	r3, [sp, #28]
 8008d88:	9307      	strlt	r3, [sp, #28]
 8008d8a:	bfb8      	it	lt
 8008d8c:	9204      	strlt	r2, [sp, #16]
 8008d8e:	7823      	ldrb	r3, [r4, #0]
 8008d90:	2b2e      	cmp	r3, #46	; 0x2e
 8008d92:	d10c      	bne.n	8008dae <_vfiprintf_r+0x176>
 8008d94:	7863      	ldrb	r3, [r4, #1]
 8008d96:	2b2a      	cmp	r3, #42	; 0x2a
 8008d98:	d135      	bne.n	8008e06 <_vfiprintf_r+0x1ce>
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	3402      	adds	r4, #2
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	9203      	str	r2, [sp, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfb8      	it	lt
 8008da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e94 <_vfiprintf_r+0x25c>
 8008db2:	2203      	movs	r2, #3
 8008db4:	4650      	mov	r0, sl
 8008db6:	7821      	ldrb	r1, [r4, #0]
 8008db8:	f000 fd20 	bl	80097fc <memchr>
 8008dbc:	b140      	cbz	r0, 8008dd0 <_vfiprintf_r+0x198>
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	eba0 000a 	sub.w	r0, r0, sl
 8008dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8008dc8:	9b04      	ldr	r3, [sp, #16]
 8008dca:	3401      	adds	r4, #1
 8008dcc:	4303      	orrs	r3, r0
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd4:	2206      	movs	r2, #6
 8008dd6:	482c      	ldr	r0, [pc, #176]	; (8008e88 <_vfiprintf_r+0x250>)
 8008dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ddc:	f000 fd0e 	bl	80097fc <memchr>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d03f      	beq.n	8008e64 <_vfiprintf_r+0x22c>
 8008de4:	4b29      	ldr	r3, [pc, #164]	; (8008e8c <_vfiprintf_r+0x254>)
 8008de6:	bb1b      	cbnz	r3, 8008e30 <_vfiprintf_r+0x1f8>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	3307      	adds	r3, #7
 8008dec:	f023 0307 	bic.w	r3, r3, #7
 8008df0:	3308      	adds	r3, #8
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df6:	443b      	add	r3, r7
 8008df8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfa:	e767      	b.n	8008ccc <_vfiprintf_r+0x94>
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	2001      	movs	r0, #1
 8008e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e04:	e7a5      	b.n	8008d52 <_vfiprintf_r+0x11a>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	3401      	adds	r4, #1
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	4620      	mov	r0, r4
 8008e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e18:	3a30      	subs	r2, #48	; 0x30
 8008e1a:	2a09      	cmp	r2, #9
 8008e1c:	d903      	bls.n	8008e26 <_vfiprintf_r+0x1ee>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0c5      	beq.n	8008dae <_vfiprintf_r+0x176>
 8008e22:	9105      	str	r1, [sp, #20]
 8008e24:	e7c3      	b.n	8008dae <_vfiprintf_r+0x176>
 8008e26:	4604      	mov	r4, r0
 8008e28:	2301      	movs	r3, #1
 8008e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e2e:	e7f0      	b.n	8008e12 <_vfiprintf_r+0x1da>
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4630      	mov	r0, r6
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <_vfiprintf_r+0x258>)
 8008e3a:	a904      	add	r1, sp, #16
 8008e3c:	f3af 8000 	nop.w
 8008e40:	4607      	mov	r7, r0
 8008e42:	1c78      	adds	r0, r7, #1
 8008e44:	d1d6      	bne.n	8008df4 <_vfiprintf_r+0x1bc>
 8008e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e48:	07d9      	lsls	r1, r3, #31
 8008e4a:	d405      	bmi.n	8008e58 <_vfiprintf_r+0x220>
 8008e4c:	89ab      	ldrh	r3, [r5, #12]
 8008e4e:	059a      	lsls	r2, r3, #22
 8008e50:	d402      	bmi.n	8008e58 <_vfiprintf_r+0x220>
 8008e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e54:	f000 fc6d 	bl	8009732 <__retarget_lock_release_recursive>
 8008e58:	89ab      	ldrh	r3, [r5, #12]
 8008e5a:	065b      	lsls	r3, r3, #25
 8008e5c:	f53f af12 	bmi.w	8008c84 <_vfiprintf_r+0x4c>
 8008e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e62:	e711      	b.n	8008c88 <_vfiprintf_r+0x50>
 8008e64:	ab03      	add	r3, sp, #12
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <_vfiprintf_r+0x258>)
 8008e6e:	a904      	add	r1, sp, #16
 8008e70:	f000 f882 	bl	8008f78 <_printf_i>
 8008e74:	e7e4      	b.n	8008e40 <_vfiprintf_r+0x208>
 8008e76:	bf00      	nop
 8008e78:	08009f70 	.word	0x08009f70
 8008e7c:	08009f90 	.word	0x08009f90
 8008e80:	08009f50 	.word	0x08009f50
 8008e84:	08009e1c 	.word	0x08009e1c
 8008e88:	08009e26 	.word	0x08009e26
 8008e8c:	00000000 	.word	0x00000000
 8008e90:	08008c13 	.word	0x08008c13
 8008e94:	08009e22 	.word	0x08009e22

08008e98 <_printf_common>:
 8008e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	4699      	mov	r9, r3
 8008ea0:	688a      	ldr	r2, [r1, #8]
 8008ea2:	690b      	ldr	r3, [r1, #16]
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	bfb8      	it	lt
 8008eaa:	4613      	movlt	r3, r2
 8008eac:	6033      	str	r3, [r6, #0]
 8008eae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eb8:	b10a      	cbz	r2, 8008ebe <_printf_common+0x26>
 8008eba:	3301      	adds	r3, #1
 8008ebc:	6033      	str	r3, [r6, #0]
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	0699      	lsls	r1, r3, #26
 8008ec2:	bf42      	ittt	mi
 8008ec4:	6833      	ldrmi	r3, [r6, #0]
 8008ec6:	3302      	addmi	r3, #2
 8008ec8:	6033      	strmi	r3, [r6, #0]
 8008eca:	6825      	ldr	r5, [r4, #0]
 8008ecc:	f015 0506 	ands.w	r5, r5, #6
 8008ed0:	d106      	bne.n	8008ee0 <_printf_common+0x48>
 8008ed2:	f104 0a19 	add.w	sl, r4, #25
 8008ed6:	68e3      	ldr	r3, [r4, #12]
 8008ed8:	6832      	ldr	r2, [r6, #0]
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	42ab      	cmp	r3, r5
 8008ede:	dc28      	bgt.n	8008f32 <_printf_common+0x9a>
 8008ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ee4:	1e13      	subs	r3, r2, #0
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	bf18      	it	ne
 8008eea:	2301      	movne	r3, #1
 8008eec:	0692      	lsls	r2, r2, #26
 8008eee:	d42d      	bmi.n	8008f4c <_printf_common+0xb4>
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef8:	47c0      	blx	r8
 8008efa:	3001      	adds	r0, #1
 8008efc:	d020      	beq.n	8008f40 <_printf_common+0xa8>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	68e5      	ldr	r5, [r4, #12]
 8008f02:	f003 0306 	and.w	r3, r3, #6
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	bf18      	it	ne
 8008f0a:	2500      	movne	r5, #0
 8008f0c:	6832      	ldr	r2, [r6, #0]
 8008f0e:	f04f 0600 	mov.w	r6, #0
 8008f12:	68a3      	ldr	r3, [r4, #8]
 8008f14:	bf08      	it	eq
 8008f16:	1aad      	subeq	r5, r5, r2
 8008f18:	6922      	ldr	r2, [r4, #16]
 8008f1a:	bf08      	it	eq
 8008f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f20:	4293      	cmp	r3, r2
 8008f22:	bfc4      	itt	gt
 8008f24:	1a9b      	subgt	r3, r3, r2
 8008f26:	18ed      	addgt	r5, r5, r3
 8008f28:	341a      	adds	r4, #26
 8008f2a:	42b5      	cmp	r5, r6
 8008f2c:	d11a      	bne.n	8008f64 <_printf_common+0xcc>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e008      	b.n	8008f44 <_printf_common+0xac>
 8008f32:	2301      	movs	r3, #1
 8008f34:	4652      	mov	r2, sl
 8008f36:	4649      	mov	r1, r9
 8008f38:	4638      	mov	r0, r7
 8008f3a:	47c0      	blx	r8
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d103      	bne.n	8008f48 <_printf_common+0xb0>
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f48:	3501      	adds	r5, #1
 8008f4a:	e7c4      	b.n	8008ed6 <_printf_common+0x3e>
 8008f4c:	2030      	movs	r0, #48	; 0x30
 8008f4e:	18e1      	adds	r1, r4, r3
 8008f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f5a:	4422      	add	r2, r4
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f62:	e7c5      	b.n	8008ef0 <_printf_common+0x58>
 8008f64:	2301      	movs	r3, #1
 8008f66:	4622      	mov	r2, r4
 8008f68:	4649      	mov	r1, r9
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	47c0      	blx	r8
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d0e6      	beq.n	8008f40 <_printf_common+0xa8>
 8008f72:	3601      	adds	r6, #1
 8008f74:	e7d9      	b.n	8008f2a <_printf_common+0x92>
	...

08008f78 <_printf_i>:
 8008f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	7e27      	ldrb	r7, [r4, #24]
 8008f80:	4691      	mov	r9, r2
 8008f82:	2f78      	cmp	r7, #120	; 0x78
 8008f84:	4680      	mov	r8, r0
 8008f86:	469a      	mov	sl, r3
 8008f88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f8e:	d807      	bhi.n	8008fa0 <_printf_i+0x28>
 8008f90:	2f62      	cmp	r7, #98	; 0x62
 8008f92:	d80a      	bhi.n	8008faa <_printf_i+0x32>
 8008f94:	2f00      	cmp	r7, #0
 8008f96:	f000 80d9 	beq.w	800914c <_printf_i+0x1d4>
 8008f9a:	2f58      	cmp	r7, #88	; 0x58
 8008f9c:	f000 80a4 	beq.w	80090e8 <_printf_i+0x170>
 8008fa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fa8:	e03a      	b.n	8009020 <_printf_i+0xa8>
 8008faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fae:	2b15      	cmp	r3, #21
 8008fb0:	d8f6      	bhi.n	8008fa0 <_printf_i+0x28>
 8008fb2:	a001      	add	r0, pc, #4	; (adr r0, 8008fb8 <_printf_i+0x40>)
 8008fb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fb8:	08009011 	.word	0x08009011
 8008fbc:	08009025 	.word	0x08009025
 8008fc0:	08008fa1 	.word	0x08008fa1
 8008fc4:	08008fa1 	.word	0x08008fa1
 8008fc8:	08008fa1 	.word	0x08008fa1
 8008fcc:	08008fa1 	.word	0x08008fa1
 8008fd0:	08009025 	.word	0x08009025
 8008fd4:	08008fa1 	.word	0x08008fa1
 8008fd8:	08008fa1 	.word	0x08008fa1
 8008fdc:	08008fa1 	.word	0x08008fa1
 8008fe0:	08008fa1 	.word	0x08008fa1
 8008fe4:	08009133 	.word	0x08009133
 8008fe8:	08009055 	.word	0x08009055
 8008fec:	08009115 	.word	0x08009115
 8008ff0:	08008fa1 	.word	0x08008fa1
 8008ff4:	08008fa1 	.word	0x08008fa1
 8008ff8:	08009155 	.word	0x08009155
 8008ffc:	08008fa1 	.word	0x08008fa1
 8009000:	08009055 	.word	0x08009055
 8009004:	08008fa1 	.word	0x08008fa1
 8009008:	08008fa1 	.word	0x08008fa1
 800900c:	0800911d 	.word	0x0800911d
 8009010:	680b      	ldr	r3, [r1, #0]
 8009012:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009016:	1d1a      	adds	r2, r3, #4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	600a      	str	r2, [r1, #0]
 800901c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009020:	2301      	movs	r3, #1
 8009022:	e0a4      	b.n	800916e <_printf_i+0x1f6>
 8009024:	6825      	ldr	r5, [r4, #0]
 8009026:	6808      	ldr	r0, [r1, #0]
 8009028:	062e      	lsls	r6, r5, #24
 800902a:	f100 0304 	add.w	r3, r0, #4
 800902e:	d50a      	bpl.n	8009046 <_printf_i+0xce>
 8009030:	6805      	ldr	r5, [r0, #0]
 8009032:	600b      	str	r3, [r1, #0]
 8009034:	2d00      	cmp	r5, #0
 8009036:	da03      	bge.n	8009040 <_printf_i+0xc8>
 8009038:	232d      	movs	r3, #45	; 0x2d
 800903a:	426d      	negs	r5, r5
 800903c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009040:	230a      	movs	r3, #10
 8009042:	485e      	ldr	r0, [pc, #376]	; (80091bc <_printf_i+0x244>)
 8009044:	e019      	b.n	800907a <_printf_i+0x102>
 8009046:	f015 0f40 	tst.w	r5, #64	; 0x40
 800904a:	6805      	ldr	r5, [r0, #0]
 800904c:	600b      	str	r3, [r1, #0]
 800904e:	bf18      	it	ne
 8009050:	b22d      	sxthne	r5, r5
 8009052:	e7ef      	b.n	8009034 <_printf_i+0xbc>
 8009054:	680b      	ldr	r3, [r1, #0]
 8009056:	6825      	ldr	r5, [r4, #0]
 8009058:	1d18      	adds	r0, r3, #4
 800905a:	6008      	str	r0, [r1, #0]
 800905c:	0628      	lsls	r0, r5, #24
 800905e:	d501      	bpl.n	8009064 <_printf_i+0xec>
 8009060:	681d      	ldr	r5, [r3, #0]
 8009062:	e002      	b.n	800906a <_printf_i+0xf2>
 8009064:	0669      	lsls	r1, r5, #25
 8009066:	d5fb      	bpl.n	8009060 <_printf_i+0xe8>
 8009068:	881d      	ldrh	r5, [r3, #0]
 800906a:	2f6f      	cmp	r7, #111	; 0x6f
 800906c:	bf0c      	ite	eq
 800906e:	2308      	moveq	r3, #8
 8009070:	230a      	movne	r3, #10
 8009072:	4852      	ldr	r0, [pc, #328]	; (80091bc <_printf_i+0x244>)
 8009074:	2100      	movs	r1, #0
 8009076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800907a:	6866      	ldr	r6, [r4, #4]
 800907c:	2e00      	cmp	r6, #0
 800907e:	bfa8      	it	ge
 8009080:	6821      	ldrge	r1, [r4, #0]
 8009082:	60a6      	str	r6, [r4, #8]
 8009084:	bfa4      	itt	ge
 8009086:	f021 0104 	bicge.w	r1, r1, #4
 800908a:	6021      	strge	r1, [r4, #0]
 800908c:	b90d      	cbnz	r5, 8009092 <_printf_i+0x11a>
 800908e:	2e00      	cmp	r6, #0
 8009090:	d04d      	beq.n	800912e <_printf_i+0x1b6>
 8009092:	4616      	mov	r6, r2
 8009094:	fbb5 f1f3 	udiv	r1, r5, r3
 8009098:	fb03 5711 	mls	r7, r3, r1, r5
 800909c:	5dc7      	ldrb	r7, [r0, r7]
 800909e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090a2:	462f      	mov	r7, r5
 80090a4:	42bb      	cmp	r3, r7
 80090a6:	460d      	mov	r5, r1
 80090a8:	d9f4      	bls.n	8009094 <_printf_i+0x11c>
 80090aa:	2b08      	cmp	r3, #8
 80090ac:	d10b      	bne.n	80090c6 <_printf_i+0x14e>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	07df      	lsls	r7, r3, #31
 80090b2:	d508      	bpl.n	80090c6 <_printf_i+0x14e>
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	6861      	ldr	r1, [r4, #4]
 80090b8:	4299      	cmp	r1, r3
 80090ba:	bfde      	ittt	le
 80090bc:	2330      	movle	r3, #48	; 0x30
 80090be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090c6:	1b92      	subs	r2, r2, r6
 80090c8:	6122      	str	r2, [r4, #16]
 80090ca:	464b      	mov	r3, r9
 80090cc:	4621      	mov	r1, r4
 80090ce:	4640      	mov	r0, r8
 80090d0:	f8cd a000 	str.w	sl, [sp]
 80090d4:	aa03      	add	r2, sp, #12
 80090d6:	f7ff fedf 	bl	8008e98 <_printf_common>
 80090da:	3001      	adds	r0, #1
 80090dc:	d14c      	bne.n	8009178 <_printf_i+0x200>
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	b004      	add	sp, #16
 80090e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e8:	4834      	ldr	r0, [pc, #208]	; (80091bc <_printf_i+0x244>)
 80090ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090ee:	680e      	ldr	r6, [r1, #0]
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80090f6:	061f      	lsls	r7, r3, #24
 80090f8:	600e      	str	r6, [r1, #0]
 80090fa:	d514      	bpl.n	8009126 <_printf_i+0x1ae>
 80090fc:	07d9      	lsls	r1, r3, #31
 80090fe:	bf44      	itt	mi
 8009100:	f043 0320 	orrmi.w	r3, r3, #32
 8009104:	6023      	strmi	r3, [r4, #0]
 8009106:	b91d      	cbnz	r5, 8009110 <_printf_i+0x198>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	f023 0320 	bic.w	r3, r3, #32
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	2310      	movs	r3, #16
 8009112:	e7af      	b.n	8009074 <_printf_i+0xfc>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	f043 0320 	orr.w	r3, r3, #32
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	2378      	movs	r3, #120	; 0x78
 800911e:	4828      	ldr	r0, [pc, #160]	; (80091c0 <_printf_i+0x248>)
 8009120:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009124:	e7e3      	b.n	80090ee <_printf_i+0x176>
 8009126:	065e      	lsls	r6, r3, #25
 8009128:	bf48      	it	mi
 800912a:	b2ad      	uxthmi	r5, r5
 800912c:	e7e6      	b.n	80090fc <_printf_i+0x184>
 800912e:	4616      	mov	r6, r2
 8009130:	e7bb      	b.n	80090aa <_printf_i+0x132>
 8009132:	680b      	ldr	r3, [r1, #0]
 8009134:	6826      	ldr	r6, [r4, #0]
 8009136:	1d1d      	adds	r5, r3, #4
 8009138:	6960      	ldr	r0, [r4, #20]
 800913a:	600d      	str	r5, [r1, #0]
 800913c:	0635      	lsls	r5, r6, #24
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	d501      	bpl.n	8009146 <_printf_i+0x1ce>
 8009142:	6018      	str	r0, [r3, #0]
 8009144:	e002      	b.n	800914c <_printf_i+0x1d4>
 8009146:	0671      	lsls	r1, r6, #25
 8009148:	d5fb      	bpl.n	8009142 <_printf_i+0x1ca>
 800914a:	8018      	strh	r0, [r3, #0]
 800914c:	2300      	movs	r3, #0
 800914e:	4616      	mov	r6, r2
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	e7ba      	b.n	80090ca <_printf_i+0x152>
 8009154:	680b      	ldr	r3, [r1, #0]
 8009156:	1d1a      	adds	r2, r3, #4
 8009158:	600a      	str	r2, [r1, #0]
 800915a:	681e      	ldr	r6, [r3, #0]
 800915c:	2100      	movs	r1, #0
 800915e:	4630      	mov	r0, r6
 8009160:	6862      	ldr	r2, [r4, #4]
 8009162:	f000 fb4b 	bl	80097fc <memchr>
 8009166:	b108      	cbz	r0, 800916c <_printf_i+0x1f4>
 8009168:	1b80      	subs	r0, r0, r6
 800916a:	6060      	str	r0, [r4, #4]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	2300      	movs	r3, #0
 8009172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009176:	e7a8      	b.n	80090ca <_printf_i+0x152>
 8009178:	4632      	mov	r2, r6
 800917a:	4649      	mov	r1, r9
 800917c:	4640      	mov	r0, r8
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	47d0      	blx	sl
 8009182:	3001      	adds	r0, #1
 8009184:	d0ab      	beq.n	80090de <_printf_i+0x166>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	079b      	lsls	r3, r3, #30
 800918a:	d413      	bmi.n	80091b4 <_printf_i+0x23c>
 800918c:	68e0      	ldr	r0, [r4, #12]
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	4298      	cmp	r0, r3
 8009192:	bfb8      	it	lt
 8009194:	4618      	movlt	r0, r3
 8009196:	e7a4      	b.n	80090e2 <_printf_i+0x16a>
 8009198:	2301      	movs	r3, #1
 800919a:	4632      	mov	r2, r6
 800919c:	4649      	mov	r1, r9
 800919e:	4640      	mov	r0, r8
 80091a0:	47d0      	blx	sl
 80091a2:	3001      	adds	r0, #1
 80091a4:	d09b      	beq.n	80090de <_printf_i+0x166>
 80091a6:	3501      	adds	r5, #1
 80091a8:	68e3      	ldr	r3, [r4, #12]
 80091aa:	9903      	ldr	r1, [sp, #12]
 80091ac:	1a5b      	subs	r3, r3, r1
 80091ae:	42ab      	cmp	r3, r5
 80091b0:	dcf2      	bgt.n	8009198 <_printf_i+0x220>
 80091b2:	e7eb      	b.n	800918c <_printf_i+0x214>
 80091b4:	2500      	movs	r5, #0
 80091b6:	f104 0619 	add.w	r6, r4, #25
 80091ba:	e7f5      	b.n	80091a8 <_printf_i+0x230>
 80091bc:	08009e2d 	.word	0x08009e2d
 80091c0:	08009e3e 	.word	0x08009e3e

080091c4 <nan>:
 80091c4:	2000      	movs	r0, #0
 80091c6:	4901      	ldr	r1, [pc, #4]	; (80091cc <nan+0x8>)
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	7ff80000 	.word	0x7ff80000

080091d0 <_sbrk_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	2300      	movs	r3, #0
 80091d4:	4d05      	ldr	r5, [pc, #20]	; (80091ec <_sbrk_r+0x1c>)
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	602b      	str	r3, [r5, #0]
 80091dc:	f7f9 f8ca 	bl	8002374 <_sbrk>
 80091e0:	1c43      	adds	r3, r0, #1
 80091e2:	d102      	bne.n	80091ea <_sbrk_r+0x1a>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	b103      	cbz	r3, 80091ea <_sbrk_r+0x1a>
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	bd38      	pop	{r3, r4, r5, pc}
 80091ec:	200018fc 	.word	0x200018fc

080091f0 <strncmp>:
 80091f0:	b510      	push	{r4, lr}
 80091f2:	b16a      	cbz	r2, 8009210 <strncmp+0x20>
 80091f4:	3901      	subs	r1, #1
 80091f6:	1884      	adds	r4, r0, r2
 80091f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009200:	4293      	cmp	r3, r2
 8009202:	d103      	bne.n	800920c <strncmp+0x1c>
 8009204:	42a0      	cmp	r0, r4
 8009206:	d001      	beq.n	800920c <strncmp+0x1c>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f5      	bne.n	80091f8 <strncmp+0x8>
 800920c:	1a98      	subs	r0, r3, r2
 800920e:	bd10      	pop	{r4, pc}
 8009210:	4610      	mov	r0, r2
 8009212:	e7fc      	b.n	800920e <strncmp+0x1e>

08009214 <__swbuf_r>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	460e      	mov	r6, r1
 8009218:	4614      	mov	r4, r2
 800921a:	4605      	mov	r5, r0
 800921c:	b118      	cbz	r0, 8009226 <__swbuf_r+0x12>
 800921e:	6983      	ldr	r3, [r0, #24]
 8009220:	b90b      	cbnz	r3, 8009226 <__swbuf_r+0x12>
 8009222:	f000 f9e7 	bl	80095f4 <__sinit>
 8009226:	4b21      	ldr	r3, [pc, #132]	; (80092ac <__swbuf_r+0x98>)
 8009228:	429c      	cmp	r4, r3
 800922a:	d12b      	bne.n	8009284 <__swbuf_r+0x70>
 800922c:	686c      	ldr	r4, [r5, #4]
 800922e:	69a3      	ldr	r3, [r4, #24]
 8009230:	60a3      	str	r3, [r4, #8]
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	071a      	lsls	r2, r3, #28
 8009236:	d52f      	bpl.n	8009298 <__swbuf_r+0x84>
 8009238:	6923      	ldr	r3, [r4, #16]
 800923a:	b36b      	cbz	r3, 8009298 <__swbuf_r+0x84>
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	b2f6      	uxtb	r6, r6
 8009242:	1ac0      	subs	r0, r0, r3
 8009244:	6963      	ldr	r3, [r4, #20]
 8009246:	4637      	mov	r7, r6
 8009248:	4283      	cmp	r3, r0
 800924a:	dc04      	bgt.n	8009256 <__swbuf_r+0x42>
 800924c:	4621      	mov	r1, r4
 800924e:	4628      	mov	r0, r5
 8009250:	f000 f93c 	bl	80094cc <_fflush_r>
 8009254:	bb30      	cbnz	r0, 80092a4 <__swbuf_r+0x90>
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	3001      	adds	r0, #1
 800925a:	3b01      	subs	r3, #1
 800925c:	60a3      	str	r3, [r4, #8]
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	701e      	strb	r6, [r3, #0]
 8009266:	6963      	ldr	r3, [r4, #20]
 8009268:	4283      	cmp	r3, r0
 800926a:	d004      	beq.n	8009276 <__swbuf_r+0x62>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	07db      	lsls	r3, r3, #31
 8009270:	d506      	bpl.n	8009280 <__swbuf_r+0x6c>
 8009272:	2e0a      	cmp	r6, #10
 8009274:	d104      	bne.n	8009280 <__swbuf_r+0x6c>
 8009276:	4621      	mov	r1, r4
 8009278:	4628      	mov	r0, r5
 800927a:	f000 f927 	bl	80094cc <_fflush_r>
 800927e:	b988      	cbnz	r0, 80092a4 <__swbuf_r+0x90>
 8009280:	4638      	mov	r0, r7
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <__swbuf_r+0x9c>)
 8009286:	429c      	cmp	r4, r3
 8009288:	d101      	bne.n	800928e <__swbuf_r+0x7a>
 800928a:	68ac      	ldr	r4, [r5, #8]
 800928c:	e7cf      	b.n	800922e <__swbuf_r+0x1a>
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <__swbuf_r+0xa0>)
 8009290:	429c      	cmp	r4, r3
 8009292:	bf08      	it	eq
 8009294:	68ec      	ldreq	r4, [r5, #12]
 8009296:	e7ca      	b.n	800922e <__swbuf_r+0x1a>
 8009298:	4621      	mov	r1, r4
 800929a:	4628      	mov	r0, r5
 800929c:	f000 f81a 	bl	80092d4 <__swsetup_r>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d0cb      	beq.n	800923c <__swbuf_r+0x28>
 80092a4:	f04f 37ff 	mov.w	r7, #4294967295
 80092a8:	e7ea      	b.n	8009280 <__swbuf_r+0x6c>
 80092aa:	bf00      	nop
 80092ac:	08009f70 	.word	0x08009f70
 80092b0:	08009f90 	.word	0x08009f90
 80092b4:	08009f50 	.word	0x08009f50

080092b8 <__ascii_wctomb>:
 80092b8:	4603      	mov	r3, r0
 80092ba:	4608      	mov	r0, r1
 80092bc:	b141      	cbz	r1, 80092d0 <__ascii_wctomb+0x18>
 80092be:	2aff      	cmp	r2, #255	; 0xff
 80092c0:	d904      	bls.n	80092cc <__ascii_wctomb+0x14>
 80092c2:	228a      	movs	r2, #138	; 0x8a
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	4770      	bx	lr
 80092cc:	2001      	movs	r0, #1
 80092ce:	700a      	strb	r2, [r1, #0]
 80092d0:	4770      	bx	lr
	...

080092d4 <__swsetup_r>:
 80092d4:	4b32      	ldr	r3, [pc, #200]	; (80093a0 <__swsetup_r+0xcc>)
 80092d6:	b570      	push	{r4, r5, r6, lr}
 80092d8:	681d      	ldr	r5, [r3, #0]
 80092da:	4606      	mov	r6, r0
 80092dc:	460c      	mov	r4, r1
 80092de:	b125      	cbz	r5, 80092ea <__swsetup_r+0x16>
 80092e0:	69ab      	ldr	r3, [r5, #24]
 80092e2:	b913      	cbnz	r3, 80092ea <__swsetup_r+0x16>
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 f985 	bl	80095f4 <__sinit>
 80092ea:	4b2e      	ldr	r3, [pc, #184]	; (80093a4 <__swsetup_r+0xd0>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d10f      	bne.n	8009310 <__swsetup_r+0x3c>
 80092f0:	686c      	ldr	r4, [r5, #4]
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092f8:	0719      	lsls	r1, r3, #28
 80092fa:	d42c      	bmi.n	8009356 <__swsetup_r+0x82>
 80092fc:	06dd      	lsls	r5, r3, #27
 80092fe:	d411      	bmi.n	8009324 <__swsetup_r+0x50>
 8009300:	2309      	movs	r3, #9
 8009302:	6033      	str	r3, [r6, #0]
 8009304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e03e      	b.n	800938e <__swsetup_r+0xba>
 8009310:	4b25      	ldr	r3, [pc, #148]	; (80093a8 <__swsetup_r+0xd4>)
 8009312:	429c      	cmp	r4, r3
 8009314:	d101      	bne.n	800931a <__swsetup_r+0x46>
 8009316:	68ac      	ldr	r4, [r5, #8]
 8009318:	e7eb      	b.n	80092f2 <__swsetup_r+0x1e>
 800931a:	4b24      	ldr	r3, [pc, #144]	; (80093ac <__swsetup_r+0xd8>)
 800931c:	429c      	cmp	r4, r3
 800931e:	bf08      	it	eq
 8009320:	68ec      	ldreq	r4, [r5, #12]
 8009322:	e7e6      	b.n	80092f2 <__swsetup_r+0x1e>
 8009324:	0758      	lsls	r0, r3, #29
 8009326:	d512      	bpl.n	800934e <__swsetup_r+0x7a>
 8009328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800932a:	b141      	cbz	r1, 800933e <__swsetup_r+0x6a>
 800932c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009330:	4299      	cmp	r1, r3
 8009332:	d002      	beq.n	800933a <__swsetup_r+0x66>
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff fbb1 	bl	8008a9c <_free_r>
 800933a:	2300      	movs	r3, #0
 800933c:	6363      	str	r3, [r4, #52]	; 0x34
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	2300      	movs	r3, #0
 8009348:	6063      	str	r3, [r4, #4]
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	f043 0308 	orr.w	r3, r3, #8
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	6923      	ldr	r3, [r4, #16]
 8009358:	b94b      	cbnz	r3, 800936e <__swsetup_r+0x9a>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009364:	d003      	beq.n	800936e <__swsetup_r+0x9a>
 8009366:	4621      	mov	r1, r4
 8009368:	4630      	mov	r0, r6
 800936a:	f000 fa07 	bl	800977c <__smakebuf_r>
 800936e:	89a0      	ldrh	r0, [r4, #12]
 8009370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009374:	f010 0301 	ands.w	r3, r0, #1
 8009378:	d00a      	beq.n	8009390 <__swsetup_r+0xbc>
 800937a:	2300      	movs	r3, #0
 800937c:	60a3      	str	r3, [r4, #8]
 800937e:	6963      	ldr	r3, [r4, #20]
 8009380:	425b      	negs	r3, r3
 8009382:	61a3      	str	r3, [r4, #24]
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	b943      	cbnz	r3, 800939a <__swsetup_r+0xc6>
 8009388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800938c:	d1ba      	bne.n	8009304 <__swsetup_r+0x30>
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	0781      	lsls	r1, r0, #30
 8009392:	bf58      	it	pl
 8009394:	6963      	ldrpl	r3, [r4, #20]
 8009396:	60a3      	str	r3, [r4, #8]
 8009398:	e7f4      	b.n	8009384 <__swsetup_r+0xb0>
 800939a:	2000      	movs	r0, #0
 800939c:	e7f7      	b.n	800938e <__swsetup_r+0xba>
 800939e:	bf00      	nop
 80093a0:	2000043c 	.word	0x2000043c
 80093a4:	08009f70 	.word	0x08009f70
 80093a8:	08009f90 	.word	0x08009f90
 80093ac:	08009f50 	.word	0x08009f50

080093b0 <abort>:
 80093b0:	2006      	movs	r0, #6
 80093b2:	b508      	push	{r3, lr}
 80093b4:	f000 fa64 	bl	8009880 <raise>
 80093b8:	2001      	movs	r0, #1
 80093ba:	f7f8 ffab 	bl	8002314 <_exit>
	...

080093c0 <__sflush_r>:
 80093c0:	898a      	ldrh	r2, [r1, #12]
 80093c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c6:	4605      	mov	r5, r0
 80093c8:	0710      	lsls	r0, r2, #28
 80093ca:	460c      	mov	r4, r1
 80093cc:	d458      	bmi.n	8009480 <__sflush_r+0xc0>
 80093ce:	684b      	ldr	r3, [r1, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc05      	bgt.n	80093e0 <__sflush_r+0x20>
 80093d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc02      	bgt.n	80093e0 <__sflush_r+0x20>
 80093da:	2000      	movs	r0, #0
 80093dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	d0f9      	beq.n	80093da <__sflush_r+0x1a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093ec:	682f      	ldr	r7, [r5, #0]
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	d032      	beq.n	8009458 <__sflush_r+0x98>
 80093f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	075a      	lsls	r2, r3, #29
 80093f8:	d505      	bpl.n	8009406 <__sflush_r+0x46>
 80093fa:	6863      	ldr	r3, [r4, #4]
 80093fc:	1ac0      	subs	r0, r0, r3
 80093fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009400:	b10b      	cbz	r3, 8009406 <__sflush_r+0x46>
 8009402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009404:	1ac0      	subs	r0, r0, r3
 8009406:	2300      	movs	r3, #0
 8009408:	4602      	mov	r2, r0
 800940a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800940c:	4628      	mov	r0, r5
 800940e:	6a21      	ldr	r1, [r4, #32]
 8009410:	47b0      	blx	r6
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	d106      	bne.n	8009426 <__sflush_r+0x66>
 8009418:	6829      	ldr	r1, [r5, #0]
 800941a:	291d      	cmp	r1, #29
 800941c:	d82c      	bhi.n	8009478 <__sflush_r+0xb8>
 800941e:	4a2a      	ldr	r2, [pc, #168]	; (80094c8 <__sflush_r+0x108>)
 8009420:	40ca      	lsrs	r2, r1
 8009422:	07d6      	lsls	r6, r2, #31
 8009424:	d528      	bpl.n	8009478 <__sflush_r+0xb8>
 8009426:	2200      	movs	r2, #0
 8009428:	6062      	str	r2, [r4, #4]
 800942a:	6922      	ldr	r2, [r4, #16]
 800942c:	04d9      	lsls	r1, r3, #19
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	d504      	bpl.n	800943c <__sflush_r+0x7c>
 8009432:	1c42      	adds	r2, r0, #1
 8009434:	d101      	bne.n	800943a <__sflush_r+0x7a>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b903      	cbnz	r3, 800943c <__sflush_r+0x7c>
 800943a:	6560      	str	r0, [r4, #84]	; 0x54
 800943c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800943e:	602f      	str	r7, [r5, #0]
 8009440:	2900      	cmp	r1, #0
 8009442:	d0ca      	beq.n	80093da <__sflush_r+0x1a>
 8009444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009448:	4299      	cmp	r1, r3
 800944a:	d002      	beq.n	8009452 <__sflush_r+0x92>
 800944c:	4628      	mov	r0, r5
 800944e:	f7ff fb25 	bl	8008a9c <_free_r>
 8009452:	2000      	movs	r0, #0
 8009454:	6360      	str	r0, [r4, #52]	; 0x34
 8009456:	e7c1      	b.n	80093dc <__sflush_r+0x1c>
 8009458:	6a21      	ldr	r1, [r4, #32]
 800945a:	2301      	movs	r3, #1
 800945c:	4628      	mov	r0, r5
 800945e:	47b0      	blx	r6
 8009460:	1c41      	adds	r1, r0, #1
 8009462:	d1c7      	bne.n	80093f4 <__sflush_r+0x34>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0c4      	beq.n	80093f4 <__sflush_r+0x34>
 800946a:	2b1d      	cmp	r3, #29
 800946c:	d001      	beq.n	8009472 <__sflush_r+0xb2>
 800946e:	2b16      	cmp	r3, #22
 8009470:	d101      	bne.n	8009476 <__sflush_r+0xb6>
 8009472:	602f      	str	r7, [r5, #0]
 8009474:	e7b1      	b.n	80093da <__sflush_r+0x1a>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	e7ad      	b.n	80093dc <__sflush_r+0x1c>
 8009480:	690f      	ldr	r7, [r1, #16]
 8009482:	2f00      	cmp	r7, #0
 8009484:	d0a9      	beq.n	80093da <__sflush_r+0x1a>
 8009486:	0793      	lsls	r3, r2, #30
 8009488:	bf18      	it	ne
 800948a:	2300      	movne	r3, #0
 800948c:	680e      	ldr	r6, [r1, #0]
 800948e:	bf08      	it	eq
 8009490:	694b      	ldreq	r3, [r1, #20]
 8009492:	eba6 0807 	sub.w	r8, r6, r7
 8009496:	600f      	str	r7, [r1, #0]
 8009498:	608b      	str	r3, [r1, #8]
 800949a:	f1b8 0f00 	cmp.w	r8, #0
 800949e:	dd9c      	ble.n	80093da <__sflush_r+0x1a>
 80094a0:	4643      	mov	r3, r8
 80094a2:	463a      	mov	r2, r7
 80094a4:	4628      	mov	r0, r5
 80094a6:	6a21      	ldr	r1, [r4, #32]
 80094a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094aa:	47b0      	blx	r6
 80094ac:	2800      	cmp	r0, #0
 80094ae:	dc06      	bgt.n	80094be <__sflush_r+0xfe>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295
 80094b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ba:	81a3      	strh	r3, [r4, #12]
 80094bc:	e78e      	b.n	80093dc <__sflush_r+0x1c>
 80094be:	4407      	add	r7, r0
 80094c0:	eba8 0800 	sub.w	r8, r8, r0
 80094c4:	e7e9      	b.n	800949a <__sflush_r+0xda>
 80094c6:	bf00      	nop
 80094c8:	20400001 	.word	0x20400001

080094cc <_fflush_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	4605      	mov	r5, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	b913      	cbnz	r3, 80094dc <_fflush_r+0x10>
 80094d6:	2500      	movs	r5, #0
 80094d8:	4628      	mov	r0, r5
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	b118      	cbz	r0, 80094e6 <_fflush_r+0x1a>
 80094de:	6983      	ldr	r3, [r0, #24]
 80094e0:	b90b      	cbnz	r3, 80094e6 <_fflush_r+0x1a>
 80094e2:	f000 f887 	bl	80095f4 <__sinit>
 80094e6:	4b14      	ldr	r3, [pc, #80]	; (8009538 <_fflush_r+0x6c>)
 80094e8:	429c      	cmp	r4, r3
 80094ea:	d11b      	bne.n	8009524 <_fflush_r+0x58>
 80094ec:	686c      	ldr	r4, [r5, #4]
 80094ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0ef      	beq.n	80094d6 <_fflush_r+0xa>
 80094f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094f8:	07d0      	lsls	r0, r2, #31
 80094fa:	d404      	bmi.n	8009506 <_fflush_r+0x3a>
 80094fc:	0599      	lsls	r1, r3, #22
 80094fe:	d402      	bmi.n	8009506 <_fflush_r+0x3a>
 8009500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009502:	f000 f915 	bl	8009730 <__retarget_lock_acquire_recursive>
 8009506:	4628      	mov	r0, r5
 8009508:	4621      	mov	r1, r4
 800950a:	f7ff ff59 	bl	80093c0 <__sflush_r>
 800950e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009510:	4605      	mov	r5, r0
 8009512:	07da      	lsls	r2, r3, #31
 8009514:	d4e0      	bmi.n	80094d8 <_fflush_r+0xc>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	059b      	lsls	r3, r3, #22
 800951a:	d4dd      	bmi.n	80094d8 <_fflush_r+0xc>
 800951c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800951e:	f000 f908 	bl	8009732 <__retarget_lock_release_recursive>
 8009522:	e7d9      	b.n	80094d8 <_fflush_r+0xc>
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <_fflush_r+0x70>)
 8009526:	429c      	cmp	r4, r3
 8009528:	d101      	bne.n	800952e <_fflush_r+0x62>
 800952a:	68ac      	ldr	r4, [r5, #8]
 800952c:	e7df      	b.n	80094ee <_fflush_r+0x22>
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <_fflush_r+0x74>)
 8009530:	429c      	cmp	r4, r3
 8009532:	bf08      	it	eq
 8009534:	68ec      	ldreq	r4, [r5, #12]
 8009536:	e7da      	b.n	80094ee <_fflush_r+0x22>
 8009538:	08009f70 	.word	0x08009f70
 800953c:	08009f90 	.word	0x08009f90
 8009540:	08009f50 	.word	0x08009f50

08009544 <std>:
 8009544:	2300      	movs	r3, #0
 8009546:	b510      	push	{r4, lr}
 8009548:	4604      	mov	r4, r0
 800954a:	e9c0 3300 	strd	r3, r3, [r0]
 800954e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009552:	6083      	str	r3, [r0, #8]
 8009554:	8181      	strh	r1, [r0, #12]
 8009556:	6643      	str	r3, [r0, #100]	; 0x64
 8009558:	81c2      	strh	r2, [r0, #14]
 800955a:	6183      	str	r3, [r0, #24]
 800955c:	4619      	mov	r1, r3
 800955e:	2208      	movs	r2, #8
 8009560:	305c      	adds	r0, #92	; 0x5c
 8009562:	f7fd fb8d 	bl	8006c80 <memset>
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <std+0x38>)
 8009568:	6224      	str	r4, [r4, #32]
 800956a:	6263      	str	r3, [r4, #36]	; 0x24
 800956c:	4b04      	ldr	r3, [pc, #16]	; (8009580 <std+0x3c>)
 800956e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009570:	4b04      	ldr	r3, [pc, #16]	; (8009584 <std+0x40>)
 8009572:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009574:	4b04      	ldr	r3, [pc, #16]	; (8009588 <std+0x44>)
 8009576:	6323      	str	r3, [r4, #48]	; 0x30
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	080098b9 	.word	0x080098b9
 8009580:	080098db 	.word	0x080098db
 8009584:	08009913 	.word	0x08009913
 8009588:	08009937 	.word	0x08009937

0800958c <_cleanup_r>:
 800958c:	4901      	ldr	r1, [pc, #4]	; (8009594 <_cleanup_r+0x8>)
 800958e:	f000 b8af 	b.w	80096f0 <_fwalk_reent>
 8009592:	bf00      	nop
 8009594:	080094cd 	.word	0x080094cd

08009598 <__sfmoreglue>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	2568      	movs	r5, #104	; 0x68
 800959c:	1e4a      	subs	r2, r1, #1
 800959e:	4355      	muls	r5, r2
 80095a0:	460e      	mov	r6, r1
 80095a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095a6:	f7ff fac5 	bl	8008b34 <_malloc_r>
 80095aa:	4604      	mov	r4, r0
 80095ac:	b140      	cbz	r0, 80095c0 <__sfmoreglue+0x28>
 80095ae:	2100      	movs	r1, #0
 80095b0:	e9c0 1600 	strd	r1, r6, [r0]
 80095b4:	300c      	adds	r0, #12
 80095b6:	60a0      	str	r0, [r4, #8]
 80095b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095bc:	f7fd fb60 	bl	8006c80 <memset>
 80095c0:	4620      	mov	r0, r4
 80095c2:	bd70      	pop	{r4, r5, r6, pc}

080095c4 <__sfp_lock_acquire>:
 80095c4:	4801      	ldr	r0, [pc, #4]	; (80095cc <__sfp_lock_acquire+0x8>)
 80095c6:	f000 b8b3 	b.w	8009730 <__retarget_lock_acquire_recursive>
 80095ca:	bf00      	nop
 80095cc:	200018f8 	.word	0x200018f8

080095d0 <__sfp_lock_release>:
 80095d0:	4801      	ldr	r0, [pc, #4]	; (80095d8 <__sfp_lock_release+0x8>)
 80095d2:	f000 b8ae 	b.w	8009732 <__retarget_lock_release_recursive>
 80095d6:	bf00      	nop
 80095d8:	200018f8 	.word	0x200018f8

080095dc <__sinit_lock_acquire>:
 80095dc:	4801      	ldr	r0, [pc, #4]	; (80095e4 <__sinit_lock_acquire+0x8>)
 80095de:	f000 b8a7 	b.w	8009730 <__retarget_lock_acquire_recursive>
 80095e2:	bf00      	nop
 80095e4:	200018f3 	.word	0x200018f3

080095e8 <__sinit_lock_release>:
 80095e8:	4801      	ldr	r0, [pc, #4]	; (80095f0 <__sinit_lock_release+0x8>)
 80095ea:	f000 b8a2 	b.w	8009732 <__retarget_lock_release_recursive>
 80095ee:	bf00      	nop
 80095f0:	200018f3 	.word	0x200018f3

080095f4 <__sinit>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	4604      	mov	r4, r0
 80095f8:	f7ff fff0 	bl	80095dc <__sinit_lock_acquire>
 80095fc:	69a3      	ldr	r3, [r4, #24]
 80095fe:	b11b      	cbz	r3, 8009608 <__sinit+0x14>
 8009600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009604:	f7ff bff0 	b.w	80095e8 <__sinit_lock_release>
 8009608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800960c:	6523      	str	r3, [r4, #80]	; 0x50
 800960e:	4b13      	ldr	r3, [pc, #76]	; (800965c <__sinit+0x68>)
 8009610:	4a13      	ldr	r2, [pc, #76]	; (8009660 <__sinit+0x6c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	62a2      	str	r2, [r4, #40]	; 0x28
 8009616:	42a3      	cmp	r3, r4
 8009618:	bf08      	it	eq
 800961a:	2301      	moveq	r3, #1
 800961c:	4620      	mov	r0, r4
 800961e:	bf08      	it	eq
 8009620:	61a3      	streq	r3, [r4, #24]
 8009622:	f000 f81f 	bl	8009664 <__sfp>
 8009626:	6060      	str	r0, [r4, #4]
 8009628:	4620      	mov	r0, r4
 800962a:	f000 f81b 	bl	8009664 <__sfp>
 800962e:	60a0      	str	r0, [r4, #8]
 8009630:	4620      	mov	r0, r4
 8009632:	f000 f817 	bl	8009664 <__sfp>
 8009636:	2200      	movs	r2, #0
 8009638:	2104      	movs	r1, #4
 800963a:	60e0      	str	r0, [r4, #12]
 800963c:	6860      	ldr	r0, [r4, #4]
 800963e:	f7ff ff81 	bl	8009544 <std>
 8009642:	2201      	movs	r2, #1
 8009644:	2109      	movs	r1, #9
 8009646:	68a0      	ldr	r0, [r4, #8]
 8009648:	f7ff ff7c 	bl	8009544 <std>
 800964c:	2202      	movs	r2, #2
 800964e:	2112      	movs	r1, #18
 8009650:	68e0      	ldr	r0, [r4, #12]
 8009652:	f7ff ff77 	bl	8009544 <std>
 8009656:	2301      	movs	r3, #1
 8009658:	61a3      	str	r3, [r4, #24]
 800965a:	e7d1      	b.n	8009600 <__sinit+0xc>
 800965c:	08009b14 	.word	0x08009b14
 8009660:	0800958d 	.word	0x0800958d

08009664 <__sfp>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	4607      	mov	r7, r0
 8009668:	f7ff ffac 	bl	80095c4 <__sfp_lock_acquire>
 800966c:	4b1e      	ldr	r3, [pc, #120]	; (80096e8 <__sfp+0x84>)
 800966e:	681e      	ldr	r6, [r3, #0]
 8009670:	69b3      	ldr	r3, [r6, #24]
 8009672:	b913      	cbnz	r3, 800967a <__sfp+0x16>
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff ffbd 	bl	80095f4 <__sinit>
 800967a:	3648      	adds	r6, #72	; 0x48
 800967c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009680:	3b01      	subs	r3, #1
 8009682:	d503      	bpl.n	800968c <__sfp+0x28>
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	b30b      	cbz	r3, 80096cc <__sfp+0x68>
 8009688:	6836      	ldr	r6, [r6, #0]
 800968a:	e7f7      	b.n	800967c <__sfp+0x18>
 800968c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009690:	b9d5      	cbnz	r5, 80096c8 <__sfp+0x64>
 8009692:	4b16      	ldr	r3, [pc, #88]	; (80096ec <__sfp+0x88>)
 8009694:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009698:	60e3      	str	r3, [r4, #12]
 800969a:	6665      	str	r5, [r4, #100]	; 0x64
 800969c:	f000 f847 	bl	800972e <__retarget_lock_init_recursive>
 80096a0:	f7ff ff96 	bl	80095d0 <__sfp_lock_release>
 80096a4:	2208      	movs	r2, #8
 80096a6:	4629      	mov	r1, r5
 80096a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096b0:	6025      	str	r5, [r4, #0]
 80096b2:	61a5      	str	r5, [r4, #24]
 80096b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096b8:	f7fd fae2 	bl	8006c80 <memset>
 80096bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096c4:	4620      	mov	r0, r4
 80096c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c8:	3468      	adds	r4, #104	; 0x68
 80096ca:	e7d9      	b.n	8009680 <__sfp+0x1c>
 80096cc:	2104      	movs	r1, #4
 80096ce:	4638      	mov	r0, r7
 80096d0:	f7ff ff62 	bl	8009598 <__sfmoreglue>
 80096d4:	4604      	mov	r4, r0
 80096d6:	6030      	str	r0, [r6, #0]
 80096d8:	2800      	cmp	r0, #0
 80096da:	d1d5      	bne.n	8009688 <__sfp+0x24>
 80096dc:	f7ff ff78 	bl	80095d0 <__sfp_lock_release>
 80096e0:	230c      	movs	r3, #12
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	e7ee      	b.n	80096c4 <__sfp+0x60>
 80096e6:	bf00      	nop
 80096e8:	08009b14 	.word	0x08009b14
 80096ec:	ffff0001 	.word	0xffff0001

080096f0 <_fwalk_reent>:
 80096f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f4:	4606      	mov	r6, r0
 80096f6:	4688      	mov	r8, r1
 80096f8:	2700      	movs	r7, #0
 80096fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009702:	f1b9 0901 	subs.w	r9, r9, #1
 8009706:	d505      	bpl.n	8009714 <_fwalk_reent+0x24>
 8009708:	6824      	ldr	r4, [r4, #0]
 800970a:	2c00      	cmp	r4, #0
 800970c:	d1f7      	bne.n	80096fe <_fwalk_reent+0xe>
 800970e:	4638      	mov	r0, r7
 8009710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009714:	89ab      	ldrh	r3, [r5, #12]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d907      	bls.n	800972a <_fwalk_reent+0x3a>
 800971a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800971e:	3301      	adds	r3, #1
 8009720:	d003      	beq.n	800972a <_fwalk_reent+0x3a>
 8009722:	4629      	mov	r1, r5
 8009724:	4630      	mov	r0, r6
 8009726:	47c0      	blx	r8
 8009728:	4307      	orrs	r7, r0
 800972a:	3568      	adds	r5, #104	; 0x68
 800972c:	e7e9      	b.n	8009702 <_fwalk_reent+0x12>

0800972e <__retarget_lock_init_recursive>:
 800972e:	4770      	bx	lr

08009730 <__retarget_lock_acquire_recursive>:
 8009730:	4770      	bx	lr

08009732 <__retarget_lock_release_recursive>:
 8009732:	4770      	bx	lr

08009734 <__swhatbuf_r>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	460e      	mov	r6, r1
 8009738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973c:	4614      	mov	r4, r2
 800973e:	2900      	cmp	r1, #0
 8009740:	461d      	mov	r5, r3
 8009742:	b096      	sub	sp, #88	; 0x58
 8009744:	da07      	bge.n	8009756 <__swhatbuf_r+0x22>
 8009746:	2300      	movs	r3, #0
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	89b3      	ldrh	r3, [r6, #12]
 800974c:	061a      	lsls	r2, r3, #24
 800974e:	d410      	bmi.n	8009772 <__swhatbuf_r+0x3e>
 8009750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009754:	e00e      	b.n	8009774 <__swhatbuf_r+0x40>
 8009756:	466a      	mov	r2, sp
 8009758:	f000 f914 	bl	8009984 <_fstat_r>
 800975c:	2800      	cmp	r0, #0
 800975e:	dbf2      	blt.n	8009746 <__swhatbuf_r+0x12>
 8009760:	9a01      	ldr	r2, [sp, #4]
 8009762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800976a:	425a      	negs	r2, r3
 800976c:	415a      	adcs	r2, r3
 800976e:	602a      	str	r2, [r5, #0]
 8009770:	e7ee      	b.n	8009750 <__swhatbuf_r+0x1c>
 8009772:	2340      	movs	r3, #64	; 0x40
 8009774:	2000      	movs	r0, #0
 8009776:	6023      	str	r3, [r4, #0]
 8009778:	b016      	add	sp, #88	; 0x58
 800977a:	bd70      	pop	{r4, r5, r6, pc}

0800977c <__smakebuf_r>:
 800977c:	898b      	ldrh	r3, [r1, #12]
 800977e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009780:	079d      	lsls	r5, r3, #30
 8009782:	4606      	mov	r6, r0
 8009784:	460c      	mov	r4, r1
 8009786:	d507      	bpl.n	8009798 <__smakebuf_r+0x1c>
 8009788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	2301      	movs	r3, #1
 8009792:	6163      	str	r3, [r4, #20]
 8009794:	b002      	add	sp, #8
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	466a      	mov	r2, sp
 800979a:	ab01      	add	r3, sp, #4
 800979c:	f7ff ffca 	bl	8009734 <__swhatbuf_r>
 80097a0:	9900      	ldr	r1, [sp, #0]
 80097a2:	4605      	mov	r5, r0
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7ff f9c5 	bl	8008b34 <_malloc_r>
 80097aa:	b948      	cbnz	r0, 80097c0 <__smakebuf_r+0x44>
 80097ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b0:	059a      	lsls	r2, r3, #22
 80097b2:	d4ef      	bmi.n	8009794 <__smakebuf_r+0x18>
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	f043 0302 	orr.w	r3, r3, #2
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	e7e3      	b.n	8009788 <__smakebuf_r+0xc>
 80097c0:	4b0d      	ldr	r3, [pc, #52]	; (80097f8 <__smakebuf_r+0x7c>)
 80097c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	6020      	str	r0, [r4, #0]
 80097c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097cc:	81a3      	strh	r3, [r4, #12]
 80097ce:	9b00      	ldr	r3, [sp, #0]
 80097d0:	6120      	str	r0, [r4, #16]
 80097d2:	6163      	str	r3, [r4, #20]
 80097d4:	9b01      	ldr	r3, [sp, #4]
 80097d6:	b15b      	cbz	r3, 80097f0 <__smakebuf_r+0x74>
 80097d8:	4630      	mov	r0, r6
 80097da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097de:	f000 f8e3 	bl	80099a8 <_isatty_r>
 80097e2:	b128      	cbz	r0, 80097f0 <__smakebuf_r+0x74>
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	f043 0301 	orr.w	r3, r3, #1
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	89a0      	ldrh	r0, [r4, #12]
 80097f2:	4305      	orrs	r5, r0
 80097f4:	81a5      	strh	r5, [r4, #12]
 80097f6:	e7cd      	b.n	8009794 <__smakebuf_r+0x18>
 80097f8:	0800958d 	.word	0x0800958d

080097fc <memchr>:
 80097fc:	4603      	mov	r3, r0
 80097fe:	b510      	push	{r4, lr}
 8009800:	b2c9      	uxtb	r1, r1
 8009802:	4402      	add	r2, r0
 8009804:	4293      	cmp	r3, r2
 8009806:	4618      	mov	r0, r3
 8009808:	d101      	bne.n	800980e <memchr+0x12>
 800980a:	2000      	movs	r0, #0
 800980c:	e003      	b.n	8009816 <memchr+0x1a>
 800980e:	7804      	ldrb	r4, [r0, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	428c      	cmp	r4, r1
 8009814:	d1f6      	bne.n	8009804 <memchr+0x8>
 8009816:	bd10      	pop	{r4, pc}

08009818 <__malloc_lock>:
 8009818:	4801      	ldr	r0, [pc, #4]	; (8009820 <__malloc_lock+0x8>)
 800981a:	f7ff bf89 	b.w	8009730 <__retarget_lock_acquire_recursive>
 800981e:	bf00      	nop
 8009820:	200018f4 	.word	0x200018f4

08009824 <__malloc_unlock>:
 8009824:	4801      	ldr	r0, [pc, #4]	; (800982c <__malloc_unlock+0x8>)
 8009826:	f7ff bf84 	b.w	8009732 <__retarget_lock_release_recursive>
 800982a:	bf00      	nop
 800982c:	200018f4 	.word	0x200018f4

08009830 <_raise_r>:
 8009830:	291f      	cmp	r1, #31
 8009832:	b538      	push	{r3, r4, r5, lr}
 8009834:	4604      	mov	r4, r0
 8009836:	460d      	mov	r5, r1
 8009838:	d904      	bls.n	8009844 <_raise_r+0x14>
 800983a:	2316      	movs	r3, #22
 800983c:	6003      	str	r3, [r0, #0]
 800983e:	f04f 30ff 	mov.w	r0, #4294967295
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009846:	b112      	cbz	r2, 800984e <_raise_r+0x1e>
 8009848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800984c:	b94b      	cbnz	r3, 8009862 <_raise_r+0x32>
 800984e:	4620      	mov	r0, r4
 8009850:	f000 f830 	bl	80098b4 <_getpid_r>
 8009854:	462a      	mov	r2, r5
 8009856:	4601      	mov	r1, r0
 8009858:	4620      	mov	r0, r4
 800985a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800985e:	f000 b817 	b.w	8009890 <_kill_r>
 8009862:	2b01      	cmp	r3, #1
 8009864:	d00a      	beq.n	800987c <_raise_r+0x4c>
 8009866:	1c59      	adds	r1, r3, #1
 8009868:	d103      	bne.n	8009872 <_raise_r+0x42>
 800986a:	2316      	movs	r3, #22
 800986c:	6003      	str	r3, [r0, #0]
 800986e:	2001      	movs	r0, #1
 8009870:	e7e7      	b.n	8009842 <_raise_r+0x12>
 8009872:	2400      	movs	r4, #0
 8009874:	4628      	mov	r0, r5
 8009876:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800987a:	4798      	blx	r3
 800987c:	2000      	movs	r0, #0
 800987e:	e7e0      	b.n	8009842 <_raise_r+0x12>

08009880 <raise>:
 8009880:	4b02      	ldr	r3, [pc, #8]	; (800988c <raise+0xc>)
 8009882:	4601      	mov	r1, r0
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	f7ff bfd3 	b.w	8009830 <_raise_r>
 800988a:	bf00      	nop
 800988c:	2000043c 	.word	0x2000043c

08009890 <_kill_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	2300      	movs	r3, #0
 8009894:	4d06      	ldr	r5, [pc, #24]	; (80098b0 <_kill_r+0x20>)
 8009896:	4604      	mov	r4, r0
 8009898:	4608      	mov	r0, r1
 800989a:	4611      	mov	r1, r2
 800989c:	602b      	str	r3, [r5, #0]
 800989e:	f7f8 fd2f 	bl	8002300 <_kill>
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d102      	bne.n	80098ac <_kill_r+0x1c>
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	b103      	cbz	r3, 80098ac <_kill_r+0x1c>
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	bd38      	pop	{r3, r4, r5, pc}
 80098ae:	bf00      	nop
 80098b0:	200018fc 	.word	0x200018fc

080098b4 <_getpid_r>:
 80098b4:	f7f8 bd22 	b.w	80022fc <_getpid>

080098b8 <__sread>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	460c      	mov	r4, r1
 80098bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c0:	f000 f894 	bl	80099ec <_read_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	bfab      	itete	ge
 80098c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ca:	89a3      	ldrhlt	r3, [r4, #12]
 80098cc:	181b      	addge	r3, r3, r0
 80098ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098d2:	bfac      	ite	ge
 80098d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098d6:	81a3      	strhlt	r3, [r4, #12]
 80098d8:	bd10      	pop	{r4, pc}

080098da <__swrite>:
 80098da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	461f      	mov	r7, r3
 80098e0:	898b      	ldrh	r3, [r1, #12]
 80098e2:	4605      	mov	r5, r0
 80098e4:	05db      	lsls	r3, r3, #23
 80098e6:	460c      	mov	r4, r1
 80098e8:	4616      	mov	r6, r2
 80098ea:	d505      	bpl.n	80098f8 <__swrite+0x1e>
 80098ec:	2302      	movs	r3, #2
 80098ee:	2200      	movs	r2, #0
 80098f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f4:	f000 f868 	bl	80099c8 <_lseek_r>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	4632      	mov	r2, r6
 80098fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	4628      	mov	r0, r5
 8009904:	463b      	mov	r3, r7
 8009906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	f000 b817 	b.w	8009940 <_write_r>

08009912 <__sseek>:
 8009912:	b510      	push	{r4, lr}
 8009914:	460c      	mov	r4, r1
 8009916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991a:	f000 f855 	bl	80099c8 <_lseek_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	bf15      	itete	ne
 8009924:	6560      	strne	r0, [r4, #84]	; 0x54
 8009926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800992a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800992e:	81a3      	strheq	r3, [r4, #12]
 8009930:	bf18      	it	ne
 8009932:	81a3      	strhne	r3, [r4, #12]
 8009934:	bd10      	pop	{r4, pc}

08009936 <__sclose>:
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 b813 	b.w	8009964 <_close_r>
	...

08009940 <_write_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	2200      	movs	r2, #0
 800994a:	4d05      	ldr	r5, [pc, #20]	; (8009960 <_write_r+0x20>)
 800994c:	602a      	str	r2, [r5, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	f7f8 fcf4 	bl	800233c <_write>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	d102      	bne.n	800995e <_write_r+0x1e>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	b103      	cbz	r3, 800995e <_write_r+0x1e>
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	200018fc 	.word	0x200018fc

08009964 <_close_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	2300      	movs	r3, #0
 8009968:	4d05      	ldr	r5, [pc, #20]	; (8009980 <_close_r+0x1c>)
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f8 fcf2 	bl	8002358 <_close>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_close_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_close_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	200018fc 	.word	0x200018fc

08009984 <_fstat_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	2300      	movs	r3, #0
 8009988:	4d06      	ldr	r5, [pc, #24]	; (80099a4 <_fstat_r+0x20>)
 800998a:	4604      	mov	r4, r0
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	f7f8 fce5 	bl	8002360 <_fstat>
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	d102      	bne.n	80099a0 <_fstat_r+0x1c>
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	b103      	cbz	r3, 80099a0 <_fstat_r+0x1c>
 800999e:	6023      	str	r3, [r4, #0]
 80099a0:	bd38      	pop	{r3, r4, r5, pc}
 80099a2:	bf00      	nop
 80099a4:	200018fc 	.word	0x200018fc

080099a8 <_isatty_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	2300      	movs	r3, #0
 80099ac:	4d05      	ldr	r5, [pc, #20]	; (80099c4 <_isatty_r+0x1c>)
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	f7f8 fcda 	bl	800236c <_isatty>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_isatty_r+0x1a>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_isatty_r+0x1a>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	200018fc 	.word	0x200018fc

080099c8 <_lseek_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	4611      	mov	r1, r2
 80099d0:	2200      	movs	r2, #0
 80099d2:	4d05      	ldr	r5, [pc, #20]	; (80099e8 <_lseek_r+0x20>)
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f7f8 fcca 	bl	8002370 <_lseek>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_lseek_r+0x1e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_lseek_r+0x1e>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	200018fc 	.word	0x200018fc

080099ec <_read_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	4611      	mov	r1, r2
 80099f4:	2200      	movs	r2, #0
 80099f6:	4d05      	ldr	r5, [pc, #20]	; (8009a0c <_read_r+0x20>)
 80099f8:	602a      	str	r2, [r5, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f7f8 fc90 	bl	8002320 <_read>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_read_r+0x1e>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_read_r+0x1e>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	200018fc 	.word	0x200018fc

08009a10 <_init>:
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a12:	bf00      	nop
 8009a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a16:	bc08      	pop	{r3}
 8009a18:	469e      	mov	lr, r3
 8009a1a:	4770      	bx	lr

08009a1c <_fini>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	bf00      	nop
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr
