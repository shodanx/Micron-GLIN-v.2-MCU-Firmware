
Micron-GLIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c750  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800c890  0800c890  0001c890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cef0  0800cef0  00020368  2**0
                  CONTENTS
  4 .ARM          00000008  0800cef0  0800cef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cef8  0800cef8  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cef8  0800cef8  0001cef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cefc  0800cefc  0001cefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800cf00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d8  20000368  0800d268  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  0800d268  00021640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016428  00000000  00000000  00020391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003818  00000000  00000000  000367b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00039fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0003ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d3  00000000  00000000  0003b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f7c  00000000  00000000  00053213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ca13  00000000  00000000  0006518f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1ba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004850  00000000  00000000  000e1bf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000368 	.word	0x20000368
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c878 	.word	0x0800c878

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000036c 	.word	0x2000036c
 800017c:	0800c878 	.word	0x0800c878

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_d2f>:
 8000a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a98:	bf24      	itt	cs
 8000a9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa2:	d90d      	bls.n	8000ac0 <__aeabi_d2f+0x30>
 8000aa4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac4:	d121      	bne.n	8000b0a <__aeabi_d2f+0x7a>
 8000ac6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aca:	bfbc      	itt	lt
 8000acc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	4770      	bxlt	lr
 8000ad2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ada:	f1c2 0218 	rsb	r2, r2, #24
 8000ade:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aea:	bf18      	it	ne
 8000aec:	f040 0001 	orrne.w	r0, r0, #1
 8000af0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000afc:	ea40 000c 	orr.w	r0, r0, ip
 8000b00:	fa23 f302 	lsr.w	r3, r3, r2
 8000b04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b08:	e7cc      	b.n	8000aa4 <__aeabi_d2f+0x14>
 8000b0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0e:	d107      	bne.n	8000b20 <__aeabi_d2f+0x90>
 8000b10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b14:	bf1e      	ittt	ne
 8000b16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1e:	4770      	bxne	lr
 8000b20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_frsub>:
 8000b30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b34:	e002      	b.n	8000b3c <__addsf3>
 8000b36:	bf00      	nop

08000b38 <__aeabi_fsub>:
 8000b38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b3c <__addsf3>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	bf1f      	itttt	ne
 8000b40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b44:	ea92 0f03 	teqne	r2, r3
 8000b48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b50:	d06a      	beq.n	8000c28 <__addsf3+0xec>
 8000b52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5a:	bfc1      	itttt	gt
 8000b5c:	18d2      	addgt	r2, r2, r3
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	4048      	eorgt	r0, r1
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	bfb8      	it	lt
 8000b66:	425b      	neglt	r3, r3
 8000b68:	2b19      	cmp	r3, #25
 8000b6a:	bf88      	it	hi
 8000b6c:	4770      	bxhi	lr
 8000b6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4249      	negne	r1, r1
 8000b8e:	ea92 0f03 	teq	r2, r3
 8000b92:	d03f      	beq.n	8000c14 <__addsf3+0xd8>
 8000b94:	f1a2 0201 	sub.w	r2, r2, #1
 8000b98:	fa41 fc03 	asr.w	ip, r1, r3
 8000b9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ba0:	f1c3 0320 	rsb	r3, r3, #32
 8000ba4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	d502      	bpl.n	8000bb4 <__addsf3+0x78>
 8000bae:	4249      	negs	r1, r1
 8000bb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb8:	d313      	bcc.n	8000be2 <__addsf3+0xa6>
 8000bba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bbe:	d306      	bcc.n	8000bce <__addsf3+0x92>
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc6:	f102 0201 	add.w	r2, r2, #1
 8000bca:	2afe      	cmp	r2, #254	; 0xfe
 8000bcc:	d251      	bcs.n	8000c72 <__addsf3+0x136>
 8000bce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd6:	bf08      	it	eq
 8000bd8:	f020 0001 	biceq.w	r0, r0, #1
 8000bdc:	ea40 0003 	orr.w	r0, r0, r3
 8000be0:	4770      	bx	lr
 8000be2:	0049      	lsls	r1, r1, #1
 8000be4:	eb40 0000 	adc.w	r0, r0, r0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	bf28      	it	cs
 8000bec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bf0:	d2ed      	bcs.n	8000bce <__addsf3+0x92>
 8000bf2:	fab0 fc80 	clz	ip, r0
 8000bf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c02:	bfaa      	itet	ge
 8000c04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c08:	4252      	neglt	r2, r2
 8000c0a:	4318      	orrge	r0, r3
 8000c0c:	bfbc      	itt	lt
 8000c0e:	40d0      	lsrlt	r0, r2
 8000c10:	4318      	orrlt	r0, r3
 8000c12:	4770      	bx	lr
 8000c14:	f092 0f00 	teq	r2, #0
 8000c18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c1c:	bf06      	itte	eq
 8000c1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c22:	3201      	addeq	r2, #1
 8000c24:	3b01      	subne	r3, #1
 8000c26:	e7b5      	b.n	8000b94 <__addsf3+0x58>
 8000c28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c36:	d021      	beq.n	8000c7c <__addsf3+0x140>
 8000c38:	ea92 0f03 	teq	r2, r3
 8000c3c:	d004      	beq.n	8000c48 <__addsf3+0x10c>
 8000c3e:	f092 0f00 	teq	r2, #0
 8000c42:	bf08      	it	eq
 8000c44:	4608      	moveq	r0, r1
 8000c46:	4770      	bx	lr
 8000c48:	ea90 0f01 	teq	r0, r1
 8000c4c:	bf1c      	itt	ne
 8000c4e:	2000      	movne	r0, #0
 8000c50:	4770      	bxne	lr
 8000c52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c56:	d104      	bne.n	8000c62 <__addsf3+0x126>
 8000c58:	0040      	lsls	r0, r0, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c66:	bf3c      	itt	cc
 8000c68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c6c:	4770      	bxcc	lr
 8000c6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7a:	4770      	bx	lr
 8000c7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c80:	bf16      	itet	ne
 8000c82:	4608      	movne	r0, r1
 8000c84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c88:	4601      	movne	r1, r0
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	bf06      	itte	eq
 8000c8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c92:	ea90 0f01 	teqeq	r0, r1
 8000c96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_ui2f>:
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e004      	b.n	8000cac <__aeabi_i2f+0x8>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_i2f>:
 8000ca4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	bf48      	it	mi
 8000caa:	4240      	negmi	r0, r0
 8000cac:	ea5f 0c00 	movs.w	ip, r0
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb8:	4601      	mov	r1, r0
 8000cba:	f04f 0000 	mov.w	r0, #0
 8000cbe:	e01c      	b.n	8000cfa <__aeabi_l2f+0x2a>

08000cc0 <__aeabi_ul2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e00a      	b.n	8000ce4 <__aeabi_l2f+0x14>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_l2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cdc:	d502      	bpl.n	8000ce4 <__aeabi_l2f+0x14>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	ea5f 0c01 	movs.w	ip, r1
 8000ce8:	bf02      	ittt	eq
 8000cea:	4684      	moveq	ip, r0
 8000cec:	4601      	moveq	r1, r0
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf4:	bf08      	it	eq
 8000cf6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfe:	fabc f28c 	clz	r2, ip
 8000d02:	3a08      	subs	r2, #8
 8000d04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d08:	db10      	blt.n	8000d2c <__aeabi_l2f+0x5c>
 8000d0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0e:	4463      	add	r3, ip
 8000d10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	f020 0001 	biceq.w	r0, r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	f102 0220 	add.w	r2, r2, #32
 8000d30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_fmul>:
 8000d4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d54:	bf1e      	ittt	ne
 8000d56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5a:	ea92 0f0c 	teqne	r2, ip
 8000d5e:	ea93 0f0c 	teqne	r3, ip
 8000d62:	d06f      	beq.n	8000e44 <__aeabi_fmul+0xf8>
 8000d64:	441a      	add	r2, r3
 8000d66:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6a:	0240      	lsls	r0, r0, #9
 8000d6c:	bf18      	it	ne
 8000d6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d72:	d01e      	beq.n	8000db2 <__aeabi_fmul+0x66>
 8000d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d80:	fba0 3101 	umull	r3, r1, r0, r1
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d8c:	bf3e      	ittt	cc
 8000d8e:	0049      	lslcc	r1, r1, #1
 8000d90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d94:	005b      	lslcc	r3, r3, #1
 8000d96:	ea40 0001 	orr.w	r0, r0, r1
 8000d9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9e:	2afd      	cmp	r2, #253	; 0xfd
 8000da0:	d81d      	bhi.n	8000dde <__aeabi_fmul+0x92>
 8000da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000daa:	bf08      	it	eq
 8000dac:	f020 0001 	biceq.w	r0, r0, #1
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dba:	bf08      	it	eq
 8000dbc:	0249      	lsleq	r1, r1, #9
 8000dbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc6:	3a7f      	subs	r2, #127	; 0x7f
 8000dc8:	bfc2      	ittt	gt
 8000dca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd2:	4770      	bxgt	lr
 8000dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	dc5d      	bgt.n	8000e9c <__aeabi_fmul+0x150>
 8000de0:	f112 0f19 	cmn.w	r2, #25
 8000de4:	bfdc      	itt	le
 8000de6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dea:	4770      	bxle	lr
 8000dec:	f1c2 0200 	rsb	r2, r2, #0
 8000df0:	0041      	lsls	r1, r0, #1
 8000df2:	fa21 f102 	lsr.w	r1, r1, r2
 8000df6:	f1c2 0220 	rsb	r2, r2, #32
 8000dfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e02:	f140 0000 	adc.w	r0, r0, #0
 8000e06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0a:	bf08      	it	eq
 8000e0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e10:	4770      	bx	lr
 8000e12:	f092 0f00 	teq	r2, #0
 8000e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0040      	lsleq	r0, r0, #1
 8000e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e22:	3a01      	subeq	r2, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xce>
 8000e26:	ea40 000c 	orr.w	r0, r0, ip
 8000e2a:	f093 0f00 	teq	r3, #0
 8000e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0049      	lsleq	r1, r1, #1
 8000e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3a:	3b01      	subeq	r3, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xe6>
 8000e3e:	ea41 010c 	orr.w	r1, r1, ip
 8000e42:	e78f      	b.n	8000d64 <__aeabi_fmul+0x18>
 8000e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	bf18      	it	ne
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d00a      	beq.n	8000e6a <__aeabi_fmul+0x11e>
 8000e54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e58:	bf18      	it	ne
 8000e5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5e:	d1d8      	bne.n	8000e12 <__aeabi_fmul+0xc6>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	bf17      	itett	ne
 8000e70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e74:	4608      	moveq	r0, r1
 8000e76:	f091 0f00 	teqne	r1, #0
 8000e7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7e:	d014      	beq.n	8000eaa <__aeabi_fmul+0x15e>
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d101      	bne.n	8000e8a <__aeabi_fmul+0x13e>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	d10f      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e8a:	ea93 0f0c 	teq	r3, ip
 8000e8e:	d103      	bne.n	8000e98 <__aeabi_fmul+0x14c>
 8000e90:	024b      	lsls	r3, r1, #9
 8000e92:	bf18      	it	ne
 8000e94:	4608      	movne	r0, r1
 8000e96:	d108      	bne.n	8000eaa <__aeabi_fmul+0x15e>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	4770      	bx	lr
 8000eaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_fdiv>:
 8000eb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ebc:	bf1e      	ittt	ne
 8000ebe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec2:	ea92 0f0c 	teqne	r2, ip
 8000ec6:	ea93 0f0c 	teqne	r3, ip
 8000eca:	d069      	beq.n	8000fa0 <__aeabi_fdiv+0xec>
 8000ecc:	eba2 0203 	sub.w	r2, r2, r3
 8000ed0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed4:	0249      	lsls	r1, r1, #9
 8000ed6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eda:	d037      	beq.n	8000f4c <__aeabi_fdiv+0x98>
 8000edc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eec:	428b      	cmp	r3, r1
 8000eee:	bf38      	it	cc
 8000ef0:	005b      	lslcc	r3, r3, #1
 8000ef2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efa:	428b      	cmp	r3, r1
 8000efc:	bf24      	itt	cs
 8000efe:	1a5b      	subcs	r3, r3, r1
 8000f00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f16:	bf24      	itt	cs
 8000f18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f24:	bf24      	itt	cs
 8000f26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	bf18      	it	ne
 8000f32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f36:	d1e0      	bne.n	8000efa <__aeabi_fdiv+0x46>
 8000f38:	2afd      	cmp	r2, #253	; 0xfd
 8000f3a:	f63f af50 	bhi.w	8000dde <__aeabi_fmul+0x92>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f44:	bf08      	it	eq
 8000f46:	f020 0001 	biceq.w	r0, r0, #1
 8000f4a:	4770      	bx	lr
 8000f4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f54:	327f      	adds	r2, #127	; 0x7f
 8000f56:	bfc2      	ittt	gt
 8000f58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f60:	4770      	bxgt	lr
 8000f62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	e737      	b.n	8000dde <__aeabi_fmul+0x92>
 8000f6e:	f092 0f00 	teq	r2, #0
 8000f72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0040      	lsleq	r0, r0, #1
 8000f7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7e:	3a01      	subeq	r2, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xc2>
 8000f82:	ea40 000c 	orr.w	r0, r0, ip
 8000f86:	f093 0f00 	teq	r3, #0
 8000f8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0049      	lsleq	r1, r1, #1
 8000f92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f96:	3b01      	subeq	r3, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xda>
 8000f9a:	ea41 010c 	orr.w	r1, r1, ip
 8000f9e:	e795      	b.n	8000ecc <__aeabi_fdiv+0x18>
 8000fa0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa4:	ea92 0f0c 	teq	r2, ip
 8000fa8:	d108      	bne.n	8000fbc <__aeabi_fdiv+0x108>
 8000faa:	0242      	lsls	r2, r0, #9
 8000fac:	f47f af7d 	bne.w	8000eaa <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	f47f af70 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e776      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	d104      	bne.n	8000fcc <__aeabi_fdiv+0x118>
 8000fc2:	024b      	lsls	r3, r1, #9
 8000fc4:	f43f af4c 	beq.w	8000e60 <__aeabi_fmul+0x114>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e76e      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd0:	bf18      	it	ne
 8000fd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	d1ca      	bne.n	8000f6e <__aeabi_fdiv+0xba>
 8000fd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fdc:	f47f af5c 	bne.w	8000e98 <__aeabi_fmul+0x14c>
 8000fe0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe4:	f47f af3c 	bne.w	8000e60 <__aeabi_fmul+0x114>
 8000fe8:	e75f      	b.n	8000eaa <__aeabi_fmul+0x15e>
 8000fea:	bf00      	nop

08000fec <__gesf2>:
 8000fec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff0:	e006      	b.n	8001000 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__lesf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	e002      	b.n	8001000 <__cmpsf2+0x4>
 8000ffa:	bf00      	nop

08000ffc <__cmpsf2>:
 8000ffc:	f04f 0c01 	mov.w	ip, #1
 8001000:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001004:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001008:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	bf18      	it	ne
 8001012:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001016:	d011      	beq.n	800103c <__cmpsf2+0x40>
 8001018:	b001      	add	sp, #4
 800101a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800101e:	bf18      	it	ne
 8001020:	ea90 0f01 	teqne	r0, r1
 8001024:	bf58      	it	pl
 8001026:	ebb2 0003 	subspl.w	r0, r2, r3
 800102a:	bf88      	it	hi
 800102c:	17c8      	asrhi	r0, r1, #31
 800102e:	bf38      	it	cc
 8001030:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001034:	bf18      	it	ne
 8001036:	f040 0001 	orrne.w	r0, r0, #1
 800103a:	4770      	bx	lr
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	d102      	bne.n	8001048 <__cmpsf2+0x4c>
 8001042:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001046:	d105      	bne.n	8001054 <__cmpsf2+0x58>
 8001048:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800104c:	d1e4      	bne.n	8001018 <__cmpsf2+0x1c>
 800104e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001052:	d0e1      	beq.n	8001018 <__cmpsf2+0x1c>
 8001054:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <__aeabi_cfrcmple>:
 800105c:	4684      	mov	ip, r0
 800105e:	4608      	mov	r0, r1
 8001060:	4661      	mov	r1, ip
 8001062:	e7ff      	b.n	8001064 <__aeabi_cfcmpeq>

08001064 <__aeabi_cfcmpeq>:
 8001064:	b50f      	push	{r0, r1, r2, r3, lr}
 8001066:	f7ff ffc9 	bl	8000ffc <__cmpsf2>
 800106a:	2800      	cmp	r0, #0
 800106c:	bf48      	it	mi
 800106e:	f110 0f00 	cmnmi.w	r0, #0
 8001072:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001074 <__aeabi_fcmpeq>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff fff4 	bl	8001064 <__aeabi_cfcmpeq>
 800107c:	bf0c      	ite	eq
 800107e:	2001      	moveq	r0, #1
 8001080:	2000      	movne	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmplt>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffea 	bl	8001064 <__aeabi_cfcmpeq>
 8001090:	bf34      	ite	cc
 8001092:	2001      	movcc	r0, #1
 8001094:	2000      	movcs	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmple>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffe0 	bl	8001064 <__aeabi_cfcmpeq>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmpge>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffd2 	bl	800105c <__aeabi_cfrcmple>
 80010b8:	bf94      	ite	ls
 80010ba:	2001      	movls	r0, #1
 80010bc:	2000      	movhi	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmpgt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffc8 	bl	800105c <__aeabi_cfrcmple>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_f2uiz>:
 80010d8:	0042      	lsls	r2, r0, #1
 80010da:	d20e      	bcs.n	80010fa <__aeabi_f2uiz+0x22>
 80010dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e0:	d30b      	bcc.n	80010fa <__aeabi_f2uiz+0x22>
 80010e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ea:	d409      	bmi.n	8001100 <__aeabi_f2uiz+0x28>
 80010ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2uiz+0x32>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d102      	bne.n	8001110 <__aeabi_f2uiz+0x38>
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	4770      	bx	lr
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <__aeabi_uldivmod>:
 8001118:	b953      	cbnz	r3, 8001130 <__aeabi_uldivmod+0x18>
 800111a:	b94a      	cbnz	r2, 8001130 <__aeabi_uldivmod+0x18>
 800111c:	2900      	cmp	r1, #0
 800111e:	bf08      	it	eq
 8001120:	2800      	cmpeq	r0, #0
 8001122:	bf1c      	itt	ne
 8001124:	f04f 31ff 	movne.w	r1, #4294967295
 8001128:	f04f 30ff 	movne.w	r0, #4294967295
 800112c:	f000 b9a6 	b.w	800147c <__aeabi_idiv0>
 8001130:	f1ad 0c08 	sub.w	ip, sp, #8
 8001134:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001138:	f000 f83e 	bl	80011b8 <__udivmoddi4>
 800113c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001144:	b004      	add	sp, #16
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	460c      	mov	r4, r1
 800114c:	4605      	mov	r5, r0
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	f7ff fc53 	bl	8000a00 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff f9c9 	bl	800051c <__aeabi_dmul>
 800118a:	f7ff fc61 	bl	8000a50 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff f9c0 	bl	800051c <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f802 	bl	80001ac <__aeabi_dsub>
 80011a8:	f7ff fc52 	bl	8000a50 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	9e08      	ldr	r6, [sp, #32]
 80011be:	460d      	mov	r5, r1
 80011c0:	4604      	mov	r4, r0
 80011c2:	468e      	mov	lr, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f040 8083 	bne.w	80012d0 <__udivmoddi4+0x118>
 80011ca:	428a      	cmp	r2, r1
 80011cc:	4617      	mov	r7, r2
 80011ce:	d947      	bls.n	8001260 <__udivmoddi4+0xa8>
 80011d0:	fab2 f382 	clz	r3, r2
 80011d4:	b14b      	cbz	r3, 80011ea <__udivmoddi4+0x32>
 80011d6:	f1c3 0120 	rsb	r1, r3, #32
 80011da:	fa05 fe03 	lsl.w	lr, r5, r3
 80011de:	fa20 f101 	lsr.w	r1, r0, r1
 80011e2:	409f      	lsls	r7, r3
 80011e4:	ea41 0e0e 	orr.w	lr, r1, lr
 80011e8:	409c      	lsls	r4, r3
 80011ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011ee:	fbbe fcf8 	udiv	ip, lr, r8
 80011f2:	fa1f f987 	uxth.w	r9, r7
 80011f6:	fb08 e21c 	mls	r2, r8, ip, lr
 80011fa:	fb0c f009 	mul.w	r0, ip, r9
 80011fe:	0c21      	lsrs	r1, r4, #16
 8001200:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001204:	4290      	cmp	r0, r2
 8001206:	d90a      	bls.n	800121e <__udivmoddi4+0x66>
 8001208:	18ba      	adds	r2, r7, r2
 800120a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800120e:	f080 8118 	bcs.w	8001442 <__udivmoddi4+0x28a>
 8001212:	4290      	cmp	r0, r2
 8001214:	f240 8115 	bls.w	8001442 <__udivmoddi4+0x28a>
 8001218:	f1ac 0c02 	sub.w	ip, ip, #2
 800121c:	443a      	add	r2, r7
 800121e:	1a12      	subs	r2, r2, r0
 8001220:	fbb2 f0f8 	udiv	r0, r2, r8
 8001224:	fb08 2210 	mls	r2, r8, r0, r2
 8001228:	fb00 f109 	mul.w	r1, r0, r9
 800122c:	b2a4      	uxth	r4, r4
 800122e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001232:	42a1      	cmp	r1, r4
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x92>
 8001236:	193c      	adds	r4, r7, r4
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 8103 	bcs.w	8001446 <__udivmoddi4+0x28e>
 8001240:	42a1      	cmp	r1, r4
 8001242:	f240 8100 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001246:	3802      	subs	r0, #2
 8001248:	443c      	add	r4, r7
 800124a:	1a64      	subs	r4, r4, r1
 800124c:	2100      	movs	r1, #0
 800124e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa4>
 8001254:	2200      	movs	r2, #0
 8001256:	40dc      	lsrs	r4, r3
 8001258:	e9c6 4200 	strd	r4, r2, [r6]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	b902      	cbnz	r2, 8001264 <__udivmoddi4+0xac>
 8001262:	deff      	udf	#255	; 0xff
 8001264:	fab2 f382 	clz	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d14f      	bne.n	800130c <__udivmoddi4+0x154>
 800126c:	1a8d      	subs	r5, r1, r2
 800126e:	2101      	movs	r1, #1
 8001270:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001274:	fa1f f882 	uxth.w	r8, r2
 8001278:	fbb5 fcfe 	udiv	ip, r5, lr
 800127c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001280:	fb08 f00c 	mul.w	r0, r8, ip
 8001284:	0c22      	lsrs	r2, r4, #16
 8001286:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800128a:	42a8      	cmp	r0, r5
 800128c:	d907      	bls.n	800129e <__udivmoddi4+0xe6>
 800128e:	197d      	adds	r5, r7, r5
 8001290:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001294:	d202      	bcs.n	800129c <__udivmoddi4+0xe4>
 8001296:	42a8      	cmp	r0, r5
 8001298:	f200 80e9 	bhi.w	800146e <__udivmoddi4+0x2b6>
 800129c:	4694      	mov	ip, r2
 800129e:	1a2d      	subs	r5, r5, r0
 80012a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80012a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80012a8:	fb08 f800 	mul.w	r8, r8, r0
 80012ac:	b2a4      	uxth	r4, r4
 80012ae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012b2:	45a0      	cmp	r8, r4
 80012b4:	d907      	bls.n	80012c6 <__udivmoddi4+0x10e>
 80012b6:	193c      	adds	r4, r7, r4
 80012b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012bc:	d202      	bcs.n	80012c4 <__udivmoddi4+0x10c>
 80012be:	45a0      	cmp	r8, r4
 80012c0:	f200 80d9 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012c4:	4610      	mov	r0, r2
 80012c6:	eba4 0408 	sub.w	r4, r4, r8
 80012ca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012ce:	e7c0      	b.n	8001252 <__udivmoddi4+0x9a>
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d908      	bls.n	80012e6 <__udivmoddi4+0x12e>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	f000 80b1 	beq.w	800143c <__udivmoddi4+0x284>
 80012da:	2100      	movs	r1, #0
 80012dc:	e9c6 0500 	strd	r0, r5, [r6]
 80012e0:	4608      	mov	r0, r1
 80012e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e6:	fab3 f183 	clz	r1, r3
 80012ea:	2900      	cmp	r1, #0
 80012ec:	d14b      	bne.n	8001386 <__udivmoddi4+0x1ce>
 80012ee:	42ab      	cmp	r3, r5
 80012f0:	d302      	bcc.n	80012f8 <__udivmoddi4+0x140>
 80012f2:	4282      	cmp	r2, r0
 80012f4:	f200 80b9 	bhi.w	800146a <__udivmoddi4+0x2b2>
 80012f8:	1a84      	subs	r4, r0, r2
 80012fa:	eb65 0303 	sbc.w	r3, r5, r3
 80012fe:	2001      	movs	r0, #1
 8001300:	469e      	mov	lr, r3
 8001302:	2e00      	cmp	r6, #0
 8001304:	d0aa      	beq.n	800125c <__udivmoddi4+0xa4>
 8001306:	e9c6 4e00 	strd	r4, lr, [r6]
 800130a:	e7a7      	b.n	800125c <__udivmoddi4+0xa4>
 800130c:	409f      	lsls	r7, r3
 800130e:	f1c3 0220 	rsb	r2, r3, #32
 8001312:	40d1      	lsrs	r1, r2
 8001314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001318:	fbb1 f0fe 	udiv	r0, r1, lr
 800131c:	fa1f f887 	uxth.w	r8, r7
 8001320:	fb0e 1110 	mls	r1, lr, r0, r1
 8001324:	fa24 f202 	lsr.w	r2, r4, r2
 8001328:	409d      	lsls	r5, r3
 800132a:	fb00 fc08 	mul.w	ip, r0, r8
 800132e:	432a      	orrs	r2, r5
 8001330:	0c15      	lsrs	r5, r2, #16
 8001332:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001336:	45ac      	cmp	ip, r5
 8001338:	fa04 f403 	lsl.w	r4, r4, r3
 800133c:	d909      	bls.n	8001352 <__udivmoddi4+0x19a>
 800133e:	197d      	adds	r5, r7, r5
 8001340:	f100 31ff 	add.w	r1, r0, #4294967295
 8001344:	f080 808f 	bcs.w	8001466 <__udivmoddi4+0x2ae>
 8001348:	45ac      	cmp	ip, r5
 800134a:	f240 808c 	bls.w	8001466 <__udivmoddi4+0x2ae>
 800134e:	3802      	subs	r0, #2
 8001350:	443d      	add	r5, r7
 8001352:	eba5 050c 	sub.w	r5, r5, ip
 8001356:	fbb5 f1fe 	udiv	r1, r5, lr
 800135a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800135e:	fb01 f908 	mul.w	r9, r1, r8
 8001362:	b295      	uxth	r5, r2
 8001364:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001368:	45a9      	cmp	r9, r5
 800136a:	d907      	bls.n	800137c <__udivmoddi4+0x1c4>
 800136c:	197d      	adds	r5, r7, r5
 800136e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001372:	d274      	bcs.n	800145e <__udivmoddi4+0x2a6>
 8001374:	45a9      	cmp	r9, r5
 8001376:	d972      	bls.n	800145e <__udivmoddi4+0x2a6>
 8001378:	3902      	subs	r1, #2
 800137a:	443d      	add	r5, r7
 800137c:	eba5 0509 	sub.w	r5, r5, r9
 8001380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001384:	e778      	b.n	8001278 <__udivmoddi4+0xc0>
 8001386:	f1c1 0720 	rsb	r7, r1, #32
 800138a:	408b      	lsls	r3, r1
 800138c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001390:	ea4c 0c03 	orr.w	ip, ip, r3
 8001394:	fa25 f407 	lsr.w	r4, r5, r7
 8001398:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800139c:	fbb4 f9fe 	udiv	r9, r4, lr
 80013a0:	fa1f f88c 	uxth.w	r8, ip
 80013a4:	fb0e 4419 	mls	r4, lr, r9, r4
 80013a8:	fa20 f307 	lsr.w	r3, r0, r7
 80013ac:	fb09 fa08 	mul.w	sl, r9, r8
 80013b0:	408d      	lsls	r5, r1
 80013b2:	431d      	orrs	r5, r3
 80013b4:	0c2b      	lsrs	r3, r5, #16
 80013b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013ba:	45a2      	cmp	sl, r4
 80013bc:	fa02 f201 	lsl.w	r2, r2, r1
 80013c0:	fa00 f301 	lsl.w	r3, r0, r1
 80013c4:	d909      	bls.n	80013da <__udivmoddi4+0x222>
 80013c6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ca:	f109 30ff 	add.w	r0, r9, #4294967295
 80013ce:	d248      	bcs.n	8001462 <__udivmoddi4+0x2aa>
 80013d0:	45a2      	cmp	sl, r4
 80013d2:	d946      	bls.n	8001462 <__udivmoddi4+0x2aa>
 80013d4:	f1a9 0902 	sub.w	r9, r9, #2
 80013d8:	4464      	add	r4, ip
 80013da:	eba4 040a 	sub.w	r4, r4, sl
 80013de:	fbb4 f0fe 	udiv	r0, r4, lr
 80013e2:	fb0e 4410 	mls	r4, lr, r0, r4
 80013e6:	fb00 fa08 	mul.w	sl, r0, r8
 80013ea:	b2ad      	uxth	r5, r5
 80013ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013f0:	45a2      	cmp	sl, r4
 80013f2:	d908      	bls.n	8001406 <__udivmoddi4+0x24e>
 80013f4:	eb1c 0404 	adds.w	r4, ip, r4
 80013f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80013fc:	d22d      	bcs.n	800145a <__udivmoddi4+0x2a2>
 80013fe:	45a2      	cmp	sl, r4
 8001400:	d92b      	bls.n	800145a <__udivmoddi4+0x2a2>
 8001402:	3802      	subs	r0, #2
 8001404:	4464      	add	r4, ip
 8001406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800140a:	fba0 8902 	umull	r8, r9, r0, r2
 800140e:	eba4 040a 	sub.w	r4, r4, sl
 8001412:	454c      	cmp	r4, r9
 8001414:	46c6      	mov	lr, r8
 8001416:	464d      	mov	r5, r9
 8001418:	d319      	bcc.n	800144e <__udivmoddi4+0x296>
 800141a:	d016      	beq.n	800144a <__udivmoddi4+0x292>
 800141c:	b15e      	cbz	r6, 8001436 <__udivmoddi4+0x27e>
 800141e:	ebb3 020e 	subs.w	r2, r3, lr
 8001422:	eb64 0405 	sbc.w	r4, r4, r5
 8001426:	fa04 f707 	lsl.w	r7, r4, r7
 800142a:	fa22 f301 	lsr.w	r3, r2, r1
 800142e:	431f      	orrs	r7, r3
 8001430:	40cc      	lsrs	r4, r1
 8001432:	e9c6 7400 	strd	r7, r4, [r6]
 8001436:	2100      	movs	r1, #0
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143c:	4631      	mov	r1, r6
 800143e:	4630      	mov	r0, r6
 8001440:	e70c      	b.n	800125c <__udivmoddi4+0xa4>
 8001442:	468c      	mov	ip, r1
 8001444:	e6eb      	b.n	800121e <__udivmoddi4+0x66>
 8001446:	4610      	mov	r0, r2
 8001448:	e6ff      	b.n	800124a <__udivmoddi4+0x92>
 800144a:	4543      	cmp	r3, r8
 800144c:	d2e6      	bcs.n	800141c <__udivmoddi4+0x264>
 800144e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001452:	eb69 050c 	sbc.w	r5, r9, ip
 8001456:	3801      	subs	r0, #1
 8001458:	e7e0      	b.n	800141c <__udivmoddi4+0x264>
 800145a:	4628      	mov	r0, r5
 800145c:	e7d3      	b.n	8001406 <__udivmoddi4+0x24e>
 800145e:	4611      	mov	r1, r2
 8001460:	e78c      	b.n	800137c <__udivmoddi4+0x1c4>
 8001462:	4681      	mov	r9, r0
 8001464:	e7b9      	b.n	80013da <__udivmoddi4+0x222>
 8001466:	4608      	mov	r0, r1
 8001468:	e773      	b.n	8001352 <__udivmoddi4+0x19a>
 800146a:	4608      	mov	r0, r1
 800146c:	e749      	b.n	8001302 <__udivmoddi4+0x14a>
 800146e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001472:	443d      	add	r5, r7
 8001474:	e713      	b.n	800129e <__udivmoddi4+0xe6>
 8001476:	3802      	subs	r0, #2
 8001478:	443c      	add	r4, r7
 800147a:	e724      	b.n	80012c6 <__udivmoddi4+0x10e>

0800147c <__aeabi_idiv0>:
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <__circ_gbuf_pop>:
#include <string.h>

#include <circular_buffer.h>

int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int total;
	char *tail;

	total = circ_buf->push_count - circ_buf->pop_count;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	88db      	ldrh	r3, [r3, #6]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
	if (total < 0)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	da05      	bge.n	80014ac <__circ_gbuf_pop+0x2c>
		total += (2 * circ_buf->size);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	891b      	ldrh	r3, [r3, #8]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

	if (total == 0)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <__circ_gbuf_pop+0x38>
		return -1; // Empty
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e031      	b.n	800151c <__circ_gbuf_pop+0x9c>

	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	88db      	ldrh	r3, [r3, #6]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	8912      	ldrh	r2, [r2, #8]
 80014c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80014c8:	fb02 f200 	mul.w	r2, r2, r0
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	461a      	mov	r2, r3
			* circ_buf->element_size);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	895b      	ldrh	r3, [r3, #10]
 80014d6:	fb03 f302 	mul.w	r3, r3, r2
	tail = (char *)circ_buf->buffer + ((circ_buf->pop_count % circ_buf->size)
 80014da:	440b      	add	r3, r1
 80014dc:	613b      	str	r3, [r7, #16]

	if (elem)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <__circ_gbuf_pop+0x72>
		memcpy(elem, tail, circ_buf->element_size);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6939      	ldr	r1, [r7, #16]
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f008 faf5 	bl	8009adc <memcpy>

	if (!read_only) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d110      	bne.n	800151a <__circ_gbuf_pop+0x9a>
#ifdef CRICBUF_CLEAN_ON_POP
		memset(tail, 0, circ_buf->element_size);
#endif
		circ_buf->pop_count++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	88db      	ldrh	r3, [r3, #6]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	80da      	strh	r2, [r3, #6]
		if (circ_buf->pop_count >= (2*circ_buf->size))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	88db      	ldrh	r3, [r3, #6]
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	891b      	ldrh	r3, [r3, #8]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	429a      	cmp	r2, r3
 8001512:	db02      	blt.n	800151a <__circ_gbuf_pop+0x9a>
			circ_buf->pop_count = 0;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	80da      	strh	r2, [r3, #6]
	}
	return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <__circ_gbuf_push>:

int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	int total;
	char *head;

	total = circ_buf->push_count - circ_buf->pop_count;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	889b      	ldrh	r3, [r3, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	88db      	ldrh	r3, [r3, #6]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	60fb      	str	r3, [r7, #12]
	if (total < 0)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da05      	bge.n	800154e <__circ_gbuf_push+0x2a>
		total += (2 * circ_buf->size);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	891b      	ldrh	r3, [r3, #8]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

	if (total >=  circ_buf->size)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	891b      	ldrh	r3, [r3, #8]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4293      	cmp	r3, r2
 8001558:	db02      	blt.n	8001560 <__circ_gbuf_push+0x3c>
		return -1; // Full
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e02b      	b.n	80015b8 <__circ_gbuf_push+0x94>

	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	8912      	ldrh	r2, [r2, #8]
 800156c:	fbb3 f0f2 	udiv	r0, r3, r2
 8001570:	fb02 f200 	mul.w	r2, r2, r0
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
			* circ_buf->element_size );
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	895b      	ldrh	r3, [r3, #10]
 800157e:	fb03 f302 	mul.w	r3, r3, r2
	head = (char *)circ_buf->buffer + ( (circ_buf->push_count % circ_buf->size)
 8001582:	440b      	add	r3, r1
 8001584:	60bb      	str	r3, [r7, #8]
	memcpy(head, elem, circ_buf->element_size);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	895b      	ldrh	r3, [r3, #10]
 800158a:	461a      	mov	r2, r3
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	68b8      	ldr	r0, [r7, #8]
 8001590:	f008 faa4 	bl	8009adc <memcpy>
	circ_buf->push_count++;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	3301      	adds	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	809a      	strh	r2, [r3, #4]
	if (circ_buf->push_count >= (2*circ_buf->size))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	891b      	ldrh	r3, [r3, #8]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	429a      	cmp	r2, r3
 80015ae:	db02      	blt.n	80015b6 <__circ_gbuf_push+0x92>
		circ_buf->push_count = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	809a      	strh	r2, [r3, #4]
	return 0;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015dc:	f043 0320 	orr.w	r3, r3, #32
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	61d3      	str	r3, [r2, #28]
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <MX_GPIO_Init+0x124>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <MX_GPIO_Init+0x124>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a36      	ldr	r2, [pc, #216]	; (80016e4 <MX_GPIO_Init+0x124>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <MX_GPIO_Init+0x124>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DAC_CLR_Pin|DAC_SYNC_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2111      	movs	r1, #17
 8001622:	4831      	ldr	r0, [pc, #196]	; (80016e8 <MX_GPIO_Init+0x128>)
 8001624:	f001 fb71 	bl	8002d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2108      	movs	r1, #8
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <MX_GPIO_Init+0x12c>)
 800162e:	f001 fb6c 	bl	8002d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_CLR_Pin;
 8001632:	2301      	movs	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001636:	2311      	movs	r3, #17
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_CLR_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	4827      	ldr	r0, [pc, #156]	; (80016e8 <MX_GPIO_Init+0x128>)
 800164a:	f001 f9c7 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_ALARM_Pin;
 800164e:	2302      	movs	r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001652:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001658:	2301      	movs	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DAC_ALARM_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4821      	ldr	r0, [pc, #132]	; (80016e8 <MX_GPIO_Init+0x128>)
 8001664:	f001 f9ba 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LDAC_Pin;
 8001668:	2304      	movs	r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CPU_LDAC_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4619      	mov	r1, r3
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <MX_GPIO_Init+0x128>)
 800167e:	f001 f9ad 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_SYNC_Pin;
 8001682:	2310      	movs	r3, #16
 8001684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DAC_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4619      	mov	r1, r3
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <MX_GPIO_Init+0x128>)
 800169a:	f001 f99f 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COUNT_EN_Pin;
 800169e:	2308      	movs	r3, #8
 80016a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COUNT_EN_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_GPIO_Init+0x12c>)
 80016b6:	f001 f991 	bl	80029dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2007      	movs	r0, #7
 80016c0:	f001 f955 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016c4:	2007      	movs	r0, #7
 80016c6:	f001 f96e 	bl	80029a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2008      	movs	r0, #8
 80016d0:	f001 f94d 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016d4:	2008      	movs	r0, #8
 80016d6:	f001 f966 	bl	80029a6 <HAL_NVIC_EnableIRQ>

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <USB_rx_command_buffer_push_refd>:

uint32_t DAC_tx_buffer;
uint8_t DAC_tx_tmp_buffer[4];

// #define CRICBUF_CLEAN_ON_POP
CIRC_GBUF_DEF(uint8_t, USB_rx_command_buffer, 30);
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <USB_rx_command_buffer_push_refd+0x1c>)
 80016fc:	f7ff ff12 	bl	8001524 <__circ_gbuf_push>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000000c 	.word	0x2000000c

08001710 <USB_rx_command_buffer_pop_refd>:
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <USB_rx_command_buffer_pop_refd+0x1c>)
 800171e:	f7ff feaf 	bl	8001480 <__circ_gbuf_pop>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000000c 	.word	0x2000000c

08001730 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	cfg.PDN=0; // DAC power up
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <main+0xc4>)
 8001738:	2200      	movs	r2, #0
 800173a:	721a      	strb	r2, [r3, #8]
	cfg.VREFVAL=0x08; // 20 V ± 1.25 V
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <main+0xc4>)
 800173e:	2208      	movs	r2, #8
 8001740:	71da      	strb	r2, [r3, #7]
	cfg.FSET=1; // Enhanced THD
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <main+0xc4>)
 8001744:	2201      	movs	r2, #1
 8001746:	719a      	strb	r2, [r3, #6]
	cfg.DSDO=0; // SDO enabled
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <main+0xc4>)
 800174a:	2200      	movs	r2, #0
 800174c:	715a      	strb	r2, [r3, #5]
	cfg.ENALMP=0; // Indicates end of temperature calibration cycle. ALARM pin pulled low
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <main+0xc4>)
 8001750:	2200      	movs	r2, #0
 8001752:	711a      	strb	r2, [r3, #4]
	cfg.FSDO=0; // Fast SDO disabled
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <main+0xc4>)
 8001756:	2200      	movs	r2, #0
 8001758:	70da      	strb	r2, [r3, #3]
	cfg.LDACMODE=0; // DAC *NOT* updated on LDAC !!!!falling edge!!!!
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <main+0xc4>)
 800175c:	2200      	movs	r2, #0
 800175e:	709a      	strb	r2, [r3, #2]
	cfg.TNH_MASK=0x00; // This bit is writable only when FSET = 0
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <main+0xc4>)
 8001762:	2200      	movs	r2, #0
 8001764:	705a      	strb	r2, [r3, #1]
	cfg.EN_TMP_CAL=0; // Temperature calibration feature enabled
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <main+0xc4>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800176c:	f000 ff97 	bl	800269e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001770:	f000 f850 	bl	8001814 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001774:	f7ff ff24 	bl	80015c0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001778:	f000 fd54 	bl	8002224 <MX_SPI1_Init>
	MX_SPI2_Init();
 800177c:	f000 fd88 	bl	8002290 <MX_SPI2_Init>
	MX_USB_DEVICE_Init();
 8001780:	f007 fc88 	bl	8009094 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	DAC_target_speed=0.001; //  V/s
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <main+0xc8>)
 8001786:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <main+0xcc>)
 8001788:	601a      	str	r2, [r3, #0]
	DAC_code=0xFFFFF;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <main+0xd0>)
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <main+0xd4>)
 800178e:	601a      	str	r2, [r3, #0]
	DAC_code_direction=0;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <main+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

	DDS_Init();
 8001796:	f000 f889 	bl	80018ac <DDS_Init>
	cfg.LDACMODE=0;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <main+0xc4>)
 800179c:	2200      	movs	r2, #0
 800179e:	709a      	strb	r2, [r3, #2]
	DAC_SendInit();
 80017a0:	f000 f95c 	bl	8001a5c <DAC_SendInit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(USB_CDC_End_Line_Received)
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <main+0xdc>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0fb      	beq.n	80017a4 <main+0x74>
		{	  uint8_t i=0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71fb      	strb	r3, [r7, #7]
		USB_CDC_End_Line_Received=0;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <main+0xdc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
		while (1) {
			if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <main+0xe0>)
 80017ba:	4413      	add	r3, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ffa7 	bl	8001710 <USB_rx_command_buffer_pop_refd>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <main+0xa0>
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4a11      	ldr	r2, [pc, #68]	; (8001810 <main+0xe0>)
 80017cc:	210a      	movs	r1, #10
 80017ce:	54d1      	strb	r1, [r2, r3]
			if (command_buffer[i]=='\n' || command_buffer[i]=='\r') break;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <main+0xe0>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	d008      	beq.n	80017ec <main+0xbc>
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <main+0xe0>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	2b0d      	cmp	r3, #13
 80017e2:	d003      	beq.n	80017ec <main+0xbc>
			i++;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	3301      	adds	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
			if (CIRC_GBUF_POP(USB_rx_command_buffer,&command_buffer[i])) command_buffer[i]='\n';
 80017ea:	e7e4      	b.n	80017b6 <main+0x86>
		}
		Parsing_command();
 80017ec:	f000 fae4 	bl	8001db8 <Parsing_command>
		if(USB_CDC_End_Line_Received)
 80017f0:	e7d8      	b.n	80017a4 <main+0x74>
 80017f2:	bf00      	nop
 80017f4:	200005c8 	.word	0x200005c8
 80017f8:	2000061c 	.word	0x2000061c
 80017fc:	3a83126f 	.word	0x3a83126f
 8001800:	20000384 	.word	0x20000384
 8001804:	000fffff 	.word	0x000fffff
 8001808:	20000620 	.word	0x20000620
 800180c:	2000061b 	.word	0x2000061b
 8001810:	200005fc 	.word	0x200005fc

08001814 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b092      	sub	sp, #72	; 0x48
 8001818:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	2234      	movs	r2, #52	; 0x34
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f008 f968 	bl	8009af8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	463b      	mov	r3, r7
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <SystemClock_Config+0x94>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800183e:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <SystemClock_Config+0x94>)
 8001840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001844:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001846:	2301      	movs	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001858:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800185c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800185e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001862:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4618      	mov	r0, r3
 800186a:	f002 feab 	bl	80045c4 <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x64>
	{
		Error_Handler();
 8001874:	f000 fcd0 	bl	8002218 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001878:	230f      	movs	r3, #15
 800187a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187c:	2303      	movs	r3, #3
 800187e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800188c:	463b      	mov	r3, r7
 800188e:	2101      	movs	r1, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f9c7 	bl	8004c24 <HAL_RCC_ClockConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 800189c:	f000 fcbc 	bl	8002218 <Error_Handler>
	}
}
 80018a0:	bf00      	nop
 80018a2:	3748      	adds	r7, #72	; 0x48
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40007000 	.word	0x40007000

080018ac <DDS_Init>:

/* USER CODE BEGIN 4 */
//==============================================================================================
void DDS_Init(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0

	DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed);
 80018b2:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <DDS_Init+0x18c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a61      	ldr	r2, [pc, #388]	; (8001a3c <DDS_Init+0x190>)
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff faf9 	bl	8000eb4 <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	485e      	ldr	r0, [pc, #376]	; (8001a40 <DDS_Init+0x194>)
 80018c8:	f7ff faf4 	bl	8000eb4 <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <DDS_Init+0x198>)
 80018d2:	601a      	str	r2, [r3, #0]

	if((DDS_target_frequecny*256)>500000)
 80018d4:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <DDS_Init+0x198>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fa35 	bl	8000d4c <__aeabi_fmul>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4958      	ldr	r1, [pc, #352]	; (8001a48 <DDS_Init+0x19c>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fbec 	bl	80010c4 <__aeabi_fcmpgt>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d030      	beq.n	8001954 <DDS_Init+0xa8>
	{
		DDS_target_multipiller=(DDS_target_frequecny*256)/500000;
 80018f2:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <DDS_Init+0x198>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fa26 	bl	8000d4c <__aeabi_fmul>
 8001900:	4603      	mov	r3, r0
 8001902:	4951      	ldr	r1, [pc, #324]	; (8001a48 <DDS_Init+0x19c>)
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fad5 	bl	8000eb4 <__aeabi_fdiv>
 800190a:	4603      	mov	r3, r0
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fbe3 	bl	80010d8 <__aeabi_f2uiz>
 8001912:	4603      	mov	r3, r0
 8001914:	4a4d      	ldr	r2, [pc, #308]	; (8001a4c <DDS_Init+0x1a0>)
 8001916:	6013      	str	r3, [r2, #0]
		DDS_target_frequecny=0xFFFFF/(DAC_fullrange_voltage/DAC_target_speed)/DDS_target_multipiller;
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <DDS_Init+0x18c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a47      	ldr	r2, [pc, #284]	; (8001a3c <DDS_Init+0x190>)
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fac6 	bl	8000eb4 <__aeabi_fdiv>
 8001928:	4603      	mov	r3, r0
 800192a:	4619      	mov	r1, r3
 800192c:	4844      	ldr	r0, [pc, #272]	; (8001a40 <DDS_Init+0x194>)
 800192e:	f7ff fac1 	bl	8000eb4 <__aeabi_fdiv>
 8001932:	4603      	mov	r3, r0
 8001934:	461c      	mov	r4, r3
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <DDS_Init+0x1a0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f9ae 	bl	8000c9c <__aeabi_ui2f>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff fab5 	bl	8000eb4 <__aeabi_fdiv>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <DDS_Init+0x198>)
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e002      	b.n	800195a <DDS_Init+0xae>
	} else DDS_target_multipiller = 1;
 8001954:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <DDS_Init+0x1a0>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

	float DDS_FTW=((DDS_target_frequecny*256)/DDS_clock_frequecny)*0xFFFFFFFF;
 800195a:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <DDS_Init+0x198>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f9f2 	bl	8000d4c <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <DDS_Init+0x1a4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f7ff fa9e 	bl	8000eb4 <__aeabi_fdiv>
 8001978:	4603      	mov	r3, r0
 800197a:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f9e4 	bl	8000d4c <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	607b      	str	r3, [r7, #4]

	DDS_tx_buffer[0]=0xF800; // Enter DAC to Sleep+Reset mode
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <DDS_Init+0x1a8>)
 800198a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800198e:	801a      	strh	r2, [r3, #0]

	DDS_tx_buffer[1]=0x3300; // Write to Frequency 0 Reg, H MSB
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <DDS_Init+0x1a8>)
 8001992:	f44f 524c 	mov.w	r2, #13056	; 0x3300
 8001996:	805a      	strh	r2, [r3, #2]
	DDS_tx_buffer[1]+=((uint32_t)DDS_FTW >> 24) & 0xFF;
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <DDS_Init+0x1a8>)
 800199a:	885c      	ldrh	r4, [r3, #2]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fb9b 	bl	80010d8 <__aeabi_f2uiz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	0e1b      	lsrs	r3, r3, #24
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4423      	add	r3, r4
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <DDS_Init+0x1a8>)
 80019ae:	805a      	strh	r2, [r3, #2]

	DDS_tx_buffer[2]=0x2200; // Write to Frequency 0 Reg, L MSBs
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <DDS_Init+0x1a8>)
 80019b2:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80019b6:	809a      	strh	r2, [r3, #4]
	DDS_tx_buffer[2]+=((uint32_t)DDS_FTW >> 16) & 0xFF;
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <DDS_Init+0x1a8>)
 80019ba:	889c      	ldrh	r4, [r3, #4]
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fb8b 	bl	80010d8 <__aeabi_f2uiz>
 80019c2:	4603      	mov	r3, r0
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4423      	add	r3, r4
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <DDS_Init+0x1a8>)
 80019d2:	809a      	strh	r2, [r3, #4]

	DDS_tx_buffer[3]=0x3100; // Write to Frequency 0 Reg, H LSBs
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <DDS_Init+0x1a8>)
 80019d6:	f44f 5244 	mov.w	r2, #12544	; 0x3100
 80019da:	80da      	strh	r2, [r3, #6]
	DDS_tx_buffer[3]+=((uint32_t)DDS_FTW >> 8) & 0xFF;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <DDS_Init+0x1a8>)
 80019de:	88dc      	ldrh	r4, [r3, #6]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fb79 	bl	80010d8 <__aeabi_f2uiz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4423      	add	r3, r4
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <DDS_Init+0x1a8>)
 80019f6:	80da      	strh	r2, [r3, #6]

	DDS_tx_buffer[4]=0x2000; // Write to Frequency 0 Reg, L LSBs
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <DDS_Init+0x1a8>)
 80019fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019fe:	811a      	strh	r2, [r3, #8]
	DDS_tx_buffer[4]+=((uint32_t)DDS_FTW & 0xFF);
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <DDS_Init+0x1a8>)
 8001a02:	891c      	ldrh	r4, [r3, #8]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fb67 	bl	80010d8 <__aeabi_f2uiz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4423      	add	r3, r4
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <DDS_Init+0x1a8>)
 8001a18:	811a      	strh	r2, [r3, #8]

	DDS_tx_buffer[5]=0xC000; // Exit DAC from Sleep+Reset mode
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <DDS_Init+0x1a8>)
 8001a1c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001a20:	815a      	strh	r2, [r3, #10]

	HAL_SPI_Transmit(&hspi2,(uint8_t *)DDS_tx_buffer,6,100);
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	2206      	movs	r2, #6
 8001a26:	490b      	ldr	r1, [pc, #44]	; (8001a54 <DDS_Init+0x1a8>)
 8001a28:	480b      	ldr	r0, [pc, #44]	; (8001a58 <DDS_Init+0x1ac>)
 8001a2a:	f003 fbd9 	bl	80051e0 <HAL_SPI_Transmit>

}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	2000061c 	.word	0x2000061c
 8001a40:	497ffff0 	.word	0x497ffff0
 8001a44:	200005c4 	.word	0x200005c4
 8001a48:	48f42400 	.word	0x48f42400
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000000 	.word	0x20000000
 8001a54:	200005b8 	.word	0x200005b8
 8001a58:	20000624 	.word	0x20000624

08001a5c <DAC_SendInit>:

//==============================================================================================
void DAC_SendInit(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	DAC_tx_buffer=0x02000000; // Write CONFIG1
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <DAC_SendInit+0x114>)
 8001a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a66:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(cfg.PDN & 0x01)<<4;
 8001a68:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <DAC_SendInit+0x118>)
 8001a6a:	7a1b      	ldrb	r3, [r3, #8]
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	f003 0210 	and.w	r2, r3, #16
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <DAC_SendInit+0x114>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <DAC_SendInit+0x114>)
 8001a7a:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.VREFVAL & 0x0F)<<6;
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <DAC_SendInit+0x118>)
 8001a7e:	79db      	ldrb	r3, [r3, #7]
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <DAC_SendInit+0x114>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <DAC_SendInit+0x114>)
 8001a8e:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSET & 0x01)<<10;
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <DAC_SendInit+0x118>)
 8001a92:	799b      	ldrb	r3, [r3, #6]
 8001a94:	029b      	lsls	r3, r3, #10
 8001a96:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <DAC_SendInit+0x114>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <DAC_SendInit+0x114>)
 8001aa2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.DSDO & 0x01)<<11;
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <DAC_SendInit+0x118>)
 8001aa6:	795b      	ldrb	r3, [r3, #5]
 8001aa8:	02db      	lsls	r3, r3, #11
 8001aaa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <DAC_SendInit+0x114>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <DAC_SendInit+0x114>)
 8001ab6:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.ENALMP & 0x01)<<12;
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <DAC_SendInit+0x118>)
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	031b      	lsls	r3, r3, #12
 8001abe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <DAC_SendInit+0x114>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <DAC_SendInit+0x114>)
 8001aca:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.FSDO & 0x01)<<13;
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <DAC_SendInit+0x118>)
 8001ace:	78db      	ldrb	r3, [r3, #3]
 8001ad0:	035b      	lsls	r3, r3, #13
 8001ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <DAC_SendInit+0x114>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <DAC_SendInit+0x114>)
 8001ade:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.LDACMODE & 0x01)<<14;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <DAC_SendInit+0x118>)
 8001ae2:	789b      	ldrb	r3, [r3, #2]
 8001ae4:	039b      	lsls	r3, r3, #14
 8001ae6:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <DAC_SendInit+0x114>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <DAC_SendInit+0x114>)
 8001af2:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.TNH_MASK & 0x03)<<18;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <DAC_SendInit+0x118>)
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <DAC_SendInit+0x114>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <DAC_SendInit+0x114>)
 8001b06:	6013      	str	r3, [r2, #0]
	DAC_tx_buffer+=(cfg.EN_TMP_CAL & 0x01)<<23;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <DAC_SendInit+0x118>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <DAC_SendInit+0x114>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <DAC_SendInit+0x114>)
 8001b1a:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <DAC_SendInit+0x114>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0e1b      	lsrs	r3, r3, #24
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <DAC_SendInit+0x11c>)
 8001b26:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <DAC_SendInit+0x114>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <DAC_SendInit+0x11c>)
 8001b32:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <DAC_SendInit+0x114>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <DAC_SendInit+0x11c>)
 8001b3e:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <DAC_SendInit+0x114>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <DAC_SendInit+0x11c>)
 8001b48:	70da      	strb	r2, [r3, #3]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <DAC_SendInit+0x120>)
 8001b50:	f001 f8db 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,100);
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	2204      	movs	r2, #4
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <DAC_SendInit+0x11c>)
 8001b5a:	4809      	ldr	r0, [pc, #36]	; (8001b80 <DAC_SendInit+0x124>)
 8001b5c:	f003 fb40 	bl	80051e0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2110      	movs	r1, #16
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <DAC_SendInit+0x120>)
 8001b66:	f001 f8d0 	bl	8002d0a <HAL_GPIO_WritePin>

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200005f8 	.word	0x200005f8
 8001b74:	200005c8 	.word	0x200005c8
 8001b78:	200005f4 	.word	0x200005f4
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	2000067c 	.word	0x2000067c

08001b84 <DAC_TEMP_CAL>:

//==============================================================================================
void DAC_TEMP_CAL(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	DAC_tx_buffer=0x04000100; // Write TRIGGER RCLTMP
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <DAC_TEMP_CAL+0x5c>)
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <DAC_TEMP_CAL+0x60>)
 8001b8c:	601a      	str	r2, [r3, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <DAC_TEMP_CAL+0x5c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0e1b      	lsrs	r3, r3, #24
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <DAC_TEMP_CAL+0x64>)
 8001b98:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <DAC_TEMP_CAL+0x5c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <DAC_TEMP_CAL+0x64>)
 8001ba4:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <DAC_TEMP_CAL+0x5c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <DAC_TEMP_CAL+0x64>)
 8001bb0:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <DAC_TEMP_CAL+0x5c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <DAC_TEMP_CAL+0x64>)
 8001bba:	70da      	strb	r2, [r3, #3]


	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	480a      	ldr	r0, [pc, #40]	; (8001bec <DAC_TEMP_CAL+0x68>)
 8001bc2:	f001 f8a2 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,100);
 8001bc6:	2364      	movs	r3, #100	; 0x64
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4907      	ldr	r1, [pc, #28]	; (8001be8 <DAC_TEMP_CAL+0x64>)
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <DAC_TEMP_CAL+0x6c>)
 8001bce:	f003 fb07 	bl	80051e0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <DAC_TEMP_CAL+0x68>)
 8001bd8:	f001 f897 	bl	8002d0a <HAL_GPIO_WritePin>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200005f8 	.word	0x200005f8
 8001be4:	04000100 	.word	0x04000100
 8001be8:	200005f4 	.word	0x200005f4
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	2000067c 	.word	0x2000067c

08001bf4 <DAC_Write>:

//==============================================================================================
void DAC_Write(uint32_t value)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2110      	movs	r1, #16
 8001c00:	481b      	ldr	r0, [pc, #108]	; (8001c70 <DAC_Write+0x7c>)
 8001c02:	f001 f882 	bl	8002d0a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,(uint8_t *)DAC_tx_tmp_buffer,4,100);
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	2204      	movs	r2, #4
 8001c0a:	491a      	ldr	r1, [pc, #104]	; (8001c74 <DAC_Write+0x80>)
 8001c0c:	481a      	ldr	r0, [pc, #104]	; (8001c78 <DAC_Write+0x84>)
 8001c0e:	f003 fae7 	bl	80051e0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(DAC_SYNC_GPIO_Port, DAC_SYNC_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2110      	movs	r1, #16
 8001c16:	4816      	ldr	r0, [pc, #88]	; (8001c70 <DAC_Write+0x7c>)
 8001c18:	f001 f877 	bl	8002d0a <HAL_GPIO_WritePin>

	// Speedup hint: Calculate data AFTER send.
	DAC_tx_buffer=0x01000000; // Write DAC-DATA
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <DAC_Write+0x88>)
 8001c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c22:	601a      	str	r2, [r3, #0]
	DAC_tx_buffer+=(value & 0xFFFFF)<<4;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c2c:	f023 030f 	bic.w	r3, r3, #15
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <DAC_Write+0x88>)
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <DAC_Write+0x88>)
 8001c38:	6013      	str	r3, [r2, #0]

	DAC_tx_tmp_buffer[0]=(DAC_tx_buffer & 0xFF000000)>>24;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <DAC_Write+0x88>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e1b      	lsrs	r3, r3, #24
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <DAC_Write+0x80>)
 8001c44:	701a      	strb	r2, [r3, #0]
	DAC_tx_tmp_buffer[1]=(DAC_tx_buffer & 0x00FF0000)>>16;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <DAC_Write+0x88>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <DAC_Write+0x80>)
 8001c50:	705a      	strb	r2, [r3, #1]
	DAC_tx_tmp_buffer[2]=(DAC_tx_buffer & 0x0000FF00)>>8;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <DAC_Write+0x88>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <DAC_Write+0x80>)
 8001c5c:	709a      	strb	r2, [r3, #2]
	DAC_tx_tmp_buffer[3]=(DAC_tx_buffer & 0x000000FF);
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <DAC_Write+0x88>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <DAC_Write+0x80>)
 8001c66:	70da      	strb	r2, [r3, #3]
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40020000 	.word	0x40020000
 8001c74:	200005f4 	.word	0x200005f4
 8001c78:	2000067c 	.word	0x2000067c
 8001c7c:	200005f8 	.word	0x200005f8

08001c80 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
//==============================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	uint8_t Done[]="\r\n CYCLE COMPLETE !\n\r\n\r";
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_GPIO_EXTI_Callback+0xec>)
 8001c8c:	f107 0408 	add.w	r4, r7, #8
 8001c90:	461d      	mov	r5, r3
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	e884 0003 	stmia.w	r4, {r0, r1}
	if(GPIO_Pin == GPIO_PIN_2)
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d15e      	bne.n	8001d62 <HAL_GPIO_EXTI_Callback+0xe2>
	{
		if(DAC_code_direction)
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d02a      	beq.n	8001d02 <HAL_GPIO_EXTI_Callback+0x82>
		{
			if(DAC_code<=0xFFFFF)
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cb4:	d207      	bcs.n	8001cc6 <HAL_GPIO_EXTI_Callback+0x46>
			{
				DAC_code+=DDS_target_multipiller;
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a2c      	ldr	r2, [pc, #176]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e048      	b.n	8001d58 <HAL_GPIO_EXTI_Callback+0xd8>
			} else  {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	2108      	movs	r1, #8
 8001cca:	482c      	ldr	r0, [pc, #176]	; (8001d7c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001ccc:	f001 f81d 	bl	8002d0a <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_GPIO_EXTI_Callback+0x100>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001cd6:	f7ff fec1 	bl	8001a5c <DAC_SendInit>
				DAC_code=0xFFFFF;
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x104>)
 8001cde:	601a      	str	r2, [r3, #0]
				DAC_code_direction=0;
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fa52 	bl	8000194 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f007 face 	bl	800929c <CDC_Transmit_FS>
 8001d00:	e02a      	b.n	8001d58 <HAL_GPIO_EXTI_Callback+0xd8>

			}
		}
		else
		{
			if(DAC_code>=DDS_target_multipiller)
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d307      	bcc.n	8001d1e <HAL_GPIO_EXTI_Callback+0x9e>
			{
				DAC_code-=DDS_target_multipiller;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e01c      	b.n	8001d58 <HAL_GPIO_EXTI_Callback+0xd8>
			} else {
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001d1e:	2201      	movs	r2, #1
 8001d20:	2108      	movs	r1, #8
 8001d22:	4816      	ldr	r0, [pc, #88]	; (8001d7c <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d24:	f000 fff1 	bl	8002d0a <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_GPIO_EXTI_Callback+0x100>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001d2e:	f7ff fe95 	bl	8001a5c <DAC_SendInit>
				DAC_code=0x0;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
				DAC_code_direction=1;
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(Done, strlen((const char *)Done));  // SEND ERROR TO CDC!!!
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fa26 	bl	8000194 <strlen>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f007 faa2 	bl	800929c <CDC_Transmit_FS>
			}
		}
		DAC_Write(DAC_code);
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff49 	bl	8001bf4 <DAC_Write>
	//		  while(HAL_GPIO_ReadPin(DAC_ALARM_GPIO_Port, DAC_ALARM_Pin)==GPIO_PIN_SET);
	//		  HAL_Delay(100);
	// }
	//  }

}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	0800c890 	.word	0x0800c890
 8001d70:	20000620 	.word	0x20000620
 8001d74:	20000384 	.word	0x20000384
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	200005c8 	.word	0x200005c8
 8001d84:	000fffff 	.word	0x000fffff

08001d88 <Write_to_circ_buffer>:

//==============================================================================================
void Write_to_circ_buffer(uint8_t Buf)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
	if(CIRC_GBUF_PUSH(USB_rx_command_buffer, &Buf))	CIRC_GBUF_FLUSH(USB_rx_command_buffer); // If out of space, something wrong, clean all !!!
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fcab 	bl	80016f0 <USB_rx_command_buffer_push_refd>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <Write_to_circ_buffer+0x24>
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <Write_to_circ_buffer+0x2c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	809a      	strh	r2, [r3, #4]
 8001da6:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <Write_to_circ_buffer+0x2c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	80da      	strh	r2, [r3, #6]
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000000c 	.word	0x2000000c

08001db8 <Parsing_command>:

//==============================================================================================
void Parsing_command(void)
{
 8001db8:	b5b0      	push	{r4, r5, r7, lr}
 8001dba:	b0d6      	sub	sp, #344	; 0x158
 8001dbc:	af00      	add	r7, sp, #0
	float atof_tmp;
	char *found;
	char decoded_string_1[31];
	char decoded_string_2[31];
	//	uint8_t Clear[]="\033c \rEnter command:";
	uint8_t Error1[]="\r\n ERROR\n\r\n\r"
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	4ac7      	ldr	r2, [pc, #796]	; (80020e0 <Parsing_command+0x328>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	23f6      	movs	r3, #246	; 0xf6
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f007 fe86 	bl	8009adc <memcpy>
			"DAC_SET TOP/DOWN  - set DAC to 0xFFFFF or 0x0 \n\r"
			"DAC_TEMPCAL START - start temperature calibration cycle \n\r"
			"SWEEP_RATE 1.0E-3 - start temperature calibration cycle \n\r"
			"\n\r"
			"\n\rEnter command: ";
	uint8_t OK[]="\r\n OK \n\rEnter command: ";
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	4ac4      	ldr	r2, [pc, #784]	; (80020e4 <Parsing_command+0x32c>)
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	4615      	mov	r5, r2
 8001dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ddc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001de0:	e884 0003 	stmia.w	r4, {r0, r1}

	found = strtok((char *)command_buffer," ");
 8001de4:	49c0      	ldr	r1, [pc, #768]	; (80020e8 <Parsing_command+0x330>)
 8001de6:	48c1      	ldr	r0, [pc, #772]	; (80020ec <Parsing_command+0x334>)
 8001de8:	f008 fcba 	bl	800a760 <strtok>
 8001dec:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
	if(found!=NULL)
 8001df0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d011      	beq.n	8001e1c <Parsing_command+0x64>
	{
		strcpy(decoded_string_1,found);
 8001df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dfc:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8001e00:	4618      	mov	r0, r3
 8001e02:	f007 fe81 	bl	8009b08 <strcpy>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
		HAL_Delay(10);
		return;
	}

	found = strtok(NULL,"\r");
 8001e06:	49ba      	ldr	r1, [pc, #744]	; (80020f0 <Parsing_command+0x338>)
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f008 fca9 	bl	800a760 <strtok>
 8001e0e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
	if(found!=NULL)
 8001e12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <Parsing_command+0xae>
 8001e1a:	e013      	b.n	8001e44 <Parsing_command+0x8c>
		HAL_Delay(10);
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f000 fcad 	bl	800277c <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001e22:	f107 0318 	add.w	r3, r7, #24
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe f9b4 	bl	8000194 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f007 fa30 	bl	800929c <CDC_Transmit_FS>
		HAL_Delay(10);
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	f000 fc9d 	bl	800277c <HAL_Delay>
		return;
 8001e42:	e1dd      	b.n	8002200 <Parsing_command+0x448>
	{
		strcpy(decoded_string_2,found);
 8001e44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e48:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f007 fe5b 	bl	8009b08 <strcpy>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
		HAL_Delay(10);
		return;
	}
	// ==== SWEEP command ====
	if(!(strcmp(decoded_string_1,"SWEEP")))
 8001e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e56:	49a7      	ldr	r1, [pc, #668]	; (80020f4 <Parsing_command+0x33c>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe f991 	bl	8000180 <strcmp>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d172      	bne.n	8001f4a <Parsing_command+0x192>
 8001e64:	e013      	b.n	8001e8e <Parsing_command+0xd6>
		HAL_Delay(10);
 8001e66:	200a      	movs	r0, #10
 8001e68:	f000 fc88 	bl	800277c <HAL_Delay>
		CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001e6c:	f107 0318 	add.w	r3, r7, #24
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe f98f 	bl	8000194 <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f107 0318 	add.w	r3, r7, #24
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f007 fa0b 	bl	800929c <CDC_Transmit_FS>
		HAL_Delay(10);
 8001e86:	200a      	movs	r0, #10
 8001e88:	f000 fc78 	bl	800277c <HAL_Delay>
		return;
 8001e8c:	e1b8      	b.n	8002200 <Parsing_command+0x448>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8001e8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e92:	4999      	ldr	r1, [pc, #612]	; (80020f8 <Parsing_command+0x340>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f973 	bl	8000180 <strcmp>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d11b      	bne.n	8001ed8 <Parsing_command+0x120>
			HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_RESET); // Enable LDAC signal
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2108      	movs	r1, #8
 8001ea4:	4895      	ldr	r0, [pc, #596]	; (80020fc <Parsing_command+0x344>)
 8001ea6:	f000 ff30 	bl	8002d0a <HAL_GPIO_WritePin>
			cfg.LDACMODE=1;
 8001eaa:	4b95      	ldr	r3, [pc, #596]	; (8002100 <Parsing_command+0x348>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8001eb0:	f7ff fdd4 	bl	8001a5c <DAC_SendInit>
			HAL_Delay(10);
 8001eb4:	200a      	movs	r0, #10
 8001eb6:	f000 fc61 	bl	800277c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe f969 	bl	8000194 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f007 f9e6 	bl	800929c <CDC_Transmit_FS>
			HAL_Delay(10);
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f000 fc53 	bl	800277c <HAL_Delay>
			return;
 8001ed6:	e193      	b.n	8002200 <Parsing_command+0x448>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"STOP"))){
 8001ed8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001edc:	4989      	ldr	r1, [pc, #548]	; (8002104 <Parsing_command+0x34c>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe f94e 	bl	8000180 <strcmp>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d11b      	bne.n	8001f22 <Parsing_command+0x16a>
				HAL_GPIO_WritePin(COUNT_EN_GPIO_Port, COUNT_EN_Pin, GPIO_PIN_SET); // Disable LDAC signal
 8001eea:	2201      	movs	r2, #1
 8001eec:	2108      	movs	r1, #8
 8001eee:	4883      	ldr	r0, [pc, #524]	; (80020fc <Parsing_command+0x344>)
 8001ef0:	f000 ff0b 	bl	8002d0a <HAL_GPIO_WritePin>
				cfg.LDACMODE=0;
 8001ef4:	4b82      	ldr	r3, [pc, #520]	; (8002100 <Parsing_command+0x348>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001efa:	f7ff fdaf 	bl	8001a5c <DAC_SendInit>
				HAL_Delay(10);
 8001efe:	200a      	movs	r0, #10
 8001f00:	f000 fc3c 	bl	800277c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001f04:	463b      	mov	r3, r7
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe f944 	bl	8000194 <strlen>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	463b      	mov	r3, r7
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f007 f9c1 	bl	800929c <CDC_Transmit_FS>
				HAL_Delay(10);
 8001f1a:	200a      	movs	r0, #10
 8001f1c:	f000 fc2e 	bl	800277c <HAL_Delay>
				return;
 8001f20:	e16e      	b.n	8002200 <Parsing_command+0x448>
			}
			else
			{
				HAL_Delay(10);
 8001f22:	200a      	movs	r0, #10
 8001f24:	f000 fc2a 	bl	800277c <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe f931 	bl	8000194 <strlen>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	f107 0318 	add.w	r3, r7, #24
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f007 f9ad 	bl	800929c <CDC_Transmit_FS>
				HAL_Delay(10);
 8001f42:	200a      	movs	r0, #10
 8001f44:	f000 fc1a 	bl	800277c <HAL_Delay>
				return;
 8001f48:	e15a      	b.n	8002200 <Parsing_command+0x448>
			}

		}
	}
	// ==== DAC_SET command ====
	if(!(strcmp(decoded_string_1,"DAC_SET")))
 8001f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f4e:	496e      	ldr	r1, [pc, #440]	; (8002108 <Parsing_command+0x350>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe f915 	bl	8000180 <strcmp>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d173      	bne.n	8002044 <Parsing_command+0x28c>
	{
		if(!(strcmp(decoded_string_2,"TOP"))){
 8001f5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f60:	496a      	ldr	r1, [pc, #424]	; (800210c <Parsing_command+0x354>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f90c 	bl	8000180 <strcmp>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d126      	bne.n	8001fbc <Parsing_command+0x204>
			DAC_code=0xFFFFF;
 8001f6e:	4b68      	ldr	r3, [pc, #416]	; (8002110 <Parsing_command+0x358>)
 8001f70:	4a68      	ldr	r2, [pc, #416]	; (8002114 <Parsing_command+0x35c>)
 8001f72:	601a      	str	r2, [r3, #0]
			DAC_code_direction=0;
 8001f74:	4b68      	ldr	r3, [pc, #416]	; (8002118 <Parsing_command+0x360>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
			cfg.LDACMODE=0;
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <Parsing_command+0x348>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	709a      	strb	r2, [r3, #2]
			DAC_SendInit();
 8001f80:	f7ff fd6c 	bl	8001a5c <DAC_SendInit>
			DAC_Write(DAC_code);
 8001f84:	4b62      	ldr	r3, [pc, #392]	; (8002110 <Parsing_command+0x358>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fe33 	bl	8001bf4 <DAC_Write>
			DAC_Write(DAC_code);
 8001f8e:	4b60      	ldr	r3, [pc, #384]	; (8002110 <Parsing_command+0x358>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe2e 	bl	8001bf4 <DAC_Write>
			HAL_Delay(10);
 8001f98:	200a      	movs	r0, #10
 8001f9a:	f000 fbef 	bl	800277c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe f8f7 	bl	8000194 <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	463b      	mov	r3, r7
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f007 f974 	bl	800929c <CDC_Transmit_FS>
			HAL_Delay(10);
 8001fb4:	200a      	movs	r0, #10
 8001fb6:	f000 fbe1 	bl	800277c <HAL_Delay>
			return;
 8001fba:	e121      	b.n	8002200 <Parsing_command+0x448>
		}
		else
		{
			if(!(strcmp(decoded_string_2,"DOWN"))){
 8001fbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fc0:	4956      	ldr	r1, [pc, #344]	; (800211c <Parsing_command+0x364>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f8dc 	bl	8000180 <strcmp>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d126      	bne.n	800201c <Parsing_command+0x264>
				DAC_code=0x0;
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <Parsing_command+0x358>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
				DAC_code_direction=1;
 8001fd4:	4b50      	ldr	r3, [pc, #320]	; (8002118 <Parsing_command+0x360>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
				cfg.LDACMODE=0;
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <Parsing_command+0x348>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	709a      	strb	r2, [r3, #2]
				DAC_SendInit();
 8001fe0:	f7ff fd3c 	bl	8001a5c <DAC_SendInit>
				DAC_Write(DAC_code);
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <Parsing_command+0x358>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe03 	bl	8001bf4 <DAC_Write>
				DAC_Write(DAC_code);
 8001fee:	4b48      	ldr	r3, [pc, #288]	; (8002110 <Parsing_command+0x358>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fdfe 	bl	8001bf4 <DAC_Write>
				HAL_Delay(10);
 8001ff8:	200a      	movs	r0, #10
 8001ffa:	f000 fbbf 	bl	800277c <HAL_Delay>
				CDC_Transmit_FS(OK, strlen((const char *)OK));
 8001ffe:	463b      	mov	r3, r7
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe f8c7 	bl	8000194 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	463b      	mov	r3, r7
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f007 f944 	bl	800929c <CDC_Transmit_FS>
				HAL_Delay(10);
 8002014:	200a      	movs	r0, #10
 8002016:	f000 fbb1 	bl	800277c <HAL_Delay>
				return;
 800201a:	e0f1      	b.n	8002200 <Parsing_command+0x448>
			}
			else
			{
				HAL_Delay(10);
 800201c:	200a      	movs	r0, #10
 800201e:	f000 fbad 	bl	800277c <HAL_Delay>
				CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f8b4 	bl	8000194 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	b29a      	uxth	r2, r3
 8002030:	f107 0318 	add.w	r3, r7, #24
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f007 f930 	bl	800929c <CDC_Transmit_FS>
				HAL_Delay(10);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 fb9d 	bl	800277c <HAL_Delay>
				return;
 8002042:	e0dd      	b.n	8002200 <Parsing_command+0x448>
			}
		}
	}

	// ==== DAC_TEMPCAL command ====
	if(!(strcmp(decoded_string_1,"DAC_TEMPCAL")))
 8002044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <Parsing_command+0x368>)
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe f898 	bl	8000180 <strcmp>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d168      	bne.n	8002128 <Parsing_command+0x370>
	{
		if(!(strcmp(decoded_string_2,"START"))){
 8002056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800205a:	4927      	ldr	r1, [pc, #156]	; (80020f8 <Parsing_command+0x340>)
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe f88f 	bl	8000180 <strcmp>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d126      	bne.n	80020b6 <Parsing_command+0x2fe>
			cfg.LDACMODE=0;
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <Parsing_command+0x348>)
 800206a:	2200      	movs	r2, #0
 800206c:	709a      	strb	r2, [r3, #2]
			cfg.EN_TMP_CAL=1;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <Parsing_command+0x348>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
			cfg.ENALMP=1;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <Parsing_command+0x348>)
 8002076:	2201      	movs	r2, #1
 8002078:	711a      	strb	r2, [r3, #4]
			DAC_SendInit();
 800207a:	f7ff fcef 	bl	8001a5c <DAC_SendInit>
			DAC_TEMP_CAL();
 800207e:	f7ff fd81 	bl	8001b84 <DAC_TEMP_CAL>
			while(HAL_GPIO_ReadPin(DAC_ALARM_GPIO_Port, DAC_ALARM_Pin)==GPIO_PIN_SET);
 8002082:	bf00      	nop
 8002084:	2102      	movs	r1, #2
 8002086:	4827      	ldr	r0, [pc, #156]	; (8002124 <Parsing_command+0x36c>)
 8002088:	f000 fe28 	bl	8002cdc <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d0f8      	beq.n	8002084 <Parsing_command+0x2cc>
			HAL_Delay(10);
 8002092:	200a      	movs	r0, #10
 8002094:	f000 fb72 	bl	800277c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 8002098:	463b      	mov	r3, r7
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f87a 	bl	8000194 <strlen>
 80020a0:	4603      	mov	r3, r0
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	463b      	mov	r3, r7
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f007 f8f7 	bl	800929c <CDC_Transmit_FS>
			HAL_Delay(10);
 80020ae:	200a      	movs	r0, #10
 80020b0:	f000 fb64 	bl	800277c <HAL_Delay>
			return;
 80020b4:	e0a4      	b.n	8002200 <Parsing_command+0x448>
		}
		else
		{
			HAL_Delay(10);
 80020b6:	200a      	movs	r0, #10
 80020b8:	f000 fb60 	bl	800277c <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f867 	bl	8000194 <strlen>
 80020c6:	4603      	mov	r3, r0
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	f107 0318 	add.w	r3, r7, #24
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f007 f8e3 	bl	800929c <CDC_Transmit_FS>
			HAL_Delay(10);
 80020d6:	200a      	movs	r0, #10
 80020d8:	f000 fb50 	bl	800277c <HAL_Delay>
			return;
 80020dc:	e090      	b.n	8002200 <Parsing_command+0x448>
 80020de:	bf00      	nop
 80020e0:	0800c8f4 	.word	0x0800c8f4
 80020e4:	0800c9ec 	.word	0x0800c9ec
 80020e8:	0800c8a8 	.word	0x0800c8a8
 80020ec:	200005fc 	.word	0x200005fc
 80020f0:	0800c8ac 	.word	0x0800c8ac
 80020f4:	0800c8b0 	.word	0x0800c8b0
 80020f8:	0800c8b8 	.word	0x0800c8b8
 80020fc:	40020400 	.word	0x40020400
 8002100:	200005c8 	.word	0x200005c8
 8002104:	0800c8c0 	.word	0x0800c8c0
 8002108:	0800c8c8 	.word	0x0800c8c8
 800210c:	0800c8d0 	.word	0x0800c8d0
 8002110:	20000384 	.word	0x20000384
 8002114:	000fffff 	.word	0x000fffff
 8002118:	20000620 	.word	0x20000620
 800211c:	0800c8d4 	.word	0x0800c8d4
 8002120:	0800c8dc 	.word	0x0800c8dc
 8002124:	40020000 	.word	0x40020000
		}
	}


	// ==== SWEEP_RATE command ====
	if(!(strcmp(decoded_string_1,"SWEEP_RATE")))
 8002128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800212c:	4938      	ldr	r1, [pc, #224]	; (8002210 <Parsing_command+0x458>)
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f826 	bl	8000180 <strcmp>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d14e      	bne.n	80021d8 <Parsing_command+0x420>
	{
		atof_tmp=atof(decoded_string_2);
 800213a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800213e:	4618      	mov	r0, r3
 8002140:	f007 fc9e 	bl	8009a80 <atof>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fca0 	bl	8000a90 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		if(atof_tmp<0.001 || atof_tmp>1)
 8002156:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800215a:	f7fe f987 	bl	800046c <__aeabi_f2d>
 800215e:	a32a      	add	r3, pc, #168	; (adr r3, 8002208 <Parsing_command+0x450>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe fc4c 	bl	8000a00 <__aeabi_dcmplt>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <Parsing_command+0x3c8>
 800216e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002172:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8002176:	f7fe ffa5 	bl	80010c4 <__aeabi_fcmpgt>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <Parsing_command+0x3f0>
		{
			HAL_Delay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f000 fafb 	bl	800277c <HAL_Delay>
			CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f802 	bl	8000194 <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	b29a      	uxth	r2, r3
 8002194:	f107 0318 	add.w	r3, r7, #24
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f007 f87e 	bl	800929c <CDC_Transmit_FS>
			HAL_Delay(10);
 80021a0:	200a      	movs	r0, #10
 80021a2:	f000 faeb 	bl	800277c <HAL_Delay>
			return;
 80021a6:	e02b      	b.n	8002200 <Parsing_command+0x448>
		}
		else
		{
			DAC_target_speed=atof_tmp;
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <Parsing_command+0x45c>)
 80021aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021ae:	6013      	str	r3, [r2, #0]
			DDS_Init();
 80021b0:	f7ff fb7c 	bl	80018ac <DDS_Init>

			HAL_Delay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f000 fae1 	bl	800277c <HAL_Delay>
			CDC_Transmit_FS(OK, strlen((const char *)OK));
 80021ba:	463b      	mov	r3, r7
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fd ffe9 	bl	8000194 <strlen>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	463b      	mov	r3, r7
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f007 f866 	bl	800929c <CDC_Transmit_FS>
			HAL_Delay(10);
 80021d0:	200a      	movs	r0, #10
 80021d2:	f000 fad3 	bl	800277c <HAL_Delay>
			return;
 80021d6:	e013      	b.n	8002200 <Parsing_command+0x448>
		}
	}
	HAL_Delay(10);
 80021d8:	200a      	movs	r0, #10
 80021da:	f000 facf 	bl	800277c <HAL_Delay>
	CDC_Transmit_FS(Error1, strlen((const char *)Error1));  // SEND ERROR TO CDC!!!
 80021de:	f107 0318 	add.w	r3, r7, #24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fd ffd6 	bl	8000194 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f007 f852 	bl	800929c <CDC_Transmit_FS>
	HAL_Delay(10);
 80021f8:	200a      	movs	r0, #10
 80021fa:	f000 fabf 	bl	800277c <HAL_Delay>
	return;
 80021fe:	bf00      	nop
}
 8002200:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002204:	46bd      	mov	sp, r7
 8002206:	bdb0      	pop	{r4, r5, r7, pc}
 8002208:	d2f1a9fc 	.word	0xd2f1a9fc
 800220c:	3f50624d 	.word	0x3f50624d
 8002210:	0800c8e8 	.word	0x0800c8e8
 8002214:	2000061c 	.word	0x2000061c

08002218 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002220:	e7fe      	b.n	8002220 <Error_Handler+0x8>
	...

08002224 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_SPI1_Init+0x64>)
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <MX_SPI1_Init+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_SPI1_Init+0x64>)
 8002230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_SPI1_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_SPI1_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_SPI1_Init+0x64>)
 8002250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_SPI1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MX_SPI1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_SPI1_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <MX_SPI1_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_SPI1_Init+0x64>)
 8002270:	220a      	movs	r2, #10
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_SPI1_Init+0x64>)
 8002276:	f002 ff37 	bl	80050e8 <HAL_SPI_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002280:	f7ff ffca 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000067c 	.word	0x2000067c
 800228c:	40013000 	.word	0x40013000

08002290 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_SPI2_Init+0x68>)
 8002296:	4a19      	ldr	r2, [pc, #100]	; (80022fc <MX_SPI2_Init+0x6c>)
 8002298:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_SPI2_Init+0x68>)
 800229c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022c6:	2230      	movs	r2, #48	; 0x30
 80022c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022d8:	2200      	movs	r2, #0
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022de:	220a      	movs	r2, #10
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_SPI2_Init+0x68>)
 80022e4:	f002 ff00 	bl	80050e8 <HAL_SPI_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80022ee:	f7ff ff93 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000624 	.word	0x20000624
 80022fc:	40003800 	.word	0x40003800

08002300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a2e      	ldr	r2, [pc, #184]	; (80023d8 <HAL_SPI_MspInit+0xd8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d128      	bne.n	8002374 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a2d      	ldr	r2, [pc, #180]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a27      	ldr	r2, [pc, #156]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002352:	23e0      	movs	r3, #224	; 0xe0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002362:	2305      	movs	r3, #5
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	481c      	ldr	r0, [pc, #112]	; (80023e0 <HAL_SPI_MspInit+0xe0>)
 800236e:	f000 fb35 	bl	80029dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002372:	e02d      	b.n	80023d0 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_SPI_MspInit+0xe4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d128      	bne.n	80023d0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6253      	str	r3, [r2, #36]	; 0x24
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_SPI_MspInit+0xdc>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80023ae:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023c0:	2305      	movs	r3, #5
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4619      	mov	r1, r3
 80023ca:	4807      	ldr	r0, [pc, #28]	; (80023e8 <HAL_SPI_MspInit+0xe8>)
 80023cc:	f000 fb06 	bl	80029dc <HAL_GPIO_Init>
}
 80023d0:	bf00      	nop
 80023d2:	3730      	adds	r7, #48	; 0x30
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40013000 	.word	0x40013000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40003800 	.word	0x40003800
 80023e8:	40020400 	.word	0x40020400

080023ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_MspInit+0x58>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_MspInit+0x58>)
 80023f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023fc:	6253      	str	r3, [r2, #36]	; 0x24
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_MspInit+0x58>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_MspInit+0x58>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_MspInit+0x58>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_MspInit+0x58>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_MspInit+0x58>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_MspInit+0x58>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6253      	str	r3, [r2, #36]	; 0x24
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_MspInit+0x58>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40023800 	.word	0x40023800

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800244c:	e7fe      	b.n	800244c <NMI_Handler+0x4>

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler+0x4>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <UsageFault_Handler+0x4>

08002466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248e:	f000 f959 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}

08002496 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DAC_ALARM_Pin);
 800249a:	2002      	movs	r0, #2
 800249c:	f000 fc4e 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CPU_LDAC_Pin);
 80024a8:	2004      	movs	r0, #4
 80024aa:	f000 fc47 	bl	8002d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <USB_LP_IRQHandler+0x10>)
 80024ba:	f000 fd5b 	bl	8002f74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20001344 	.word	0x20001344

080024c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
	return 1;
 80024cc:	2301      	movs	r3, #1
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <_kill>:

int _kill(int pid, int sig)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024e0:	f007 fad2 	bl	8009a88 <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2216      	movs	r2, #22
 80024e8:	601a      	str	r2, [r3, #0]
	return -1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_exit>:

void _exit (int status)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffe7 	bl	80024d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002508:	e7fe      	b.n	8002508 <_exit+0x12>

0800250a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e00a      	b.n	8002532 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800251c:	f3af 8000 	nop.w
 8002520:	4601      	mov	r1, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	60ba      	str	r2, [r7, #8]
 8002528:	b2ca      	uxtb	r2, r1
 800252a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	dbf0      	blt.n	800251c <_read+0x12>
	}

return len;
 800253a:	687b      	ldr	r3, [r7, #4]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	e009      	b.n	800256a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	60ba      	str	r2, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	dbf1      	blt.n	8002556 <_write+0x12>
	}
	return len;
 8002572:	687b      	ldr	r3, [r7, #4]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_close>:

int _close(int file)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	return -1;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a2:	605a      	str	r2, [r3, #4]
	return 0;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <_isatty>:

int _isatty(int file)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	return 1;
 80025b8:	2301      	movs	r3, #1
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
	return 0;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <_sbrk+0x5c>)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <_sbrk+0x60>)
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <_sbrk+0x64>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <_sbrk+0x68>)
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d207      	bcs.n	800261c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800260c:	f007 fa3c 	bl	8009a88 <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	220c      	movs	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e009      	b.n	8002630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <_sbrk+0x64>)
 800262c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20004000 	.word	0x20004000
 800263c:	00000400 	.word	0x00000400
 8002640:	20000388 	.word	0x20000388
 8002644:	20001640 	.word	0x20001640

08002648 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002656:	490d      	ldr	r1, [pc, #52]	; (800268c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002658:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800265c:	e002      	b.n	8002664 <LoopCopyDataInit>

0800265e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002662:	3304      	adds	r3, #4

08002664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002668:	d3f9      	bcc.n	800265e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800266c:	4c0a      	ldr	r4, [pc, #40]	; (8002698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002670:	e001      	b.n	8002676 <LoopFillZerobss>

08002672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002674:	3204      	adds	r2, #4

08002676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002678:	d3fb      	bcc.n	8002672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800267a:	f7ff ffe5 	bl	8002648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267e:	f007 fa09 	bl	8009a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002682:	f7ff f855 	bl	8001730 <main>
  bx lr
 8002686:	4770      	bx	lr
  ldr r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800268c:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8002690:	0800cf00 	.word	0x0800cf00
  ldr r2, =_sbss
 8002694:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8002698:	20001640 	.word	0x20001640

0800269c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800269c:	e7fe      	b.n	800269c <ADC1_IRQHandler>

0800269e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 f955 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ae:	200f      	movs	r0, #15
 80026b0:	f000 f80e 	bl	80026d0 <HAL_InitTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	71fb      	strb	r3, [r7, #7]
 80026be:	e001      	b.n	80026c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026c0:	f7ff fe94 	bl	80023ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026c4:	79fb      	ldrb	r3, [r7, #7]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_InitTick+0x68>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d022      	beq.n	800272a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_InitTick+0x6c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_InitTick+0x68>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f962 	bl	80029c2 <HAL_SYSTICK_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10f      	bne.n	8002724 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	d809      	bhi.n	800271e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270a:	2200      	movs	r2, #0
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	f04f 30ff 	mov.w	r0, #4294967295
 8002712:	f000 f92c 	bl	800296e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_InitTick+0x70>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e007      	b.n	800272e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e004      	b.n	800272e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e001      	b.n	800272e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000020 	.word	0x20000020
 800273c:	20000018 	.word	0x20000018
 8002740:	2000001c 	.word	0x2000001c

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_IncTick+0x1c>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_IncTick+0x20>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4413      	add	r3, r2
 8002752:	4a03      	ldr	r2, [pc, #12]	; (8002760 <HAL_IncTick+0x1c>)
 8002754:	6013      	str	r3, [r2, #0]
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	200006d4 	.word	0x200006d4
 8002764:	20000020 	.word	0x20000020

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b02      	ldr	r3, [pc, #8]	; (8002778 <HAL_GetTick+0x10>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	200006d4 	.word	0x200006d4

0800277c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fff0 	bl	8002768 <HAL_GetTick>
 8002788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d004      	beq.n	80027a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_Delay+0x40>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4413      	add	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a0:	bf00      	nop
 80027a2:	f7ff ffe1 	bl	8002768 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d8f7      	bhi.n	80027a2 <HAL_Delay+0x26>
  {
  }
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000020 	.word	0x20000020

080027c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027dc:	4013      	ands	r3, r2
 80027de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <__NVIC_SetPriorityGrouping+0x44>)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	60d3      	str	r3, [r2, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <__NVIC_GetPriorityGrouping+0x18>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	f003 0307 	and.w	r3, r3, #7
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	2b00      	cmp	r3, #0
 8002834:	db0b      	blt.n	800284e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f003 021f 	and.w	r2, r3, #31
 800283c:	4906      	ldr	r1, [pc, #24]	; (8002858 <__NVIC_EnableIRQ+0x34>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2001      	movs	r0, #1
 8002846:	fa00 f202 	lsl.w	r2, r0, r2
 800284a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100

0800285c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	; (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	; (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
         );
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002924:	d301      	bcc.n	800292a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2301      	movs	r3, #1
 8002928:	e00f      	b.n	800294a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <SysTick_Config+0x40>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002932:	210f      	movs	r1, #15
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f7ff ff90 	bl	800285c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Config+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SysTick_Config+0x40>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff2d 	bl	80027c0 <__NVIC_SetPriorityGrouping>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff ff42 	bl	8002808 <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff90 	bl	80028b0 <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5f 	bl	800285c <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff35 	bl	8002824 <__NVIC_EnableIRQ>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ffa2 	bl	8002914 <SysTick_Config>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029f2:	e154      	b.n	8002c9e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8146 	beq.w	8002c98 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d005      	beq.n	8002a24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d130      	bne.n	8002a86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0201 	and.w	r2, r3, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d017      	beq.n	8002ac2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d123      	bne.n	8002b16 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ada:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	08da      	lsrs	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3208      	adds	r2, #8
 8002b10:	6939      	ldr	r1, [r7, #16]
 8002b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0203 	and.w	r2, r3, #3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80a0 	beq.w	8002c98 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b58:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <HAL_GPIO_Init+0x2e0>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	; (8002cbc <HAL_GPIO_Init+0x2e0>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	4b55      	ldr	r3, [pc, #340]	; (8002cbc <HAL_GPIO_Init+0x2e0>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b70:	4a53      	ldr	r2, [pc, #332]	; (8002cc0 <HAL_GPIO_Init+0x2e4>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_GPIO_Init+0x2e8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d019      	beq.n	8002bd0 <HAL_GPIO_Init+0x1f4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a4a      	ldr	r2, [pc, #296]	; (8002cc8 <HAL_GPIO_Init+0x2ec>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_GPIO_Init+0x1f0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a49      	ldr	r2, [pc, #292]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00d      	beq.n	8002bc8 <HAL_GPIO_Init+0x1ec>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a48      	ldr	r2, [pc, #288]	; (8002cd0 <HAL_GPIO_Init+0x2f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <HAL_GPIO_Init+0x1e8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <HAL_GPIO_Init+0x2f8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_GPIO_Init+0x1e4>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	e008      	b.n	8002bd2 <HAL_GPIO_Init+0x1f6>
 8002bc0:	2305      	movs	r3, #5
 8002bc2:	e006      	b.n	8002bd2 <HAL_GPIO_Init+0x1f6>
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e004      	b.n	8002bd2 <HAL_GPIO_Init+0x1f6>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e002      	b.n	8002bd2 <HAL_GPIO_Init+0x1f6>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_GPIO_Init+0x1f6>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	f002 0203 	and.w	r2, r2, #3
 8002bd8:	0092      	lsls	r2, r2, #2
 8002bda:	4093      	lsls	r3, r2
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002be2:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_GPIO_Init+0x2e4>)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	3302      	adds	r3, #2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c14:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c3e:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c68:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c92:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <HAL_GPIO_Init+0x2fc>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f47f aea3 	bne.w	80029f4 <HAL_GPIO_Init+0x18>
  }
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	40020800 	.word	0x40020800
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

   if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e001      	b.n	8002cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	807b      	strh	r3, [r7, #2]
 8002d16:	4613      	mov	r3, r2
 8002d18:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d1a:	787b      	ldrb	r3, [r7, #1]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d26:	e003      	b.n	8002d30 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d28:	887b      	ldrh	r3, [r7, #2]
 8002d2a:	041a      	lsls	r2, r3, #16
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	619a      	str	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe ff90 	bl	8001c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40010400 	.word	0x40010400

08002d6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	b08b      	sub	sp, #44	; 0x2c
 8002d70:	af06      	add	r7, sp, #24
 8002d72:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0d0      	b.n	8002f20 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f006 fbd4 	bl	8009540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 fc37 	bl	8005618 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e04c      	b.n	8002e4a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	b298      	uxth	r0, r3
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3336      	adds	r3, #54	; 0x36
 8002dee:	4602      	mov	r2, r0
 8002df0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3303      	adds	r3, #3
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	3338      	adds	r3, #56	; 0x38
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	333c      	adds	r3, #60	; 0x3c
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3340      	adds	r3, #64	; 0x40
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	3301      	adds	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3ad      	bcc.n	8002db0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
 8002e58:	e044      	b.n	8002ee4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3b5      	bcc.n	8002e5a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	687e      	ldr	r6, [r7, #4]
 8002ef6:	466d      	mov	r5, sp
 8002ef8:	f106 0410 	add.w	r4, r6, #16
 8002efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	602b      	str	r3, [r5, #0]
 8002f04:	1d33      	adds	r3, r6, #4
 8002f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f08:	6838      	ldr	r0, [r7, #0]
 8002f0a:	f002 fb9f 	bl	800564c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_PCD_Start+0x16>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e016      	b.n	8002f6c <HAL_PCD_Start+0x44>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fb4e 	bl	80055ec <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002f50:	2101      	movs	r1, #1
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f006 fad6 	bl	8009504 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fcf2 	bl	8007946 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fcea 	bl	800795a <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f90:	d102      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 faf5 	bl	8003582 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fcdc 	bl	800795a <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fac:	d112      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f006 fb35 	bl	8009636 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8c7 	bl	8003162 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fcbe 	bl	800795a <USB_ReadInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe8:	d10b      	bne.n	8003002 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ffc:	b292      	uxth	r2, r2
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f004 fca7 	bl	800795a <USB_ReadInterrupts>
 800300c:	4603      	mov	r3, r0
 800300e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003016:	d10b      	bne.n	8003030 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	b292      	uxth	r2, r2
 800302c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f004 fc90 	bl	800795a <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003044:	d126      	bne.n	8003094 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0204 	bic.w	r2, r2, #4
 8003058:	b292      	uxth	r2, r2
 800305a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0208 	bic.w	r2, r2, #8
 8003070:	b292      	uxth	r2, r2
 8003072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f006 fb16 	bl	80096a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308e:	b292      	uxth	r2, r2
 8003090:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f004 fc5e 	bl	800795a <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a8:	d126      	bne.n	80030f8 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0208 	orr.w	r2, r2, #8
 80030bc:	b292      	uxth	r2, r2
 80030be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d4:	b292      	uxth	r2, r2
 80030d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0204 	orr.w	r2, r2, #4
 80030ec:	b292      	uxth	r2, r2
 80030ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f006 fabe 	bl	8009674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fc2c 	bl	800795a <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d10e      	bne.n	800312c <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003120:	b292      	uxth	r2, r2
 8003122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f006 fa77 	bl	800961a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fc12 	bl	800795a <USB_ReadInterrupts>
 8003136:	4603      	mov	r3, r0
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003140:	d10b      	bne.n	800315a <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003154:	b292      	uxth	r2, r2
 8003156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_PCD_SetAddress+0x1a>
 8003178:	2302      	movs	r3, #2
 800317a:	e013      	b.n	80031a4 <HAL_PCD_SetAddress+0x42>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f004 fbc3 	bl	8007920 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	70fb      	strb	r3, [r7, #3]
 80031be:	460b      	mov	r3, r1
 80031c0:	803b      	strh	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da0e      	bge.n	80031f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	705a      	strb	r2, [r3, #1]
 80031ee:	e00e      	b.n	800320e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	f003 0207 	and.w	r2, r3, #7
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800321a:	883a      	ldrh	r2, [r7, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	78ba      	ldrb	r2, [r7, #2]
 8003224:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003238:	78bb      	ldrb	r3, [r7, #2]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d102      	bne.n	8003244 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_PCD_EP_Open+0xa6>
 800324e:	2302      	movs	r3, #2
 8003250:	e00e      	b.n	8003270 <HAL_PCD_EP_Open+0xc4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68f9      	ldr	r1, [r7, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f002 fa13 	bl	800568c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800326e:	7afb      	ldrb	r3, [r7, #11]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da0e      	bge.n	80032aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	705a      	strb	r2, [r3, #1]
 80032a8:	e00e      	b.n	80032c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 0207 	and.w	r2, r3, #7
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_EP_Close+0x6a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e00e      	b.n	8003300 <HAL_PCD_EP_Close+0x88>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 fd35 	bl	8005d60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	460b      	mov	r3, r1
 8003316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 0207 	and.w	r2, r3, #7
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	b2da      	uxtb	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003354:	7afb      	ldrb	r3, [r7, #11]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6979      	ldr	r1, [r7, #20]
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fee7 	bl	8006138 <USB_EPStartXfer>
 800336a:	e005      	b.n	8003378 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6979      	ldr	r1, [r7, #20]
 8003372:	4618      	mov	r0, r3
 8003374:	f002 fee0 	bl	8006138 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	f003 0207 	and.w	r2, r3, #7
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033a4:	681b      	ldr	r3, [r3, #0]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	460b      	mov	r3, r1
 80033be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	7afb      	ldrb	r3, [r7, #11]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2201      	movs	r2, #1
 80033fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	b2da      	uxtb	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6979      	ldr	r1, [r7, #20]
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fe8d 	bl	8006138 <USB_EPStartXfer>
 800341e:	e005      	b.n	800342c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6979      	ldr	r1, [r7, #20]
 8003426:	4618      	mov	r0, r3
 8003428:	f002 fe86 	bl	8006138 <USB_EPStartXfer>
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	460b      	mov	r3, r1
 8003440:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 0207 	and.w	r2, r3, #7
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d901      	bls.n	8003454 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e03e      	b.n	80034d2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003458:	2b00      	cmp	r3, #0
 800345a:	da0e      	bge.n	800347a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	705a      	strb	r2, [r3, #1]
 8003478:	e00c      	b.n	8003494 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_PCD_EP_SetStall+0x7e>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e00e      	b.n	80034d2 <HAL_PCD_EP_SetStall+0x9c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 f92f 	bl	8007726 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d901      	bls.n	80034f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e040      	b.n	800357a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da0e      	bge.n	800351e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	705a      	strb	r2, [r3, #1]
 800351c:	e00e      	b.n	800353c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 0207 	and.w	r2, r3, #7
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_PCD_EP_ClrStall+0x82>
 8003558:	2302      	movs	r3, #2
 800355a:	e00e      	b.n	800357a <HAL_PCD_EP_ClrStall+0xa0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 f92b 	bl	80077c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b08e      	sub	sp, #56	; 0x38
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800358a:	e2ec      	b.n	8003b66 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003594:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003596:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80035a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 8161 	bne.w	800386e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d152      	bne.n	800365c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	81fb      	strh	r3, [r7, #14]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	89fb      	ldrh	r3, [r7, #14]
 80035ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3328      	adds	r3, #40	; 0x28
 80035de:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	3302      	adds	r3, #2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	441a      	add	r2, r3
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800361a:	2100      	movs	r1, #0
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f005 ffe2 	bl	80095e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 829b 	beq.w	8003b66 <PCD_EP_ISR_Handler+0x5e4>
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f040 8296 	bne.w	8003b66 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003646:	b2da      	uxtb	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	b292      	uxth	r2, r2
 800364e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800365a:	e284      	b.n	8003b66 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800366c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	2b00      	cmp	r3, #0
 8003674:	d034      	beq.n	80036e0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	3306      	adds	r3, #6
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f004 f9a4 	bl	8007a02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036c6:	4013      	ands	r3, r2
 80036c8:	823b      	strh	r3, [r7, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	8a3a      	ldrh	r2, [r7, #16]
 80036d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036d4:	b292      	uxth	r2, r2
 80036d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f005 ff57 	bl	800958c <HAL_PCD_SetupStageCallback>
 80036de:	e242      	b.n	8003b66 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f280 823e 	bge.w	8003b66 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036f6:	4013      	ands	r3, r2
 80036f8:	83bb      	strh	r3, [r7, #28]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	8bba      	ldrh	r2, [r7, #28]
 8003700:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003704:	b292      	uxth	r2, r2
 8003706:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	3306      	adds	r3, #6
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d019      	beq.n	8003770 <PCD_EP_ISR_Handler+0x1ee>
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d015      	beq.n	8003770 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	6959      	ldr	r1, [r3, #20]
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003754:	b29b      	uxth	r3, r3
 8003756:	f004 f954 	bl	8007a02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	441a      	add	r2, r3
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003768:	2100      	movs	r1, #0
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f005 ff20 	bl	80095b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377c:	2b00      	cmp	r3, #0
 800377e:	f040 81f2 	bne.w	8003b66 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003790:	b29b      	uxth	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d112      	bne.n	80037d0 <PCD_EP_ISR_Handler+0x24e>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	801a      	strh	r2, [r3, #0]
 80037ce:	e02f      	b.n	8003830 <PCD_EP_ISR_Handler+0x2ae>
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b3e      	cmp	r3, #62	; 0x3e
 80037d6:	d813      	bhi.n	8003800 <PCD_EP_ISR_Handler+0x27e>
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <PCD_EP_ISR_Handler+0x270>
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	3301      	adds	r3, #1
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	029b      	lsls	r3, r3, #10
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	e017      	b.n	8003830 <PCD_EP_ISR_Handler+0x2ae>
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <PCD_EP_ISR_Handler+0x298>
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	3b01      	subs	r3, #1
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	b29b      	uxth	r3, r3
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	b29b      	uxth	r3, r3
 8003822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382a:	b29a      	uxth	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	827b      	strh	r3, [r7, #18]
 8003842:	8a7b      	ldrh	r3, [r7, #18]
 8003844:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003848:	827b      	strh	r3, [r7, #18]
 800384a:	8a7b      	ldrh	r3, [r7, #18]
 800384c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003850:	827b      	strh	r3, [r7, #18]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	8a7b      	ldrh	r3, [r7, #18]
 8003858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800385c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003868:	b29b      	uxth	r3, r3
 800386a:	8013      	strh	r3, [r2, #0]
 800386c:	e17b      	b.n	8003b66 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003880:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003884:	2b00      	cmp	r3, #0
 8003886:	f280 80ea 	bge.w	8003a5e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29a      	uxth	r2, r3
 800389c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038a0:	4013      	ands	r3, r2
 80038a2:	853b      	strh	r3, [r7, #40]	; 0x28
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038b8:	b292      	uxth	r2, r2
 80038ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	7b1b      	ldrb	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d122      	bne.n	8003920 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	3306      	adds	r3, #6
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003902:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8087 	beq.w	8003a1a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	6959      	ldr	r1, [r3, #20]
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	88da      	ldrh	r2, [r3, #6]
 8003918:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800391a:	f004 f872 	bl	8007a02 <USB_ReadPMA>
 800391e:	e07c      	b.n	8003a1a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	78db      	ldrb	r3, [r3, #3]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d108      	bne.n	800393a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003928:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800392a:	461a      	mov	r2, r3
 800392c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f927 	bl	8003b82 <HAL_PCD_EP_DB_Receive>
 8003934:	4603      	mov	r3, r0
 8003936:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003938:	e06f      	b.n	8003a1a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003954:	847b      	strh	r3, [r7, #34]	; 0x22
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	441a      	add	r2, r3
 8003964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800396a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800396e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003976:	b29b      	uxth	r3, r3
 8003978:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d021      	beq.n	80039d8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	3302      	adds	r3, #2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039bc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80039be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02a      	beq.n	8003a1a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	6959      	ldr	r1, [r3, #20]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	891a      	ldrh	r2, [r3, #8]
 80039d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039d2:	f004 f816 	bl	8007a02 <USB_ReadPMA>
 80039d6:	e020      	b.n	8003a1a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	3306      	adds	r3, #6
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a00:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003a02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	6959      	ldr	r1, [r3, #20]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	895a      	ldrh	r2, [r3, #10]
 8003a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a16:	f003 fff4 	bl	8007a02 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a20:	441a      	add	r2, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a2c:	441a      	add	r2, r3
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <PCD_EP_ISR_Handler+0x4c2>
 8003a3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d206      	bcs.n	8003a52 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f005 fdb0 	bl	80095b0 <HAL_PCD_DataOutStageCallback>
 8003a50:	e005      	b.n	8003a5e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 fb6d 	bl	8006138 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d07e      	beq.n	8003b66 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	843b      	strh	r3, [r7, #32]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	8c3b      	ldrh	r3, [r7, #32]
 8003aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	78db      	ldrb	r3, [r3, #3]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d00c      	beq.n	8003ad6 <PCD_EP_ISR_Handler+0x554>
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d146      	bne.n	8003b5a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003acc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d141      	bne.n	8003b5a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	3302      	adds	r3, #2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003afe:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	8bfb      	ldrh	r3, [r7, #30]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d906      	bls.n	8003b18 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	8bfb      	ldrh	r3, [r7, #30]
 8003b10:	1ad2      	subs	r2, r2, r3
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	619a      	str	r2, [r3, #24]
 8003b16:	e002      	b.n	8003b1e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f005 fd5a 	bl	80095e6 <HAL_PCD_DataInStageCallback>
 8003b32:	e018      	b.n	8003b66 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	8bfb      	ldrh	r3, [r7, #30]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	8bfb      	ldrh	r3, [r7, #30]
 8003b46:	441a      	add	r2, r3
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 faf0 	bl	8006138 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003b58:	e005      	b.n	8003b66 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f91b 	bl	8003d9c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	b21b      	sxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f6ff ad0a 	blt.w	800358c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3738      	adds	r7, #56	; 0x38
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b088      	sub	sp, #32
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d07e      	beq.n	8003c98 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	8b7b      	ldrh	r3, [r7, #26]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d306      	bcc.n	8003bdc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	8b7b      	ldrh	r3, [r7, #26]
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	619a      	str	r2, [r3, #24]
 8003bda:	e002      	b.n	8003be2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d123      	bne.n	8003c32 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c04:	833b      	strh	r3, [r7, #24]
 8003c06:	8b3b      	ldrh	r3, [r7, #24]
 8003c08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c0c:	833b      	strh	r3, [r7, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	8b3b      	ldrh	r3, [r7, #24]
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01f      	beq.n	8003c7c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	82fb      	strh	r3, [r7, #22]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	8afb      	ldrh	r3, [r7, #22]
 8003c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c7c:	8b7b      	ldrh	r3, [r7, #26]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8087 	beq.w	8003d92 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6959      	ldr	r1, [r3, #20]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	891a      	ldrh	r2, [r3, #8]
 8003c90:	8b7b      	ldrh	r3, [r7, #26]
 8003c92:	f003 feb6 	bl	8007a02 <USB_ReadPMA>
 8003c96:	e07c      	b.n	8003d92 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	3306      	adds	r3, #6
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	8b7b      	ldrh	r3, [r7, #26]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d306      	bcc.n	8003cda <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	8b7b      	ldrh	r3, [r7, #26]
 8003cd2:	1ad2      	subs	r2, r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	619a      	str	r2, [r3, #24]
 8003cd8:	e002      	b.n	8003ce0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d123      	bne.n	8003d30 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	83fb      	strh	r3, [r7, #30]
 8003d04:	8bfb      	ldrh	r3, [r7, #30]
 8003d06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d0a:	83fb      	strh	r3, [r7, #30]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	8bfb      	ldrh	r3, [r7, #30]
 8003d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d30:	88fb      	ldrh	r3, [r7, #6]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11f      	bne.n	8003d7a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	83bb      	strh	r3, [r7, #28]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	8bbb      	ldrh	r3, [r7, #28]
 8003d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d7a:	8b7b      	ldrh	r3, [r7, #26]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6959      	ldr	r1, [r3, #20]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	895a      	ldrh	r2, [r3, #10]
 8003d8c:	8b7b      	ldrh	r3, [r7, #26]
 8003d8e:	f003 fe38 	bl	8007a02 <USB_ReadPMA>
    }
  }

  return count;
 8003d92:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b0a2      	sub	sp, #136	; 0x88
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 81c7 	beq.w	8004144 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d907      	bls.n	8003dfe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	619a      	str	r2, [r3, #24]
 8003dfc:	e002      	b.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f040 80b9 	bne.w	8003f80 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	785b      	ldrb	r3, [r3, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d126      	bne.n	8003e64 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	4413      	add	r3, r2
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	011a      	lsls	r2, r3, #4
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	4413      	add	r3, r2
 8003e38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	801a      	strh	r2, [r3, #0]
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	e01a      	b.n	8003e9a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d116      	bne.n	8003e9a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	633b      	str	r3, [r7, #48]	; 0x30
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	4413      	add	r3, r2
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	011a      	lsls	r2, r3, #4
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	2200      	movs	r2, #0
 8003e98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d126      	bne.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	011a      	lsls	r2, r3, #4
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	e017      	b.n	8003f26 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d113      	bne.n	8003f26 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	623b      	str	r3, [r7, #32]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	011a      	lsls	r2, r3, #4
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2200      	movs	r2, #0
 8003f24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f005 fb5a 	bl	80095e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 82d4 	beq.w	80044e6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f58:	827b      	strh	r3, [r7, #18]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	441a      	add	r2, r3
 8003f68:	8a7b      	ldrh	r3, [r7, #18]
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]
 8003f7e:	e2b2      	b.n	80044e6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d021      	beq.n	8003fce <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	f040 8286 	bne.w	80044e6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ff0:	441a      	add	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6a1a      	ldr	r2, [r3, #32]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d309      	bcc.n	8004016 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	621a      	str	r2, [r3, #32]
 8004014:	e015      	b.n	8004042 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800401e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004022:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800402c:	e009      	b.n	8004042 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d155      	bne.n	80040f6 <HAL_PCD_EP_DB_Transmit+0x35a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004058:	b29b      	uxth	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	4413      	add	r3, r2
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	011a      	lsls	r2, r3, #4
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	4413      	add	r3, r2
 800406c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004074:	2b00      	cmp	r3, #0
 8004076:	d112      	bne.n	800409e <HAL_PCD_EP_DB_Transmit+0x302>
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	b29b      	uxth	r3, r3
 800407e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004082:	b29a      	uxth	r2, r3
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	801a      	strh	r2, [r3, #0]
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004096:	b29a      	uxth	r2, r3
 8004098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409a:	801a      	strh	r2, [r3, #0]
 800409c:	e047      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x392>
 800409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a0:	2b3e      	cmp	r3, #62	; 0x3e
 80040a2:	d811      	bhi.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80040a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_PCD_EP_DB_Transmit+0x31e>
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	3301      	adds	r3, #1
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040bc:	b29b      	uxth	r3, r3
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e032      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x392>
 80040c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <HAL_PCD_EP_DB_Transmit+0x342>
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	3b01      	subs	r3, #1
 80040dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	029b      	lsls	r3, r3, #10
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f2:	801a      	strh	r2, [r3, #0]
 80040f4:	e01b      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x392>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d117      	bne.n	800412e <HAL_PCD_EP_DB_Transmit+0x392>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	643b      	str	r3, [r7, #64]	; 0x40
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410c:	b29b      	uxth	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004112:	4413      	add	r3, r2
 8004114:	643b      	str	r3, [r7, #64]	; 0x40
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	011a      	lsls	r2, r3, #4
 800411c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411e:	4413      	add	r3, r2
 8004120:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004128:	b29a      	uxth	r2, r3
 800412a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6959      	ldr	r1, [r3, #20]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	891a      	ldrh	r2, [r3, #8]
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	b29b      	uxth	r3, r3
 800413e:	f003 fc1b 	bl	8007978 <USB_WritePMA>
 8004142:	e1d0      	b.n	80044e6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414c:	b29b      	uxth	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	3306      	adds	r3, #6
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	699a      	ldr	r2, [r3, #24]
 8004174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004178:	429a      	cmp	r2, r3
 800417a:	d307      	bcc.n	800418c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004184:	1ad2      	subs	r2, r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	619a      	str	r2, [r3, #24]
 800418a:	e002      	b.n	8004192 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 80c4 	bne.w	8004324 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d126      	bne.n	80041f2 <HAL_PCD_EP_DB_Transmit+0x456>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	4413      	add	r3, r2
 80041ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	011a      	lsls	r2, r3, #4
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	4413      	add	r3, r2
 80041c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80041cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ee:	801a      	strh	r2, [r3, #0]
 80041f0:	e01a      	b.n	8004228 <HAL_PCD_EP_DB_Transmit+0x48c>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d116      	bne.n	8004228 <HAL_PCD_EP_DB_Transmit+0x48c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	677b      	str	r3, [r7, #116]	; 0x74
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420e:	4413      	add	r3, r2
 8004210:	677b      	str	r3, [r7, #116]	; 0x74
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	011a      	lsls	r2, r3, #4
 8004218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421a:	4413      	add	r3, r2
 800421c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004220:	673b      	str	r3, [r7, #112]	; 0x70
 8004222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004224:	2200      	movs	r2, #0
 8004226:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	67bb      	str	r3, [r7, #120]	; 0x78
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12f      	bne.n	8004296 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004246:	b29b      	uxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800424e:	4413      	add	r3, r2
 8004250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	011a      	lsls	r2, r3, #4
 800425a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800425e:	4413      	add	r3, r2
 8004260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004274:	b29a      	uxth	r2, r3
 8004276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428c:	b29a      	uxth	r2, r3
 800428e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	e017      	b.n	80042c6 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d113      	bne.n	80042c6 <HAL_PCD_EP_DB_Transmit+0x52a>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ac:	4413      	add	r3, r2
 80042ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	011a      	lsls	r2, r3, #4
 80042b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b8:	4413      	add	r3, r2
 80042ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042c2:	2200      	movs	r2, #0
 80042c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	4619      	mov	r1, r3
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f005 f98a 	bl	80095e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f040 8104 	bne.w	80044e6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800430e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800431a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431e:	b29b      	uxth	r3, r3
 8004320:	8013      	strh	r3, [r2, #0]
 8004322:	e0e0      	b.n	80044e6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d121      	bne.n	8004372 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 80b4 	bne.w	80044e6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004386:	441a      	add	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004394:	441a      	add	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d309      	bcc.n	80043ba <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b2:	1ad2      	subs	r2, r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	621a      	str	r2, [r3, #32]
 80043b8:	e015      	b.n	80043e6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80043c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043d0:	e009      	b.n	80043e6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2200      	movs	r2, #0
 80043dc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	667b      	str	r3, [r7, #100]	; 0x64
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	785b      	ldrb	r3, [r3, #1]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d155      	bne.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x704>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004408:	4413      	add	r3, r2
 800440a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	011a      	lsls	r2, r3, #4
 8004412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004414:	4413      	add	r3, r2
 8004416:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800441a:	65bb      	str	r3, [r7, #88]	; 0x58
 800441c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441e:	2b00      	cmp	r3, #0
 8004420:	d112      	bne.n	8004448 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800442c:	b29a      	uxth	r2, r3
 800442e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004440:	b29a      	uxth	r2, r3
 8004442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e044      	b.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x736>
 8004448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444a:	2b3e      	cmp	r3, #62	; 0x3e
 800444c:	d811      	bhi.n	8004472 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800444e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	657b      	str	r3, [r7, #84]	; 0x54
 8004454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800445e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004460:	3301      	adds	r3, #1
 8004462:	657b      	str	r3, [r7, #84]	; 0x54
 8004464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004466:	b29b      	uxth	r3, r3
 8004468:	029b      	lsls	r3, r3, #10
 800446a:	b29a      	uxth	r2, r3
 800446c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	e02f      	b.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x736>
 8004472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	657b      	str	r3, [r7, #84]	; 0x54
 8004478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004484:	3b01      	subs	r3, #1
 8004486:	657b      	str	r3, [r7, #84]	; 0x54
 8004488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448a:	b29b      	uxth	r3, r3
 800448c:	029b      	lsls	r3, r3, #10
 800448e:	b29b      	uxth	r3, r3
 8004490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004498:	b29a      	uxth	r2, r3
 800449a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	e018      	b.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x736>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d114      	bne.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x736>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b6:	4413      	add	r3, r2
 80044b8:	667b      	str	r3, [r7, #100]	; 0x64
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	011a      	lsls	r2, r3, #4
 80044c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c2:	4413      	add	r3, r2
 80044c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044c8:	663b      	str	r3, [r7, #96]	; 0x60
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	6959      	ldr	r1, [r3, #20]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	895a      	ldrh	r2, [r3, #10]
 80044de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f003 fa49 	bl	8007978 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004500:	823b      	strh	r3, [r7, #16]
 8004502:	8a3b      	ldrh	r3, [r7, #16]
 8004504:	f083 0310 	eor.w	r3, r3, #16
 8004508:	823b      	strh	r3, [r7, #16]
 800450a:	8a3b      	ldrh	r3, [r7, #16]
 800450c:	f083 0320 	eor.w	r3, r3, #32
 8004510:	823b      	strh	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	8a3b      	ldrh	r3, [r7, #16]
 8004522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800452a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004532:	b29b      	uxth	r3, r3
 8004534:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3788      	adds	r7, #136	; 0x88
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	817b      	strh	r3, [r7, #10]
 800454e:	4613      	mov	r3, r2
 8004550:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004552:	897b      	ldrh	r3, [r7, #10]
 8004554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800455e:	897b      	ldrh	r3, [r7, #10]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e009      	b.n	800458a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004576:	897a      	ldrh	r2, [r7, #10]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800458a:	893b      	ldrh	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d107      	bne.n	80045a0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	b29a      	uxth	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	80da      	strh	r2, [r3, #6]
 800459e:	e00b      	b.n	80045b8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2201      	movs	r2, #1
 80045a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e31d      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045d6:	4b94      	ldr	r3, [pc, #592]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045e0:	4b91      	ldr	r3, [pc, #580]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d07b      	beq.n	80046ee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d006      	beq.n	800460a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d10f      	bne.n	8004622 <HAL_RCC_OscConfig+0x5e>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d10b      	bne.n	8004622 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460a:	4b87      	ldr	r3, [pc, #540]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d06a      	beq.n	80046ec <HAL_RCC_OscConfig+0x128>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d166      	bne.n	80046ec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e2f7      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x74>
 800462a:	4b7f      	ldr	r3, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7e      	ldr	r2, [pc, #504]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e02d      	b.n	8004694 <HAL_RCC_OscConfig+0xd0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10c      	bne.n	800465a <HAL_RCC_OscConfig+0x96>
 8004640:	4b79      	ldr	r3, [pc, #484]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a78      	ldr	r2, [pc, #480]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4b76      	ldr	r3, [pc, #472]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a75      	ldr	r2, [pc, #468]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	e01c      	b.n	8004694 <HAL_RCC_OscConfig+0xd0>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b05      	cmp	r3, #5
 8004660:	d10c      	bne.n	800467c <HAL_RCC_OscConfig+0xb8>
 8004662:	4b71      	ldr	r3, [pc, #452]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a70      	ldr	r2, [pc, #448]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	4b6e      	ldr	r3, [pc, #440]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6d      	ldr	r2, [pc, #436]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e00b      	b.n	8004694 <HAL_RCC_OscConfig+0xd0>
 800467c:	4b6a      	ldr	r3, [pc, #424]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a69      	ldr	r2, [pc, #420]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b67      	ldr	r3, [pc, #412]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a66      	ldr	r2, [pc, #408]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800468e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fe f864 	bl	8002768 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fe f860 	bl	8002768 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e2ad      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046b6:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0xe0>
 80046c2:	e014      	b.n	80046ee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fe f850 	bl	8002768 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fe f84c 	bl	8002768 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	; 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e299      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046de:	4b52      	ldr	r3, [pc, #328]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x108>
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d05a      	beq.n	80047b0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d005      	beq.n	800470c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d119      	bne.n	800473a <HAL_RCC_OscConfig+0x176>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470c:	4b46      	ldr	r3, [pc, #280]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_OscConfig+0x160>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d001      	beq.n	8004724 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e276      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004724:	4b40      	ldr	r3, [pc, #256]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	493d      	ldr	r1, [pc, #244]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004738:	e03a      	b.n	80047b0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d020      	beq.n	8004784 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004742:	4b3a      	ldr	r3, [pc, #232]	; (800482c <HAL_RCC_OscConfig+0x268>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fe f80e 	bl	8002768 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004750:	f7fe f80a 	bl	8002768 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e257      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004762:	4b31      	ldr	r3, [pc, #196]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	492a      	ldr	r1, [pc, #168]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800477e:	4313      	orrs	r3, r2
 8004780:	604b      	str	r3, [r1, #4]
 8004782:	e015      	b.n	80047b0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <HAL_RCC_OscConfig+0x268>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fd ffed 	bl	8002768 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004792:	f7fd ffe9 	bl	8002768 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e236      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047a4:	4b20      	ldr	r3, [pc, #128]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80b8 	beq.w	800492e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d170      	bne.n	80048a6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c4:	4b18      	ldr	r3, [pc, #96]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_OscConfig+0x218>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e21a      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d921      	bls.n	8004830 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fc19 	bl	8005028 <RCC_SetFlashLatencyFromMSIRange>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e208      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004800:	4b09      	ldr	r3, [pc, #36]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4906      	ldr	r1, [pc, #24]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	061b      	lsls	r3, r3, #24
 8004820:	4901      	ldr	r1, [pc, #4]	; (8004828 <HAL_RCC_OscConfig+0x264>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
 8004826:	e020      	b.n	800486a <HAL_RCC_OscConfig+0x2a6>
 8004828:	40023800 	.word	0x40023800
 800482c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004830:	4ba4      	ldr	r3, [pc, #656]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	49a1      	ldr	r1, [pc, #644]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004842:	4ba0      	ldr	r3, [pc, #640]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	499c      	ldr	r1, [pc, #624]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004852:	4313      	orrs	r3, r2
 8004854:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fbe4 	bl	8005028 <RCC_SetFlashLatencyFromMSIRange>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e1d3      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	0b5b      	lsrs	r3, r3, #13
 8004870:	3301      	adds	r3, #1
 8004872:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800487a:	4a92      	ldr	r2, [pc, #584]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	0912      	lsrs	r2, r2, #4
 8004880:	f002 020f 	and.w	r2, r2, #15
 8004884:	4990      	ldr	r1, [pc, #576]	; (8004ac8 <HAL_RCC_OscConfig+0x504>)
 8004886:	5c8a      	ldrb	r2, [r1, r2]
 8004888:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800488a:	4a90      	ldr	r2, [pc, #576]	; (8004acc <HAL_RCC_OscConfig+0x508>)
 800488c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800488e:	4b90      	ldr	r3, [pc, #576]	; (8004ad0 <HAL_RCC_OscConfig+0x50c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd ff1c 	bl	80026d0 <HAL_InitTick>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d045      	beq.n	800492e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	e1b5      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d029      	beq.n	8004902 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048ae:	4b89      	ldr	r3, [pc, #548]	; (8004ad4 <HAL_RCC_OscConfig+0x510>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fd ff58 	bl	8002768 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048bc:	f7fd ff54 	bl	8002768 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1a1      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048ce:	4b7d      	ldr	r3, [pc, #500]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048da:	4b7a      	ldr	r3, [pc, #488]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	4977      	ldr	r1, [pc, #476]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ec:	4b75      	ldr	r3, [pc, #468]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	4972      	ldr	r1, [pc, #456]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
 8004900:	e015      	b.n	800492e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004902:	4b74      	ldr	r3, [pc, #464]	; (8004ad4 <HAL_RCC_OscConfig+0x510>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fd ff2e 	bl	8002768 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004910:	f7fd ff2a 	bl	8002768 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e177      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004922:	4b68      	ldr	r3, [pc, #416]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d030      	beq.n	800499c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004942:	4b65      	ldr	r3, [pc, #404]	; (8004ad8 <HAL_RCC_OscConfig+0x514>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004948:	f7fd ff0e 	bl	8002768 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004950:	f7fd ff0a 	bl	8002768 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e157      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004962:	4b58      	ldr	r3, [pc, #352]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x38c>
 800496e:	e015      	b.n	800499c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_OscConfig+0x514>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fd fef7 	bl	8002768 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497e:	f7fd fef3 	bl	8002768 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e140      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004990:	4b4c      	ldr	r3, [pc, #304]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80b5 	beq.w	8004b14 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049aa:	2300      	movs	r3, #0
 80049ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ae:	4b45      	ldr	r3, [pc, #276]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ba:	4b42      	ldr	r3, [pc, #264]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	4a41      	ldr	r2, [pc, #260]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6253      	str	r3, [r2, #36]	; 0x24
 80049c6:	4b3f      	ldr	r3, [pc, #252]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d2:	2301      	movs	r3, #1
 80049d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	4b41      	ldr	r3, [pc, #260]	; (8004adc <HAL_RCC_OscConfig+0x518>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e2:	4b3e      	ldr	r3, [pc, #248]	; (8004adc <HAL_RCC_OscConfig+0x518>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a3d      	ldr	r2, [pc, #244]	; (8004adc <HAL_RCC_OscConfig+0x518>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ee:	f7fd febb 	bl	8002768 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f6:	f7fd feb7 	bl	8002768 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b64      	cmp	r3, #100	; 0x64
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e104      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b34      	ldr	r3, [pc, #208]	; (8004adc <HAL_RCC_OscConfig+0x518>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCC_OscConfig+0x466>
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	4a28      	ldr	r2, [pc, #160]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	6353      	str	r3, [r2, #52]	; 0x34
 8004a28:	e02d      	b.n	8004a86 <HAL_RCC_OscConfig+0x4c2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x488>
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3c:	6353      	str	r3, [r2, #52]	; 0x34
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a48:	6353      	str	r3, [r2, #52]	; 0x34
 8004a4a:	e01c      	b.n	8004a86 <HAL_RCC_OscConfig+0x4c2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d10c      	bne.n	8004a6e <HAL_RCC_OscConfig+0x4aa>
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a5e:	6353      	str	r3, [r2, #52]	; 0x34
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a64:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6a:	6353      	str	r3, [r2, #52]	; 0x34
 8004a6c:	e00b      	b.n	8004a86 <HAL_RCC_OscConfig+0x4c2>
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a78:	6353      	str	r3, [r2, #52]	; 0x34
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a84:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d015      	beq.n	8004aba <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8e:	f7fd fe6b 	bl	8002768 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fd fe67 	bl	8002768 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e0b2      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_OscConfig+0x500>)
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ee      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4d2>
 8004ab8:	e023      	b.n	8004b02 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aba:	f7fd fe55 	bl	8002768 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ac0:	e019      	b.n	8004af6 <HAL_RCC_OscConfig+0x532>
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	0800ca48 	.word	0x0800ca48
 8004acc:	20000018 	.word	0x20000018
 8004ad0:	2000001c 	.word	0x2000001c
 8004ad4:	42470020 	.word	0x42470020
 8004ad8:	42470680 	.word	0x42470680
 8004adc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fe42 	bl	8002768 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e08d      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004af6:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b02:	7ffb      	ldrb	r3, [r7, #31]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b08:	4b44      	ldr	r3, [pc, #272]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	4a43      	ldr	r2, [pc, #268]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b12:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d079      	beq.n	8004c10 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d056      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d13b      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b3d      	ldr	r3, [pc, #244]	; (8004c20 <HAL_RCC_OscConfig+0x65c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd fe1a 	bl	8002768 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd fe16 	bl	8002768 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e063      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b4a:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b56:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	4319      	orrs	r1, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	492b      	ldr	r1, [pc, #172]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <HAL_RCC_OscConfig+0x65c>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7a:	f7fd fdf5 	bl	8002768 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fd fdf1 	bl	8002768 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e03e      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b94:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x5be>
 8004ba0:	e036      	b.n	8004c10 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b1f      	ldr	r3, [pc, #124]	; (8004c20 <HAL_RCC_OscConfig+0x65c>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fdde 	bl	8002768 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd fdda 	bl	8002768 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e027      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bc2:	4b16      	ldr	r3, [pc, #88]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x5ec>
 8004bce:	e01f      	b.n	8004c10 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e01a      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <HAL_RCC_OscConfig+0x658>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d10d      	bne.n	8004c0c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d106      	bne.n	8004c0c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	42470060 	.word	0x42470060

08004c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e11a      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c38:	4b8f      	ldr	r3, [pc, #572]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d919      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x34>
 8004c4c:	4b8a      	ldr	r3, [pc, #552]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a89      	ldr	r2, [pc, #548]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004c52:	f043 0304 	orr.w	r3, r3, #4
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	4b87      	ldr	r3, [pc, #540]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 0201 	bic.w	r2, r3, #1
 8004c60:	4985      	ldr	r1, [pc, #532]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c68:	4b83      	ldr	r3, [pc, #524]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0f9      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c86:	4b7d      	ldr	r3, [pc, #500]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	497a      	ldr	r1, [pc, #488]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 808e 	beq.w	8004dc2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cae:	4b73      	ldr	r3, [pc, #460]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d121      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0d7      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cc6:	4b6d      	ldr	r3, [pc, #436]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d115      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0cb      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d107      	bne.n	8004cee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cde:	4b67      	ldr	r3, [pc, #412]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0bf      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004cee:	4b63      	ldr	r3, [pc, #396]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0b7      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfe:	4b5f      	ldr	r3, [pc, #380]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f023 0203 	bic.w	r2, r3, #3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	495c      	ldr	r1, [pc, #368]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d10:	f7fd fd2a 	bl	8002768 <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d112      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d20:	f7fd fd22 	bl	8002768 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e09b      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d36:	4b51      	ldr	r3, [pc, #324]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d1ee      	bne.n	8004d20 <HAL_RCC_ClockConfig+0xfc>
 8004d42:	e03e      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d112      	bne.n	8004d72 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4e:	f7fd fd0b 	bl	8002768 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e084      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d64:	4b45      	ldr	r3, [pc, #276]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b0c      	cmp	r3, #12
 8004d6e:	d1ee      	bne.n	8004d4e <HAL_RCC_ClockConfig+0x12a>
 8004d70:	e027      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d11d      	bne.n	8004db6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fd fcf4 	bl	8002768 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e06d      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d92:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d1ee      	bne.n	8004d7c <HAL_RCC_ClockConfig+0x158>
 8004d9e:	e010      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da0:	f7fd fce2 	bl	8002768 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e05b      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004db6:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ee      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d219      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x1be>
 8004dd6:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 0201 	bic.w	r2, r3, #1
 8004dea:	4923      	ldr	r1, [pc, #140]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <HAL_RCC_ClockConfig+0x254>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e034      	b.n	8004e6e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4917      	ldr	r1, [pc, #92]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	490f      	ldr	r1, [pc, #60]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e42:	f000 f823 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004e46:	4602      	mov	r2, r0
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCC_ClockConfig+0x258>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	490b      	ldr	r1, [pc, #44]	; (8004e80 <HAL_RCC_ClockConfig+0x25c>)
 8004e54:	5ccb      	ldrb	r3, [r1, r3]
 8004e56:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5a:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <HAL_RCC_ClockConfig+0x260>)
 8004e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <HAL_RCC_ClockConfig+0x264>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd fc34 	bl	80026d0 <HAL_InitTick>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023c00 	.word	0x40023c00
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	0800ca48 	.word	0x0800ca48
 8004e84:	20000018 	.word	0x20000018
 8004e88:	2000001c 	.word	0x2000001c

08004e8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004e92:	4b61      	ldr	r3, [pc, #388]	; (8005018 <HAL_RCC_GetSysClockFreq+0x18c>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d00d      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x32>
 8004ea2:	2b0c      	cmp	r3, #12
 8004ea4:	f200 80a4 	bhi.w	8004ff0 <HAL_RCC_GetSysClockFreq+0x164>
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d002      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x26>
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d003      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c>
 8004eb0:	e09e      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb2:	4b5a      	ldr	r3, [pc, #360]	; (800501c <HAL_RCC_GetSysClockFreq+0x190>)
 8004eb4:	613b      	str	r3, [r7, #16]
      break;
 8004eb6:	e0a9      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eb8:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_GetSysClockFreq+0x194>)
 8004eba:	613b      	str	r3, [r7, #16]
      break;
 8004ebc:	e0a6      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	0c9b      	lsrs	r3, r3, #18
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	4a57      	ldr	r2, [pc, #348]	; (8005024 <HAL_RCC_GetSysClockFreq+0x198>)
 8004ec8:	5cd3      	ldrb	r3, [r2, r3]
 8004eca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	0d9b      	lsrs	r3, r3, #22
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ed8:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <HAL_RCC_GetSysClockFreq+0x18c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d041      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	461c      	mov	r4, r3
 8004ee8:	f04f 0500 	mov.w	r5, #0
 8004eec:	4620      	mov	r0, r4
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	014b      	lsls	r3, r1, #5
 8004efa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004efe:	0142      	lsls	r2, r0, #5
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	1b00      	subs	r0, r0, r4
 8004f06:	eb61 0105 	sbc.w	r1, r1, r5
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	018b      	lsls	r3, r1, #6
 8004f14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f18:	0182      	lsls	r2, r0, #6
 8004f1a:	1a12      	subs	r2, r2, r0
 8004f1c:	eb63 0301 	sbc.w	r3, r3, r1
 8004f20:	f04f 0000 	mov.w	r0, #0
 8004f24:	f04f 0100 	mov.w	r1, #0
 8004f28:	00d9      	lsls	r1, r3, #3
 8004f2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f2e:	00d0      	lsls	r0, r2, #3
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	1912      	adds	r2, r2, r4
 8004f36:	eb45 0303 	adc.w	r3, r5, r3
 8004f3a:	f04f 0000 	mov.w	r0, #0
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	0259      	lsls	r1, r3, #9
 8004f44:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f48:	0250      	lsls	r0, r2, #9
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	f7fc f8dd 	bl	8001118 <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4613      	mov	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	e040      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	461c      	mov	r4, r3
 8004f6c:	f04f 0500 	mov.w	r5, #0
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	014b      	lsls	r3, r1, #5
 8004f7e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f82:	0142      	lsls	r2, r0, #5
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	1b00      	subs	r0, r0, r4
 8004f8a:	eb61 0105 	sbc.w	r1, r1, r5
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	018b      	lsls	r3, r1, #6
 8004f98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f9c:	0182      	lsls	r2, r0, #6
 8004f9e:	1a12      	subs	r2, r2, r0
 8004fa0:	eb63 0301 	sbc.w	r3, r3, r1
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	00d9      	lsls	r1, r3, #3
 8004fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb2:	00d0      	lsls	r0, r2, #3
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	1912      	adds	r2, r2, r4
 8004fba:	eb45 0303 	adc.w	r3, r5, r3
 8004fbe:	f04f 0000 	mov.w	r0, #0
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	0299      	lsls	r1, r3, #10
 8004fc8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fcc:	0290      	lsls	r0, r2, #10
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	f7fc f89b 	bl	8001118 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	613b      	str	r3, [r7, #16]
      break;
 8004fee:	e00d      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_RCC_GetSysClockFreq+0x18c>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	0b5b      	lsrs	r3, r3, #13
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	613b      	str	r3, [r7, #16]
      break;
 800500a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800500c:	693b      	ldr	r3, [r7, #16]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bdb0      	pop	{r4, r5, r7, pc}
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
 800501c:	00f42400 	.word	0x00f42400
 8005020:	007a1200 	.word	0x007a1200
 8005024:	0800ca3c 	.word	0x0800ca3c

08005028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d12c      	bne.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005040:	4b26      	ldr	r3, [pc, #152]	; (80050dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	e016      	b.n	8005086 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800505e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005062:	6253      	str	r3, [r2, #36]	; 0x24
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005070:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005078:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005084:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800508c:	d105      	bne.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005094:	d101      	bne.n	800509a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005096:	2301      	movs	r3, #1
 8005098:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d105      	bne.n	80050ac <RCC_SetFlashLatencyFromMSIRange+0x84>
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0f      	ldr	r2, [pc, #60]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 0201 	bic.w	r2, r3, #1
 80050b4:	490b      	ldr	r1, [pc, #44]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d001      	beq.n	80050ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40007000 	.word	0x40007000
 80050e4:	40023c00 	.word	0x40023c00

080050e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e06e      	b.n	80051d8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d108      	bne.n	8005114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d009      	beq.n	8005120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	61da      	str	r2, [r3, #28]
 8005112:	e005      	b.n	8005120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fd f8e0 	bl	8002300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005156:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	ea42 0103 	orr.w	r1, r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	0c1a      	lsrs	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f002 0204 	and.w	r2, r2, #4
 80051c6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_Transmit+0x22>
 80051fe:	2302      	movs	r3, #2
 8005200:	e126      	b.n	8005450 <HAL_SPI_Transmit+0x270>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520a:	f7fd faad 	bl	8002768 <HAL_GetTick>
 800520e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d002      	beq.n	8005226 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005220:	2302      	movs	r3, #2
 8005222:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005224:	e10b      	b.n	800543e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_SPI_Transmit+0x52>
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005236:	e102      	b.n	800543e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2203      	movs	r2, #3
 800523c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527e:	d10f      	bne.n	80052a0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800529e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	d007      	beq.n	80052be <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c6:	d14b      	bne.n	8005360 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_SPI_Transmit+0xf6>
 80052d0:	8afb      	ldrh	r3, [r7, #22]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d13e      	bne.n	8005354 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	881a      	ldrh	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	1c9a      	adds	r2, r3, #2
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052fa:	e02b      	b.n	8005354 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d112      	bne.n	8005330 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	881a      	ldrh	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	1c9a      	adds	r2, r3, #2
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	86da      	strh	r2, [r3, #54]	; 0x36
 800532e:	e011      	b.n	8005354 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005330:	f7fd fa1a 	bl	8002768 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d803      	bhi.n	8005348 <HAL_SPI_Transmit+0x168>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d102      	bne.n	800534e <HAL_SPI_Transmit+0x16e>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005352:	e074      	b.n	800543e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ce      	bne.n	80052fc <HAL_SPI_Transmit+0x11c>
 800535e:	e04c      	b.n	80053fa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_SPI_Transmit+0x18e>
 8005368:	8afb      	ldrh	r3, [r7, #22]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d140      	bne.n	80053f0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	7812      	ldrb	r2, [r2, #0]
 800537a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005394:	e02c      	b.n	80053f0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d113      	bne.n	80053cc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80053ca:	e011      	b.n	80053f0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053cc:	f7fd f9cc 	bl	8002768 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d803      	bhi.n	80053e4 <HAL_SPI_Transmit+0x204>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d102      	bne.n	80053ea <HAL_SPI_Transmit+0x20a>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053ee:	e026      	b.n	800543e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1cd      	bne.n	8005396 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f8b2 	bl	8005568 <SPI_EndRxTxTransaction>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	613b      	str	r3, [r7, #16]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e000      	b.n	800543e <HAL_SPI_Transmit+0x25e>
  }

error:
 800543c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800544e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005468:	f7fd f97e 	bl	8002768 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	4413      	add	r3, r2
 8005476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005478:	f7fd f976 	bl	8002768 <HAL_GetTick>
 800547c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800547e:	4b39      	ldr	r3, [pc, #228]	; (8005564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	015b      	lsls	r3, r3, #5
 8005484:	0d1b      	lsrs	r3, r3, #20
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800548e:	e054      	b.n	800553a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d050      	beq.n	800553a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005498:	f7fd f966 	bl	8002768 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d902      	bls.n	80054ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d13d      	bne.n	800552a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c6:	d111      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d0:	d004      	beq.n	80054dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d107      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f4:	d10f      	bne.n	8005516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e017      	b.n	800555a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	3b01      	subs	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d19b      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000018 	.word	0x20000018

08005568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005574:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <SPI_EndRxTxTransaction+0x7c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1b      	ldr	r2, [pc, #108]	; (80055e8 <SPI_EndRxTxTransaction+0x80>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0d5b      	lsrs	r3, r3, #21
 8005580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005584:	fb02 f303 	mul.w	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d112      	bne.n	80055ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2200      	movs	r2, #0
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff ff5a 	bl	8005458 <SPI_WaitFlagStateUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e00f      	b.n	80055da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	2b80      	cmp	r3, #128	; 0x80
 80055d2:	d0f2      	beq.n	80055ba <SPI_EndRxTxTransaction+0x52>
 80055d4:	e000      	b.n	80055d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80055d6:	bf00      	nop
  }

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000018 	.word	0x20000018
 80055e8:	165e9f81 	.word	0x165e9f81

080055ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005600:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005620:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005624:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	b29b      	uxth	r3, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	b29b      	uxth	r3, r3
 8005636:	4013      	ands	r3, r2
 8005638:	b29a      	uxth	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800564c:	b084      	sub	sp, #16
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	f107 0014 	add.w	r0, r7, #20
 800565a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	b004      	add	sp, #16
 800568a:	4770      	bx	lr

0800568c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800568c:	b480      	push	{r7}
 800568e:	b09b      	sub	sp, #108	; 0x6c
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	78db      	ldrb	r3, [r3, #3]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d81f      	bhi.n	80056fe <USB_ActivateEndpoint+0x72>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <USB_ActivateEndpoint+0x38>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	08005707 	.word	0x08005707
 80056d0:	080056e3 	.word	0x080056e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056e0:	e012      	b.n	8005708 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056ee:	e00b      	b.n	8005708 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80056f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80056fc:	e004      	b.n	8005708 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005704:	e000      	b.n	8005708 <USB_ActivateEndpoint+0x7c>
      break;
 8005706:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005740:	b29a      	uxth	r2, r3
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	4313      	orrs	r3, r2
 800574a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	7b1b      	ldrb	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f040 8149 	bne.w	8005a0c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8084 	beq.w	800588c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	011a      	lsls	r2, r3, #4
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	88db      	ldrh	r3, [r3, #6]
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	81fb      	strh	r3, [r7, #14]
 80057c6:	89fb      	ldrh	r3, [r7, #14]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01b      	beq.n	8005808 <USB_ActivateEndpoint+0x17c>
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	81bb      	strh	r3, [r7, #12]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	89bb      	ldrh	r3, [r7, #12]
 80057f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005800:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005804:	b29b      	uxth	r3, r3
 8005806:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	78db      	ldrb	r3, [r3, #3]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d020      	beq.n	8005852 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005826:	813b      	strh	r3, [r7, #8]
 8005828:	893b      	ldrh	r3, [r7, #8]
 800582a:	f083 0320 	eor.w	r3, r3, #32
 800582e:	813b      	strh	r3, [r7, #8]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	893b      	ldrh	r3, [r7, #8]
 800583c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	b29b      	uxth	r3, r3
 800584e:	8013      	strh	r3, [r2, #0]
 8005850:	e27f      	b.n	8005d52 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005868:	817b      	strh	r3, [r7, #10]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	897b      	ldrh	r3, [r7, #10]
 8005876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800587a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]
 800588a:	e262      	b.n	8005d52 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	4413      	add	r3, r2
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	011a      	lsls	r2, r3, #4
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	88db      	ldrh	r3, [r3, #6]
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	4413      	add	r3, r2
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	011a      	lsls	r2, r3, #4
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	4413      	add	r3, r2
 80058de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058e2:	623b      	str	r3, [r7, #32]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d112      	bne.n	8005912 <USB_ActivateEndpoint+0x286>
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	b29b      	uxth	r3, r3
 8005902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590a:	b29a      	uxth	r2, r3
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e02f      	b.n	8005972 <USB_ActivateEndpoint+0x2e6>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b3e      	cmp	r3, #62	; 0x3e
 8005918:	d813      	bhi.n	8005942 <USB_ActivateEndpoint+0x2b6>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	663b      	str	r3, [r7, #96]	; 0x60
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <USB_ActivateEndpoint+0x2a8>
 800592e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005930:	3301      	adds	r3, #1
 8005932:	663b      	str	r3, [r7, #96]	; 0x60
 8005934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005936:	b29b      	uxth	r3, r3
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	b29a      	uxth	r2, r3
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	e017      	b.n	8005972 <USB_ActivateEndpoint+0x2e6>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	663b      	str	r3, [r7, #96]	; 0x60
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <USB_ActivateEndpoint+0x2d0>
 8005956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005958:	3b01      	subs	r3, #1
 800595a:	663b      	str	r3, [r7, #96]	; 0x60
 800595c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800595e:	b29b      	uxth	r3, r3
 8005960:	029b      	lsls	r3, r3, #10
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29a      	uxth	r2, r3
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	83fb      	strh	r3, [r7, #30]
 8005980:	8bfb      	ldrh	r3, [r7, #30]
 8005982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01b      	beq.n	80059c2 <USB_ActivateEndpoint+0x336>
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a0:	83bb      	strh	r3, [r7, #28]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	441a      	add	r2, r3
 80059ac:	8bbb      	ldrh	r3, [r7, #28]
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d8:	837b      	strh	r3, [r7, #26]
 80059da:	8b7b      	ldrh	r3, [r7, #26]
 80059dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059e0:	837b      	strh	r3, [r7, #26]
 80059e2:	8b7b      	ldrh	r3, [r7, #26]
 80059e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059e8:	837b      	strh	r3, [r7, #26]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	441a      	add	r2, r3
 80059f4:	8b7b      	ldrh	r3, [r7, #26]
 80059f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	8013      	strh	r3, [r2, #0]
 8005a0a:	e1a2      	b.n	8005d52 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a58:	4413      	add	r3, r2
 8005a5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	011a      	lsls	r2, r3, #4
 8005a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	891b      	ldrh	r3, [r3, #8]
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8c:	4413      	add	r3, r2
 8005a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	011a      	lsls	r2, r3, #4
 8005a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	895b      	ldrh	r3, [r3, #10]
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 8091 	bne.w	8005bdc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ac8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01b      	beq.n	8005b0a <USB_ActivateEndpoint+0x47e>
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	441a      	add	r2, r3
 8005af4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01b      	beq.n	8005b5a <USB_ActivateEndpoint+0x4ce>
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	441a      	add	r2, r3
 8005b44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	e0ba      	b.n	8005d52 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005bec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01d      	beq.n	8005c34 <USB_ActivateEndpoint+0x5a8>
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	441a      	add	r2, r3
 8005c1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005c44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01d      	beq.n	8005c8c <USB_ActivateEndpoint+0x600>
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	441a      	add	r2, r3
 8005c74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d024      	beq.n	8005cde <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005caa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005cae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cb2:	f083 0320 	eor.w	r3, r3, #32
 8005cb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	441a      	add	r2, r3
 8005cc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
 8005cdc:	e01d      	b.n	8005d1a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005d52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	376c      	adds	r7, #108	; 0x6c
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b08d      	sub	sp, #52	; 0x34
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	7b1b      	ldrb	r3, [r3, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 808e 	bne.w	8005e90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d044      	beq.n	8005e06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	81bb      	strh	r3, [r7, #12]
 8005d8a:	89bb      	ldrh	r3, [r7, #12]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <USB_DeactivateEndpoint+0x6c>
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	817b      	strh	r3, [r7, #10]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	897b      	ldrh	r3, [r7, #10]
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de2:	813b      	strh	r3, [r7, #8]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	893b      	ldrh	r3, [r7, #8]
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]
 8005e04:	e192      	b.n	800612c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	827b      	strh	r3, [r7, #18]
 8005e14:	8a7b      	ldrh	r3, [r7, #18]
 8005e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01b      	beq.n	8005e56 <USB_DeactivateEndpoint+0xf6>
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	823b      	strh	r3, [r7, #16]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	8a3b      	ldrh	r3, [r7, #16]
 8005e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	81fb      	strh	r3, [r7, #14]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	89fb      	ldrh	r3, [r7, #14]
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]
 8005e8e:	e14d      	b.n	800612c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 80a5 	bne.w	8005fe4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	843b      	strh	r3, [r7, #32]
 8005ea8:	8c3b      	ldrh	r3, [r7, #32]
 8005eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01b      	beq.n	8005eea <USB_DeactivateEndpoint+0x18a>
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec8:	83fb      	strh	r3, [r7, #30]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	8bfb      	ldrh	r3, [r7, #30]
 8005ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	83bb      	strh	r3, [r7, #28]
 8005ef8:	8bbb      	ldrh	r3, [r7, #28]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01b      	beq.n	8005f3a <USB_DeactivateEndpoint+0x1da>
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f18:	837b      	strh	r3, [r7, #26]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	8b7b      	ldrh	r3, [r7, #26]
 8005f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	833b      	strh	r3, [r7, #24]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	441a      	add	r2, r3
 8005f5c:	8b3b      	ldrh	r3, [r7, #24]
 8005f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f88:	82fb      	strh	r3, [r7, #22]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	8afb      	ldrh	r3, [r7, #22]
 8005f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc0:	82bb      	strh	r3, [r7, #20]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	8abb      	ldrh	r3, [r7, #20]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]
 8005fe2:	e0a3      	b.n	800612c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ff2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <USB_DeactivateEndpoint+0x2d4>
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800602c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006030:	b29b      	uxth	r3, r3
 8006032:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006042:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01b      	beq.n	8006084 <USB_DeactivateEndpoint+0x324>
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	853b      	strh	r3, [r7, #40]	; 0x28
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	441a      	add	r2, r3
 80060a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	847b      	strh	r3, [r7, #34]	; 0x22
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	441a      	add	r2, r3
 8006116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	b29b      	uxth	r3, r3
 800612a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3734      	adds	r7, #52	; 0x34
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b0cc      	sub	sp, #304	; 0x130
 800613c:	af00      	add	r7, sp, #0
 800613e:	1d3b      	adds	r3, r7, #4
 8006140:	6018      	str	r0, [r3, #0]
 8006142:	463b      	mov	r3, r7
 8006144:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	f040 872e 	bne.w	8006fae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	463b      	mov	r3, r7
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	429a      	cmp	r2, r3
 8006160:	d905      	bls.n	800616e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006162:	463b      	mov	r3, r7
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800616c:	e004      	b.n	8006178 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	7b1b      	ldrb	r3, [r3, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d134      	bne.n	80061ec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6959      	ldr	r1, [r3, #20]
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	88da      	ldrh	r2, [r3, #6]
 800618e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006192:	b29b      	uxth	r3, r3
 8006194:	1d38      	adds	r0, r7, #4
 8006196:	6800      	ldr	r0, [r0, #0]
 8006198:	f001 fbee 	bl	8007978 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800619c:	f107 0310 	add.w	r3, r7, #16
 80061a0:	1d3a      	adds	r2, r7, #4
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	1d3b      	adds	r3, r7, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	f107 0210 	add.w	r2, r7, #16
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	440a      	add	r2, r1
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	011a      	lsls	r2, r3, #4
 80061c8:	f107 0310 	add.w	r3, r7, #16
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80061d4:	f107 030c 	add.w	r3, r7, #12
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	f000 beac 	b.w	8006f44 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80061ec:	463b      	mov	r3, r7
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	78db      	ldrb	r3, [r3, #3]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	f040 838c 	bne.w	8006910 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	429a      	cmp	r2, r3
 8006206:	f240 8330 	bls.w	800686a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800620a:	1d3b      	adds	r3, r7, #4
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	463b      	mov	r3, r7
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006224:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006228:	1d3b      	adds	r3, r7, #4
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	441a      	add	r2, r3
 8006236:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800623a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006242:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624a:	b29b      	uxth	r3, r3
 800624c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006258:	1ad2      	subs	r2, r2, r3
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 819e 	beq.w	80065b8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800627c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006280:	1d3a      	adds	r2, r7, #4
 8006282:	6812      	ldr	r2, [r2, #0]
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	463b      	mov	r3, r7
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d17a      	bne.n	8006386 <USB_EPStartXfer+0x24e>
 8006290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006294:	1d3a      	adds	r2, r7, #4
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	4619      	mov	r1, r3
 80062a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	440a      	add	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	011a      	lsls	r2, r3, #4
 80062bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4413      	add	r3, r2
 80062c4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80062c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d11a      	bne.n	800630c <USB_EPStartXfer+0x1d4>
 80062d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e062      	b.n	80063d2 <USB_EPStartXfer+0x29a>
 800630c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006310:	2b3e      	cmp	r3, #62	; 0x3e
 8006312:	d819      	bhi.n	8006348 <USB_EPStartXfer+0x210>
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	085b      	lsrs	r3, r3, #1
 800631a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <USB_EPStartXfer+0x1fc>
 800632a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800632e:	3301      	adds	r3, #1
 8006330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006334:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006338:	b29b      	uxth	r3, r3
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	b29a      	uxth	r2, r3
 800633e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	e044      	b.n	80063d2 <USB_EPStartXfer+0x29a>
 8006348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <USB_EPStartXfer+0x230>
 800635e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006362:	3b01      	subs	r3, #1
 8006364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800636c:	b29b      	uxth	r3, r3
 800636e:	029b      	lsls	r3, r3, #10
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637a:	b29a      	uxth	r2, r3
 800637c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e025      	b.n	80063d2 <USB_EPStartXfer+0x29a>
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d120      	bne.n	80063d2 <USB_EPStartXfer+0x29a>
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006398:	b29b      	uxth	r3, r3
 800639a:	4619      	mov	r1, r3
 800639c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	440a      	add	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	011a      	lsls	r2, r3, #4
 80063b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80063be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	895b      	ldrh	r3, [r3, #10]
 80063d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6959      	ldr	r1, [r3, #20]
 80063e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063ec:	1d38      	adds	r0, r7, #4
 80063ee:	6800      	ldr	r0, [r0, #0]
 80063f0:	f001 fac2 	bl	8007978 <USB_WritePMA>
            ep->xfer_buff += len;
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fe:	441a      	add	r2, r3
 8006400:	463b      	mov	r3, r7
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	d909      	bls.n	800642a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a1a      	ldr	r2, [r3, #32]
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	1ad2      	subs	r2, r2, r3
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	621a      	str	r2, [r3, #32]
 8006428:	e008      	b.n	800643c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006434:	463b      	mov	r3, r7
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2200      	movs	r2, #0
 800643a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d17a      	bne.n	800653c <USB_EPStartXfer+0x404>
 8006446:	f107 0318 	add.w	r3, r7, #24
 800644a:	1d3a      	adds	r2, r7, #4
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006458:	b29b      	uxth	r3, r3
 800645a:	4619      	mov	r1, r3
 800645c:	f107 0318 	add.w	r3, r7, #24
 8006460:	f107 0218 	add.w	r2, r7, #24
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	440a      	add	r2, r1
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	011a      	lsls	r2, r3, #4
 8006472:	f107 0318 	add.w	r3, r7, #24
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4413      	add	r3, r2
 800647a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800647e:	f107 0314 	add.w	r3, r7, #20
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d11a      	bne.n	80064c2 <USB_EPStartXfer+0x38a>
 800648c:	f107 0314 	add.w	r3, r7, #20
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	b29b      	uxth	r3, r3
 8006496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800649a:	b29a      	uxth	r2, r3
 800649c:	f107 0314 	add.w	r3, r7, #20
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e067      	b.n	8006592 <USB_EPStartXfer+0x45a>
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	2b3e      	cmp	r3, #62	; 0x3e
 80064c8:	d819      	bhi.n	80064fe <USB_EPStartXfer+0x3c6>
 80064ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <USB_EPStartXfer+0x3b2>
 80064e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064e4:	3301      	adds	r3, #1
 80064e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80064ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	029b      	lsls	r3, r3, #10
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	f107 0314 	add.w	r3, r7, #20
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	801a      	strh	r2, [r3, #0]
 80064fc:	e049      	b.n	8006592 <USB_EPStartXfer+0x45a>
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <USB_EPStartXfer+0x3e6>
 8006514:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006518:	3b01      	subs	r3, #1
 800651a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800651e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006522:	b29b      	uxth	r3, r3
 8006524:	029b      	lsls	r3, r3, #10
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006530:	b29a      	uxth	r2, r3
 8006532:	f107 0314 	add.w	r3, r7, #20
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e02a      	b.n	8006592 <USB_EPStartXfer+0x45a>
 800653c:	463b      	mov	r3, r7
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d125      	bne.n	8006592 <USB_EPStartXfer+0x45a>
 8006546:	f107 0320 	add.w	r3, r7, #32
 800654a:	1d3a      	adds	r2, r7, #4
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006558:	b29b      	uxth	r3, r3
 800655a:	4619      	mov	r1, r3
 800655c:	f107 0320 	add.w	r3, r7, #32
 8006560:	f107 0220 	add.w	r2, r7, #32
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	440a      	add	r2, r1
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	f107 0320 	add.w	r3, r7, #32
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4413      	add	r3, r2
 800657a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800657e:	f107 031c 	add.w	r3, r7, #28
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006588:	b29a      	uxth	r2, r3
 800658a:	f107 031c 	add.w	r3, r7, #28
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006592:	463b      	mov	r3, r7
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	891b      	ldrh	r3, [r3, #8]
 8006598:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6959      	ldr	r1, [r3, #20]
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065ac:	1d38      	adds	r0, r7, #4
 80065ae:	6800      	ldr	r0, [r0, #0]
 80065b0:	f001 f9e2 	bl	8007978 <USB_WritePMA>
 80065b4:	f000 bcc6 	b.w	8006f44 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d164      	bne.n	800668c <USB_EPStartXfer+0x554>
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065c8:	1d3b      	adds	r3, r7, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d6:	4413      	add	r3, r2
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	011a      	lsls	r2, r3, #4
 80065e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ea:	647b      	str	r3, [r7, #68]	; 0x44
 80065ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d112      	bne.n	800661a <USB_EPStartXfer+0x4e2>
 80065f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006612:	b29a      	uxth	r2, r3
 8006614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	e057      	b.n	80066ca <USB_EPStartXfer+0x592>
 800661a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661e:	2b3e      	cmp	r3, #62	; 0x3e
 8006620:	d817      	bhi.n	8006652 <USB_EPStartXfer+0x51a>
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800662c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <USB_EPStartXfer+0x50a>
 8006638:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800663c:	3301      	adds	r3, #1
 800663e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006646:	b29b      	uxth	r3, r3
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	b29a      	uxth	r2, r3
 800664c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e03b      	b.n	80066ca <USB_EPStartXfer+0x592>
 8006652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800665c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <USB_EPStartXfer+0x53a>
 8006668:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800666c:	3b01      	subs	r3, #1
 800666e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006672:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29b      	uxth	r3, r3
 800667c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006684:	b29a      	uxth	r2, r3
 8006686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e01e      	b.n	80066ca <USB_EPStartXfer+0x592>
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d119      	bne.n	80066ca <USB_EPStartXfer+0x592>
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	653b      	str	r3, [r7, #80]	; 0x50
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066aa:	4413      	add	r3, r2
 80066ac:	653b      	str	r3, [r7, #80]	; 0x50
 80066ae:	463b      	mov	r3, r7
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	011a      	lsls	r2, r3, #4
 80066b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066ca:	463b      	mov	r3, r7
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	891b      	ldrh	r3, [r3, #8]
 80066d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6959      	ldr	r1, [r3, #20]
 80066da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066e4:	1d38      	adds	r0, r7, #4
 80066e6:	6800      	ldr	r0, [r0, #0]
 80066e8:	f001 f946 	bl	8007978 <USB_WritePMA>
            ep->xfer_buff += len;
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f6:	441a      	add	r2, r3
 80066f8:	463b      	mov	r3, r7
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066fe:	463b      	mov	r3, r7
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	d909      	bls.n	8006722 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800670e:	463b      	mov	r3, r7
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006718:	1ad2      	subs	r2, r2, r3
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	621a      	str	r2, [r3, #32]
 8006720:	e008      	b.n	8006734 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006722:	463b      	mov	r3, r7
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006734:	1d3b      	adds	r3, r7, #4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	643b      	str	r3, [r7, #64]	; 0x40
 800673a:	463b      	mov	r3, r7
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d164      	bne.n	800680e <USB_EPStartXfer+0x6d6>
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	63bb      	str	r3, [r7, #56]	; 0x38
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006752:	b29b      	uxth	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	4413      	add	r3, r2
 800675a:	63bb      	str	r3, [r7, #56]	; 0x38
 800675c:	463b      	mov	r3, r7
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	011a      	lsls	r2, r3, #4
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	4413      	add	r3, r2
 8006768:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
 800676e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d112      	bne.n	800679c <USB_EPStartXfer+0x664>
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006780:	b29a      	uxth	r2, r3
 8006782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006794:	b29a      	uxth	r2, r3
 8006796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	e054      	b.n	8006846 <USB_EPStartXfer+0x70e>
 800679c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a0:	2b3e      	cmp	r3, #62	; 0x3e
 80067a2:	d817      	bhi.n	80067d4 <USB_EPStartXfer+0x69c>
 80067a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <USB_EPStartXfer+0x68c>
 80067ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067be:	3301      	adds	r3, #1
 80067c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	029b      	lsls	r3, r3, #10
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	e038      	b.n	8006846 <USB_EPStartXfer+0x70e>
 80067d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d104      	bne.n	80067f4 <USB_EPStartXfer+0x6bc>
 80067ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067ee:	3b01      	subs	r3, #1
 80067f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	029b      	lsls	r3, r3, #10
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006806:	b29a      	uxth	r2, r3
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	e01b      	b.n	8006846 <USB_EPStartXfer+0x70e>
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d116      	bne.n	8006846 <USB_EPStartXfer+0x70e>
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	4413      	add	r3, r2
 8006828:	643b      	str	r3, [r7, #64]	; 0x40
 800682a:	463b      	mov	r3, r7
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	011a      	lsls	r2, r3, #4
 8006832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006834:	4413      	add	r3, r2
 8006836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	b29a      	uxth	r2, r3
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006846:	463b      	mov	r3, r7
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	895b      	ldrh	r3, [r3, #10]
 800684c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6959      	ldr	r1, [r3, #20]
 8006856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685a:	b29b      	uxth	r3, r3
 800685c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006860:	1d38      	adds	r0, r7, #4
 8006862:	6800      	ldr	r0, [r0, #0]
 8006864:	f001 f888 	bl	8007978 <USB_WritePMA>
 8006868:	e36c      	b.n	8006f44 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800686a:	463b      	mov	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006892:	1d3b      	adds	r3, r7, #4
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068be:	1d3b      	adds	r3, r7, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068cc:	4413      	add	r3, r2
 80068ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068d0:	463b      	mov	r3, r7
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	011a      	lsls	r2, r3, #4
 80068d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068da:	4413      	add	r3, r2
 80068dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80068e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068ec:	463b      	mov	r3, r7
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	891b      	ldrh	r3, [r3, #8]
 80068f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6959      	ldr	r1, [r3, #20]
 80068fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006900:	b29b      	uxth	r3, r3
 8006902:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006906:	1d38      	adds	r0, r7, #4
 8006908:	6800      	ldr	r0, [r0, #0]
 800690a:	f001 f835 	bl	8007978 <USB_WritePMA>
 800690e:	e319      	b.n	8006f44 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006910:	1d3b      	adds	r3, r7, #4
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	463b      	mov	r3, r7
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006948:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	b29b      	uxth	r3, r3
 8006952:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6a1a      	ldr	r2, [r3, #32]
 800695a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	463b      	mov	r3, r7
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8162 	beq.w	8006c46 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006982:	1d3b      	adds	r3, r7, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800698a:	463b      	mov	r3, r7
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d164      	bne.n	8006a5e <USB_EPStartXfer+0x926>
 8006994:	1d3b      	adds	r3, r7, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	67bb      	str	r3, [r7, #120]	; 0x78
 800699a:	1d3b      	adds	r3, r7, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a8:	4413      	add	r3, r2
 80069aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ac:	463b      	mov	r3, r7
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	011a      	lsls	r2, r3, #4
 80069b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b6:	4413      	add	r3, r2
 80069b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069bc:	677b      	str	r3, [r7, #116]	; 0x74
 80069be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d112      	bne.n	80069ec <USB_EPStartXfer+0x8b4>
 80069c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d4:	801a      	strh	r2, [r3, #0]
 80069d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e057      	b.n	8006a9c <USB_EPStartXfer+0x964>
 80069ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f0:	2b3e      	cmp	r3, #62	; 0x3e
 80069f2:	d817      	bhi.n	8006a24 <USB_EPStartXfer+0x8ec>
 80069f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80069fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <USB_EPStartXfer+0x8dc>
 8006a0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a0e:	3301      	adds	r3, #1
 8006a10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	029b      	lsls	r3, r3, #10
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	e03b      	b.n	8006a9c <USB_EPStartXfer+0x964>
 8006a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <USB_EPStartXfer+0x90c>
 8006a3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	029b      	lsls	r3, r3, #10
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	e01e      	b.n	8006a9c <USB_EPStartXfer+0x964>
 8006a5e:	463b      	mov	r3, r7
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	785b      	ldrb	r3, [r3, #1]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d119      	bne.n	8006a9c <USB_EPStartXfer+0x964>
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a78:	4413      	add	r3, r2
 8006a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a7e:	463b      	mov	r3, r7
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	011a      	lsls	r2, r3, #4
 8006a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	895b      	ldrh	r3, [r3, #10]
 8006aa2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6959      	ldr	r1, [r3, #20]
 8006aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ab6:	1d38      	adds	r0, r7, #4
 8006ab8:	6800      	ldr	r0, [r0, #0]
 8006aba:	f000 ff5d 	bl	8007978 <USB_WritePMA>
          ep->xfer_buff += len;
 8006abe:	463b      	mov	r3, r7
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695a      	ldr	r2, [r3, #20]
 8006ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac8:	441a      	add	r2, r3
 8006aca:	463b      	mov	r3, r7
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6a1a      	ldr	r2, [r3, #32]
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d909      	bls.n	8006af4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006ae0:	463b      	mov	r3, r7
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	463b      	mov	r3, r7
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	621a      	str	r2, [r3, #32]
 8006af2:	e008      	b.n	8006b06 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006af4:	463b      	mov	r3, r7
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006afe:	463b      	mov	r3, r7
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 821a 	beq.w	8006f44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d164      	bne.n	8006be4 <USB_EPStartXfer+0xaac>
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b20:	1d3b      	adds	r3, r7, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b2e:	4413      	add	r3, r2
 8006b30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b32:	463b      	mov	r3, r7
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	011a      	lsls	r2, r3, #4
 8006b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b42:	667b      	str	r3, [r7, #100]	; 0x64
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d112      	bne.n	8006b72 <USB_EPStartXfer+0xa3a>
 8006b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e057      	b.n	8006c22 <USB_EPStartXfer+0xaea>
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	2b3e      	cmp	r3, #62	; 0x3e
 8006b78:	d817      	bhi.n	8006baa <USB_EPStartXfer+0xa72>
 8006b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <USB_EPStartXfer+0xa62>
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	029b      	lsls	r3, r3, #10
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e03b      	b.n	8006c22 <USB_EPStartXfer+0xaea>
 8006baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bae:	095b      	lsrs	r3, r3, #5
 8006bb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <USB_EPStartXfer+0xa92>
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	029b      	lsls	r3, r3, #10
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e01e      	b.n	8006c22 <USB_EPStartXfer+0xaea>
 8006be4:	463b      	mov	r3, r7
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d119      	bne.n	8006c22 <USB_EPStartXfer+0xaea>
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	673b      	str	r3, [r7, #112]	; 0x70
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c02:	4413      	add	r3, r2
 8006c04:	673b      	str	r3, [r7, #112]	; 0x70
 8006c06:	463b      	mov	r3, r7
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	011a      	lsls	r2, r3, #4
 8006c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c22:	463b      	mov	r3, r7
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	891b      	ldrh	r3, [r3, #8]
 8006c28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6959      	ldr	r1, [r3, #20]
 8006c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c3c:	1d38      	adds	r0, r7, #4
 8006c3e:	6800      	ldr	r0, [r0, #0]
 8006c40:	f000 fe9a 	bl	8007978 <USB_WritePMA>
 8006c44:	e17e      	b.n	8006f44 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c46:	463b      	mov	r3, r7
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d16f      	bne.n	8006d30 <USB_EPStartXfer+0xbf8>
 8006c50:	1d3b      	adds	r3, r7, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c58:	1d3b      	adds	r3, r7, #4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c68:	4413      	add	r3, r2
 8006c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c6e:	463b      	mov	r3, r7
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	011a      	lsls	r2, r3, #4
 8006c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d116      	bne.n	8006cba <USB_EPStartXfer+0xb82>
 8006c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	e05f      	b.n	8006d7a <USB_EPStartXfer+0xc42>
 8006cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8006cc0:	d818      	bhi.n	8006cf4 <USB_EPStartXfer+0xbbc>
 8006cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <USB_EPStartXfer+0xbaa>
 8006cd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cdc:	3301      	adds	r3, #1
 8006cde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ce2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	029b      	lsls	r3, r3, #10
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e042      	b.n	8006d7a <USB_EPStartXfer+0xc42>
 8006cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <USB_EPStartXfer+0xbdc>
 8006d0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006d14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	029b      	lsls	r3, r3, #10
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	e024      	b.n	8006d7a <USB_EPStartXfer+0xc42>
 8006d30:	463b      	mov	r3, r7
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d11f      	bne.n	8006d7a <USB_EPStartXfer+0xc42>
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d52:	4413      	add	r3, r2
 8006d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d58:	463b      	mov	r3, r7
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	011a      	lsls	r2, r3, #4
 8006d60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d64:	4413      	add	r3, r2
 8006d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	891b      	ldrh	r3, [r3, #8]
 8006d80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6959      	ldr	r1, [r3, #20]
 8006d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d94:	1d38      	adds	r0, r7, #4
 8006d96:	6800      	ldr	r0, [r0, #0]
 8006d98:	f000 fdee 	bl	8007978 <USB_WritePMA>
          ep->xfer_buff += len;
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da6:	441a      	add	r2, r3
 8006da8:	463b      	mov	r3, r7
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006dae:	463b      	mov	r3, r7
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6a1a      	ldr	r2, [r3, #32]
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d909      	bls.n	8006dd2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6a1a      	ldr	r2, [r3, #32]
 8006dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	463b      	mov	r3, r7
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	621a      	str	r2, [r3, #32]
 8006dd0:	e008      	b.n	8006de4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006ddc:	463b      	mov	r3, r7
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2200      	movs	r2, #0
 8006de2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80ab 	beq.w	8006f44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dee:	1d3b      	adds	r3, r7, #4
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d16f      	bne.n	8006ee0 <USB_EPStartXfer+0xda8>
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e08:	1d3b      	adds	r3, r7, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e18:	4413      	add	r3, r2
 8006e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e1e:	463b      	mov	r3, r7
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	011a      	lsls	r2, r3, #4
 8006e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d116      	bne.n	8006e6a <USB_EPStartXfer+0xd32>
 8006e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	e05b      	b.n	8006f22 <USB_EPStartXfer+0xdea>
 8006e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e70:	d818      	bhi.n	8006ea4 <USB_EPStartXfer+0xd6c>
 8006e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <USB_EPStartXfer+0xd5a>
 8006e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	029b      	lsls	r3, r3, #10
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	e03e      	b.n	8006f22 <USB_EPStartXfer+0xdea>
 8006ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <USB_EPStartXfer+0xd8c>
 8006eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	029b      	lsls	r3, r3, #10
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	e020      	b.n	8006f22 <USB_EPStartXfer+0xdea>
 8006ee0:	463b      	mov	r3, r7
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d11b      	bne.n	8006f22 <USB_EPStartXfer+0xdea>
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efa:	4413      	add	r3, r2
 8006efc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	011a      	lsls	r2, r3, #4
 8006f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f22:	463b      	mov	r3, r7
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	895b      	ldrh	r3, [r3, #10]
 8006f28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6959      	ldr	r1, [r3, #20]
 8006f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f3c:	1d38      	adds	r0, r7, #4
 8006f3e:	6800      	ldr	r0, [r0, #0]
 8006f40:	f000 fd1a 	bl	8007978 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f44:	1d3b      	adds	r3, r7, #4
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	463b      	mov	r3, r7
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f107 020a 	add.w	r2, r7, #10
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f62:	8013      	strh	r3, [r2, #0]
 8006f64:	f107 030a 	add.w	r3, r7, #10
 8006f68:	f107 020a 	add.w	r2, r7, #10
 8006f6c:	8812      	ldrh	r2, [r2, #0]
 8006f6e:	f082 0210 	eor.w	r2, r2, #16
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	f107 030a 	add.w	r3, r7, #10
 8006f78:	f107 020a 	add.w	r2, r7, #10
 8006f7c:	8812      	ldrh	r2, [r2, #0]
 8006f7e:	f082 0220 	eor.w	r2, r2, #32
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	463b      	mov	r3, r7
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	f107 030a 	add.w	r3, r7, #10
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8013      	strh	r3, [r2, #0]
 8006fac:	e3b5      	b.n	800771a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006fae:	463b      	mov	r3, r7
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	7b1b      	ldrb	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 8090 	bne.w	80070da <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006fba:	463b      	mov	r3, r7
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d90e      	bls.n	8006fe8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006fca:	463b      	mov	r3, r7
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	619a      	str	r2, [r3, #24]
 8006fe6:	e008      	b.n	8006ffa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006fe8:	463b      	mov	r3, r7
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006ffa:	1d3b      	adds	r3, r7, #4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007002:	1d3b      	adds	r3, r7, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700a:	b29b      	uxth	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007012:	4413      	add	r3, r2
 8007014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007018:	463b      	mov	r3, r7
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	011a      	lsls	r2, r3, #4
 8007020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007024:	4413      	add	r3, r2
 8007026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800702a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800702e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d116      	bne.n	8007064 <USB_EPStartXfer+0xf2c>
 8007036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007042:	b29a      	uxth	r2, r3
 8007044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705a:	b29a      	uxth	r2, r3
 800705c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	e32c      	b.n	80076be <USB_EPStartXfer+0x1586>
 8007064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007068:	2b3e      	cmp	r3, #62	; 0x3e
 800706a:	d818      	bhi.n	800709e <USB_EPStartXfer+0xf66>
 800706c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <USB_EPStartXfer+0xf54>
 8007082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007086:	3301      	adds	r3, #1
 8007088:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800708c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007090:	b29b      	uxth	r3, r3
 8007092:	029b      	lsls	r3, r3, #10
 8007094:	b29a      	uxth	r2, r3
 8007096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	e30f      	b.n	80076be <USB_EPStartXfer+0x1586>
 800709e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <USB_EPStartXfer+0xf86>
 80070b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070b8:	3b01      	subs	r3, #1
 80070ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80070be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	029b      	lsls	r3, r3, #10
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	e2f1      	b.n	80076be <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80070da:	463b      	mov	r3, r7
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	f040 818f 	bne.w	8007404 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070e6:	463b      	mov	r3, r7
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d175      	bne.n	80071dc <USB_EPStartXfer+0x10a4>
 80070f0:	1d3b      	adds	r3, r7, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070f8:	1d3b      	adds	r3, r7, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007108:	4413      	add	r3, r2
 800710a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800710e:	463b      	mov	r3, r7
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	011a      	lsls	r2, r3, #4
 8007116:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800711a:	4413      	add	r3, r2
 800711c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007124:	463b      	mov	r3, r7
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d116      	bne.n	800715c <USB_EPStartXfer+0x1024>
 800712e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713a:	b29a      	uxth	r2, r3
 800713c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007152:	b29a      	uxth	r2, r3
 8007154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	e065      	b.n	8007228 <USB_EPStartXfer+0x10f0>
 800715c:	463b      	mov	r3, r7
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b3e      	cmp	r3, #62	; 0x3e
 8007164:	d81a      	bhi.n	800719c <USB_EPStartXfer+0x1064>
 8007166:	463b      	mov	r3, r7
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007172:	463b      	mov	r3, r7
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <USB_EPStartXfer+0x1052>
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007184:	3301      	adds	r3, #1
 8007186:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29a      	uxth	r2, r3
 8007194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007198:	801a      	strh	r2, [r3, #0]
 800719a:	e045      	b.n	8007228 <USB_EPStartXfer+0x10f0>
 800719c:	463b      	mov	r3, r7
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80071a8:	463b      	mov	r3, r7
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <USB_EPStartXfer+0x1088>
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ba:	3b01      	subs	r3, #1
 80071bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	029b      	lsls	r3, r3, #10
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e025      	b.n	8007228 <USB_EPStartXfer+0x10f0>
 80071dc:	463b      	mov	r3, r7
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d120      	bne.n	8007228 <USB_EPStartXfer+0x10f0>
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071ee:	1d3b      	adds	r3, r7, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071fe:	4413      	add	r3, r2
 8007200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007204:	463b      	mov	r3, r7
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	011a      	lsls	r2, r3, #4
 800720c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007210:	4413      	add	r3, r2
 8007212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007216:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800721a:	463b      	mov	r3, r7
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	b29a      	uxth	r2, r3
 8007222:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	1d3b      	adds	r3, r7, #4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007230:	463b      	mov	r3, r7
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d175      	bne.n	8007326 <USB_EPStartXfer+0x11ee>
 800723a:	1d3b      	adds	r3, r7, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007242:	1d3b      	adds	r3, r7, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724a:	b29b      	uxth	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007252:	4413      	add	r3, r2
 8007254:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	011a      	lsls	r2, r3, #4
 8007260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007264:	4413      	add	r3, r2
 8007266:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800726a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800726e:	463b      	mov	r3, r7
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d116      	bne.n	80072a6 <USB_EPStartXfer+0x116e>
 8007278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007284:	b29a      	uxth	r2, r3
 8007286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800728a:	801a      	strh	r2, [r3, #0]
 800728c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e061      	b.n	800736a <USB_EPStartXfer+0x1232>
 80072a6:	463b      	mov	r3, r7
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b3e      	cmp	r3, #62	; 0x3e
 80072ae:	d81a      	bhi.n	80072e6 <USB_EPStartXfer+0x11ae>
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	085b      	lsrs	r3, r3, #1
 80072b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072bc:	463b      	mov	r3, r7
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d004      	beq.n	80072d4 <USB_EPStartXfer+0x119c>
 80072ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072ce:	3301      	adds	r3, #1
 80072d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072d8:	b29b      	uxth	r3, r3
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	b29a      	uxth	r2, r3
 80072de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072e2:	801a      	strh	r2, [r3, #0]
 80072e4:	e041      	b.n	800736a <USB_EPStartXfer+0x1232>
 80072e6:	463b      	mov	r3, r7
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072f2:	463b      	mov	r3, r7
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <USB_EPStartXfer+0x11d2>
 8007300:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007304:	3b01      	subs	r3, #1
 8007306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800730a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800730e:	b29b      	uxth	r3, r3
 8007310:	029b      	lsls	r3, r3, #10
 8007312:	b29b      	uxth	r3, r3
 8007314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e021      	b.n	800736a <USB_EPStartXfer+0x1232>
 8007326:	463b      	mov	r3, r7
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d11c      	bne.n	800736a <USB_EPStartXfer+0x1232>
 8007330:	1d3b      	adds	r3, r7, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007338:	b29b      	uxth	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007340:	4413      	add	r3, r2
 8007342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007346:	463b      	mov	r3, r7
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	011a      	lsls	r2, r3, #4
 800734e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007352:	4413      	add	r3, r2
 8007354:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800735c:	463b      	mov	r3, r7
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	b29a      	uxth	r2, r3
 8007364:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007368:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800736a:	463b      	mov	r3, r7
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 81a4 	beq.w	80076be <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	463b      	mov	r3, r7
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800738a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800738e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <USB_EPStartXfer+0x126a>
 8007396:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10d      	bne.n	80073be <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073a2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 8187 	bne.w	80076be <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80073b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f040 8180 	bne.w	80076be <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80073be:	1d3b      	adds	r3, r7, #4
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	463b      	mov	r3, r7
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80073dc:	1d3b      	adds	r3, r7, #4
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	463b      	mov	r3, r7
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80073ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073fe:	b29b      	uxth	r3, r3
 8007400:	8013      	strh	r3, [r2, #0]
 8007402:	e15c      	b.n	80076be <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007404:	463b      	mov	r3, r7
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	78db      	ldrb	r3, [r3, #3]
 800740a:	2b01      	cmp	r3, #1
 800740c:	f040 8155 	bne.w	80076ba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	463b      	mov	r3, r7
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	429a      	cmp	r2, r3
 800741e:	d90e      	bls.n	800743e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007420:	463b      	mov	r3, r7
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800742a:	463b      	mov	r3, r7
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007434:	1ad2      	subs	r2, r2, r3
 8007436:	463b      	mov	r3, r7
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	619a      	str	r2, [r3, #24]
 800743c:	e008      	b.n	8007450 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800743e:	463b      	mov	r3, r7
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007448:	463b      	mov	r3, r7
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2200      	movs	r2, #0
 800744e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007450:	463b      	mov	r3, r7
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d16f      	bne.n	800753a <USB_EPStartXfer+0x1402>
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746a:	b29b      	uxth	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007472:	4413      	add	r3, r2
 8007474:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007478:	463b      	mov	r3, r7
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	011a      	lsls	r2, r3, #4
 8007480:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007484:	4413      	add	r3, r2
 8007486:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800748a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800748e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d116      	bne.n	80074c4 <USB_EPStartXfer+0x138c>
 8007496:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	e05f      	b.n	8007584 <USB_EPStartXfer+0x144c>
 80074c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c8:	2b3e      	cmp	r3, #62	; 0x3e
 80074ca:	d818      	bhi.n	80074fe <USB_EPStartXfer+0x13c6>
 80074cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <USB_EPStartXfer+0x13b4>
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074e6:	3301      	adds	r3, #1
 80074e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80074ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	029b      	lsls	r3, r3, #10
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074fa:	801a      	strh	r2, [r3, #0]
 80074fc:	e042      	b.n	8007584 <USB_EPStartXfer+0x144c>
 80074fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750c:	f003 031f 	and.w	r3, r3, #31
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <USB_EPStartXfer+0x13e6>
 8007514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007518:	3b01      	subs	r3, #1
 800751a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800751e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007522:	b29b      	uxth	r3, r3
 8007524:	029b      	lsls	r3, r3, #10
 8007526:	b29b      	uxth	r3, r3
 8007528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800752c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007530:	b29a      	uxth	r2, r3
 8007532:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e024      	b.n	8007584 <USB_EPStartXfer+0x144c>
 800753a:	463b      	mov	r3, r7
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d11f      	bne.n	8007584 <USB_EPStartXfer+0x144c>
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800754c:	1d3b      	adds	r3, r7, #4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755c:	4413      	add	r3, r2
 800755e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007562:	463b      	mov	r3, r7
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	011a      	lsls	r2, r3, #4
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756e:	4413      	add	r3, r2
 8007570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007574:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	1d3b      	adds	r3, r7, #4
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800758c:	463b      	mov	r3, r7
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d16f      	bne.n	8007676 <USB_EPStartXfer+0x153e>
 8007596:	1d3b      	adds	r3, r7, #4
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800759e:	1d3b      	adds	r3, r7, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ae:	4413      	add	r3, r2
 80075b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075b4:	463b      	mov	r3, r7
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	011a      	lsls	r2, r3, #4
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d116      	bne.n	8007600 <USB_EPStartXfer+0x14c8>
 80075d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075de:	b29a      	uxth	r2, r3
 80075e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e05e      	b.n	80076be <USB_EPStartXfer+0x1586>
 8007600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007604:	2b3e      	cmp	r3, #62	; 0x3e
 8007606:	d818      	bhi.n	800763a <USB_EPStartXfer+0x1502>
 8007608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <USB_EPStartXfer+0x14f0>
 800761e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007622:	3301      	adds	r3, #1
 8007624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007628:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800762c:	b29b      	uxth	r3, r3
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	b29a      	uxth	r2, r3
 8007632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	e041      	b.n	80076be <USB_EPStartXfer+0x1586>
 800763a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007648:	f003 031f 	and.w	r3, r3, #31
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <USB_EPStartXfer+0x1522>
 8007650:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007654:	3b01      	subs	r3, #1
 8007656:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800765a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800765e:	b29b      	uxth	r3, r3
 8007660:	029b      	lsls	r3, r3, #10
 8007662:	b29b      	uxth	r3, r3
 8007664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766c:	b29a      	uxth	r2, r3
 800766e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	e023      	b.n	80076be <USB_EPStartXfer+0x1586>
 8007676:	463b      	mov	r3, r7
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d11e      	bne.n	80076be <USB_EPStartXfer+0x1586>
 8007680:	1d3b      	adds	r3, r7, #4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007688:	b29b      	uxth	r3, r3
 800768a:	461a      	mov	r2, r3
 800768c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007690:	4413      	add	r3, r2
 8007692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007696:	463b      	mov	r3, r7
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	011a      	lsls	r2, r3, #4
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	4413      	add	r3, r2
 80076a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	e001      	b.n	80076be <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e02e      	b.n	800771c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076be:	1d3b      	adds	r3, r7, #4
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	463b      	mov	r3, r7
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80076dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80076e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076e4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80076e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80076ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80076f4:	1d3b      	adds	r3, r7, #4
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	463b      	mov	r3, r7
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800770a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007716:	b29b      	uxth	r3, r3
 8007718:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	785b      	ldrb	r3, [r3, #1]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d020      	beq.n	800777a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800774e:	81bb      	strh	r3, [r7, #12]
 8007750:	89bb      	ldrh	r3, [r7, #12]
 8007752:	f083 0310 	eor.w	r3, r3, #16
 8007756:	81bb      	strh	r3, [r7, #12]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	89bb      	ldrh	r3, [r7, #12]
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]
 8007778:	e01f      	b.n	80077ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007790:	81fb      	strh	r3, [r7, #14]
 8007792:	89fb      	ldrh	r3, [r7, #14]
 8007794:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007798:	81fb      	strh	r3, [r7, #14]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	441a      	add	r2, r3
 80077a4:	89fb      	ldrh	r3, [r7, #14]
 80077a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr

080077c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b087      	sub	sp, #28
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	7b1b      	ldrb	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 809d 	bne.w	8007914 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d04c      	beq.n	800787c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	823b      	strh	r3, [r7, #16]
 80077f0:	8a3b      	ldrh	r3, [r7, #16]
 80077f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01b      	beq.n	8007832 <USB_EPClearStall+0x6c>
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007810:	81fb      	strh	r3, [r7, #14]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	89fb      	ldrh	r3, [r7, #14]
 800781e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800782a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800782e:	b29b      	uxth	r3, r3
 8007830:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	78db      	ldrb	r3, [r3, #3]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d06c      	beq.n	8007914 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	81bb      	strh	r3, [r7, #12]
 8007852:	89bb      	ldrh	r3, [r7, #12]
 8007854:	f083 0320 	eor.w	r3, r3, #32
 8007858:	81bb      	strh	r3, [r7, #12]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	441a      	add	r2, r3
 8007864:	89bb      	ldrh	r3, [r7, #12]
 8007866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007876:	b29b      	uxth	r3, r3
 8007878:	8013      	strh	r3, [r2, #0]
 800787a:	e04b      	b.n	8007914 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	82fb      	strh	r3, [r7, #22]
 800788a:	8afb      	ldrh	r3, [r7, #22]
 800788c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01b      	beq.n	80078cc <USB_EPClearStall+0x106>
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	82bb      	strh	r3, [r7, #20]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	441a      	add	r2, r3
 80078b6:	8abb      	ldrh	r3, [r7, #20]
 80078b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e2:	827b      	strh	r3, [r7, #18]
 80078e4:	8a7b      	ldrh	r3, [r7, #18]
 80078e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078ea:	827b      	strh	r3, [r7, #18]
 80078ec:	8a7b      	ldrh	r3, [r7, #18]
 80078ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078f2:	827b      	strh	r3, [r7, #18]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	441a      	add	r2, r3
 80078fe:	8a7b      	ldrh	r3, [r7, #18]
 8007900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800790c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007910:	b29b      	uxth	r3, r3
 8007912:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr

08007920 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2280      	movs	r2, #128	; 0x80
 8007936:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr

08007946 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr

0800795a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007968:	b29b      	uxth	r3, r3
 800796a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800796c:	68fb      	ldr	r3, [r7, #12]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr

08007978 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007978:	b480      	push	{r7}
 800797a:	b08d      	sub	sp, #52	; 0x34
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	460b      	mov	r3, r1
 8007988:	80fb      	strh	r3, [r7, #6]
 800798a:	4613      	mov	r3, r2
 800798c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800798e:	88bb      	ldrh	r3, [r7, #4]
 8007990:	3301      	adds	r3, #1
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	005a      	lsls	r2, r3, #1
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b0:	e01e      	b.n	80079f0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	3301      	adds	r3, #1
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	3302      	adds	r3, #2
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	3302      	adds	r3, #2
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	3301      	adds	r3, #1
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	3b01      	subs	r3, #1
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1dd      	bne.n	80079b2 <USB_WritePMA+0x3a>
  }
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3734      	adds	r7, #52	; 0x34
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr

08007a02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b08b      	sub	sp, #44	; 0x2c
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	461a      	mov	r2, r3
 8007a10:	460b      	mov	r3, r1
 8007a12:	80fb      	strh	r3, [r7, #6]
 8007a14:	4613      	mov	r3, r2
 8007a16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a18:	88bb      	ldrh	r3, [r7, #4]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	005a      	lsls	r2, r3, #1
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a34:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3a:	e01b      	b.n	8007a74 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	3302      	adds	r3, #2
 8007a48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	3301      	adds	r3, #1
 8007a56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	3301      	adds	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	3b01      	subs	r3, #1
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e0      	bne.n	8007a3c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007a7a:	88bb      	ldrh	r3, [r7, #4]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d007      	beq.n	8007a96 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	701a      	strb	r2, [r3, #0]
  }
}
 8007a96:	bf00      	nop
 8007a98:	372c      	adds	r7, #44	; 0x2c
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr

08007aa0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	7c1b      	ldrb	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d115      	bne.n	8007ae4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007abc:	2202      	movs	r2, #2
 8007abe:	2181      	movs	r1, #129	; 0x81
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 fe74 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fe6a 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007ae2:	e012      	b.n	8007b0a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	2181      	movs	r1, #129	; 0x81
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fe5f 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007af6:	2340      	movs	r3, #64	; 0x40
 8007af8:	2202      	movs	r2, #2
 8007afa:	2101      	movs	r1, #1
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fe56 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	2182      	movs	r1, #130	; 0x82
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 fe4c 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007b1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b20:	f001 ff6c 	bl	80099fc <USBD_static_malloc>
 8007b24:	4602      	mov	r2, r0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b36:	2301      	movs	r3, #1
 8007b38:	73fb      	strb	r3, [r7, #15]
 8007b3a:	e026      	b.n	8007b8a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b42:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7c1b      	ldrb	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b70:	2101      	movs	r1, #1
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 ff0c 	bl	8009990 <USBD_LL_PrepareReceive>
 8007b78:	e007      	b.n	8007b8a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b80:	2340      	movs	r3, #64	; 0x40
 8007b82:	2101      	movs	r1, #1
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 ff03 	bl	8009990 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ba4:	2181      	movs	r1, #129	; 0x81
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fe27 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 fe20 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007bc2:	2182      	movs	r1, #130	; 0x82
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fe18 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 ff12 	bl	8009a14 <USBD_static_free>
    pdev->pClassData = NULL;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b086      	sub	sp, #24
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c12:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d039      	beq.n	8007ca0 <USBD_CDC_Setup+0x9e>
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d17f      	bne.n	8007d30 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	88db      	ldrh	r3, [r3, #6]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d029      	beq.n	8007c8c <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da11      	bge.n	8007c66 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007c4e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	88d2      	ldrh	r2, [r2, #6]
 8007c54:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c56:	6939      	ldr	r1, [r7, #16]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	88db      	ldrh	r3, [r3, #6]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f993 	bl	8008f8a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007c64:	e06b      	b.n	8007d3e <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	785a      	ldrb	r2, [r3, #1]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	88db      	ldrh	r3, [r3, #6]
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c7c:	6939      	ldr	r1, [r7, #16]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	88db      	ldrh	r3, [r3, #6]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f9ae 	bl	8008fe6 <USBD_CtlPrepareRx>
    break;
 8007c8a:	e058      	b.n	8007d3e <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	7850      	ldrb	r0, [r2, #1]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	4798      	blx	r3
    break;
 8007c9e:	e04e      	b.n	8007d3e <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	2b0b      	cmp	r3, #11
 8007ca6:	d02e      	beq.n	8007d06 <USBD_CDC_Setup+0x104>
 8007ca8:	2b0b      	cmp	r3, #11
 8007caa:	dc38      	bgt.n	8007d1e <USBD_CDC_Setup+0x11c>
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <USBD_CDC_Setup+0xb4>
 8007cb0:	2b0a      	cmp	r3, #10
 8007cb2:	d014      	beq.n	8007cde <USBD_CDC_Setup+0xdc>
 8007cb4:	e033      	b.n	8007d1e <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d107      	bne.n	8007cd0 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007cc0:	f107 030c 	add.w	r3, r7, #12
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 f95e 	bl	8008f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007cce:	e02e      	b.n	8007d2e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 f8ef 	bl	8008eb6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	e027      	b.n	8007d2e <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d107      	bne.n	8007cf8 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007ce8:	f107 030f 	add.w	r3, r7, #15
 8007cec:	2201      	movs	r2, #1
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f94a 	bl	8008f8a <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007cf6:	e01a      	b.n	8007d2e <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 f8db 	bl	8008eb6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007d00:	2302      	movs	r3, #2
 8007d02:	75fb      	strb	r3, [r7, #23]
      break;
 8007d04:	e013      	b.n	8007d2e <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d00d      	beq.n	8007d2c <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 f8cf 	bl	8008eb6 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007d1c:	e006      	b.n	8007d2c <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 f8c8 	bl	8008eb6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d26:	2302      	movs	r3, #2
 8007d28:	75fb      	strb	r3, [r7, #23]
      break;
 8007d2a:	e000      	b.n	8007d2e <USBD_CDC_Setup+0x12c>
      break;
 8007d2c:	bf00      	nop
    }
    break;
 8007d2e:	e006      	b.n	8007d3e <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f8bf 	bl	8008eb6 <USBD_CtlError>
    ret = USBD_FAIL;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	75fb      	strb	r3, [r7, #23]
    break;
 8007d3c:	bf00      	nop
  }

  return ret;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007d62:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d03a      	beq.n	8007de4 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	331c      	adds	r3, #28
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d029      	beq.n	8007dd8 <USBD_CDC_DataIn+0x90>
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	331c      	adds	r3, #28
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	78f9      	ldrb	r1, [r7, #3]
 8007d98:	68b8      	ldr	r0, [r7, #8]
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4403      	add	r3, r0
 8007da4:	3338      	adds	r3, #56	; 0x38
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dac:	fb03 f301 	mul.w	r3, r3, r1
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d110      	bne.n	8007dd8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	331c      	adds	r3, #28
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007dca:	78f9      	ldrb	r1, [r7, #3]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fdba 	bl	800994a <USBD_LL_Transmit>
 8007dd6:	e003      	b.n	8007de0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007de4:	2302      	movs	r3, #2
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fde5 	bl	80099d6 <USBD_LL_GetRxDataSize>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00d      	beq.n	8007e3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e32:	4611      	mov	r1, r2
 8007e34:	4798      	blx	r3

    return USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e000      	b.n	8007e3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e3a:	2302      	movs	r3, #2
  }
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e52:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d015      	beq.n	8007e8a <USBD_CDC_EP0_RxReady+0x46>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e64:	2bff      	cmp	r3, #255	; 0xff
 8007e66:	d010      	beq.n	8007e8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007e76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e7e:	b292      	uxth	r2, r2
 8007e80:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2243      	movs	r2, #67	; 0x43
 8007ea0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007ea2:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	200000ac 	.word	0x200000ac

08007eb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2243      	movs	r2, #67	; 0x43
 8007ec0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007ec2:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bc80      	pop	{r7}
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	20000068 	.word	0x20000068

08007ed4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2243      	movs	r2, #67	; 0x43
 8007ee0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007ee2:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	200000f0 	.word	0x200000f0

08007ef4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	220a      	movs	r2, #10
 8007f00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f02:	4b03      	ldr	r3, [pc, #12]	; (8007f10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bc80      	pop	{r7}
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	20000024 	.word	0x20000024

08007f14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr

08007f40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f5e:	88fa      	ldrh	r2, [r7, #6]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr

08007f72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr

08007f98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007fa6:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01c      	beq.n	8007fec <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d115      	bne.n	8007fe8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2181      	movs	r1, #129	; 0x81
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fcb3 	bl	800994a <USBD_LL_Transmit>

      return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e002      	b.n	8007fee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007fec:	2302      	movs	r3, #2
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008004:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800800c:	2b00      	cmp	r3, #0
 800800e:	d017      	beq.n	8008040 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	7c1b      	ldrb	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d109      	bne.n	800802c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800801e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008022:	2101      	movs	r1, #1
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 fcb3 	bl	8009990 <USBD_LL_PrepareReceive>
 800802a:	e007      	b.n	800803c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008032:	2340      	movs	r3, #64	; 0x40
 8008034:	2101      	movs	r1, #1
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fcaa 	bl	8009990 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	e000      	b.n	8008042 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008040:	2302      	movs	r3, #2
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	4613      	mov	r3, r2
 8008056:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800805e:	2302      	movs	r3, #2
 8008060:	e01a      	b.n	8008098 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	79fa      	ldrb	r2, [r7, #7]
 800808e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f001 fb17 	bl	80096c4 <USBD_LL_Init>

  return USBD_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d006      	beq.n	80080c2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
 80080c0:	e001      	b.n	80080c6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080c2:	2302      	movs	r3, #2
 80080c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 fb4c 	bl	8009778 <USBD_LL_Start>

  return USBD_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800810a:	2302      	movs	r3, #2
 800810c:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00c      	beq.n	8008132 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	4611      	mov	r1, r2
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008132:	7bfb      	ldrb	r3, [r7, #15]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fe62 	bl	8008e3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008188:	461a      	mov	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008196:	f003 031f 	and.w	r3, r3, #31
 800819a:	2b02      	cmp	r3, #2
 800819c:	d016      	beq.n	80081cc <USBD_LL_SetupStage+0x6a>
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d81c      	bhi.n	80081dc <USBD_LL_SetupStage+0x7a>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <USBD_LL_SetupStage+0x4a>
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d008      	beq.n	80081bc <USBD_LL_SetupStage+0x5a>
 80081aa:	e017      	b.n	80081dc <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f9c5 	bl	8008544 <USBD_StdDevReq>
    break;
 80081ba:	e01a      	b.n	80081f2 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa27 	bl	8008618 <USBD_StdItfReq>
    break;
 80081ca:	e012      	b.n	80081f2 <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fa67 	bl	80086a8 <USBD_StdEPReq>
    break;
 80081da:	e00a      	b.n	80081f2 <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80081e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fb24 	bl	8009838 <USBD_LL_StallEP>
    break;
 80081f0:	bf00      	nop
  }

  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	460b      	mov	r3, r1
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800820a:	7afb      	ldrb	r3, [r7, #11]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d14b      	bne.n	80082a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008216:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800821e:	2b03      	cmp	r3, #3
 8008220:	d134      	bne.n	800828c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	429a      	cmp	r2, r3
 800822c:	d919      	bls.n	8008262 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	1ad2      	subs	r2, r2, r3
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008244:	429a      	cmp	r2, r3
 8008246:	d203      	bcs.n	8008250 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800824c:	b29b      	uxth	r3, r3
 800824e:	e002      	b.n	8008256 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8008254:	b29b      	uxth	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fee1 	bl	8009022 <USBD_CtlContinueRx>
 8008260:	e038      	b.n	80082d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008274:	2b03      	cmp	r3, #3
 8008276:	d105      	bne.n	8008284 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fede 	bl	8009046 <USBD_CtlSendStatus>
 800828a:	e023      	b.n	80082d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008292:	2b05      	cmp	r3, #5
 8008294:	d11e      	bne.n	80082d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800829e:	2100      	movs	r1, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f001 fac9 	bl	8009838 <USBD_LL_StallEP>
 80082a6:	e015      	b.n	80082d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00d      	beq.n	80082d0 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d108      	bne.n	80082d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	7afa      	ldrb	r2, [r7, #11]
 80082c8:	4611      	mov	r1, r2
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	4798      	blx	r3
 80082ce:	e001      	b.n	80082d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082d0:	2302      	movs	r3, #2
 80082d2:	e000      	b.n	80082d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	460b      	mov	r3, r1
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d17f      	bne.n	80083f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3314      	adds	r3, #20
 80082f6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d15c      	bne.n	80083bc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	429a      	cmp	r2, r3
 800830c:	d915      	bls.n	800833a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	b29b      	uxth	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fe4b 	bl	8008fc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800832c:	2300      	movs	r3, #0
 800832e:	2200      	movs	r2, #0
 8008330:	2100      	movs	r1, #0
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f001 fb2c 	bl	8009990 <USBD_LL_PrepareReceive>
 8008338:	e04e      	b.n	80083d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	6912      	ldr	r2, [r2, #16]
 8008342:	fbb3 f1f2 	udiv	r1, r3, r2
 8008346:	fb02 f201 	mul.w	r2, r2, r1
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d11c      	bne.n	800838a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008358:	429a      	cmp	r2, r3
 800835a:	d316      	bcc.n	800838a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008366:	429a      	cmp	r2, r3
 8008368:	d20f      	bcs.n	800838a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800836a:	2200      	movs	r2, #0
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fe27 	bl	8008fc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f001 fb04 	bl	8009990 <USBD_LL_PrepareReceive>
 8008388:	e026      	b.n	80083d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800839c:	2b03      	cmp	r3, #3
 800839e:	d105      	bne.n	80083ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083ac:	2180      	movs	r1, #128	; 0x80
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f001 fa42 	bl	8009838 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fe59 	bl	800906c <USBD_CtlReceiveStatus>
 80083ba:	e00d      	b.n	80083d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d004      	beq.n	80083d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80083d0:	2180      	movs	r1, #128	; 0x80
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f001 fa30 	bl	8009838 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d11d      	bne.n	800841e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff fe81 	bl	80080ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80083f0:	e015      	b.n	800841e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8008404:	2b03      	cmp	r3, #3
 8008406:	d108      	bne.n	800841a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	7afa      	ldrb	r2, [r7, #11]
 8008412:	4611      	mov	r1, r2
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	4798      	blx	r3
 8008418:	e001      	b.n	800841e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800841a:	2302      	movs	r3, #2
 800841c:	e000      	b.n	8008420 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008430:	2340      	movs	r3, #64	; 0x40
 8008432:	2200      	movs	r2, #0
 8008434:	2100      	movs	r1, #0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 f9b9 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2240      	movs	r2, #64	; 0x40
 8008448:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800844c:	2340      	movs	r3, #64	; 0x40
 800844e:	2200      	movs	r2, #0
 8008450:	2180      	movs	r1, #128	; 0x80
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 f9ab 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2240      	movs	r2, #64	; 0x40
 8008462:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6852      	ldr	r2, [r2, #4]
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	4611      	mov	r1, r2
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	4798      	blx	r3
  }

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bc80      	pop	{r7}
 80084c6:	4770      	bx	lr

080084c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2204      	movs	r2, #4
 80084e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800851e:	2b03      	cmp	r3, #3
 8008520:	d10b      	bne.n	800853a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d005      	beq.n	800856a <USBD_StdDevReq+0x26>
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d84f      	bhi.n	8008602 <USBD_StdDevReq+0xbe>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <USBD_StdDevReq+0x36>
 8008566:	2b20      	cmp	r3, #32
 8008568:	d14b      	bne.n	8008602 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
    break;
 8008578:	e048      	b.n	800860c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b09      	cmp	r3, #9
 8008580:	d839      	bhi.n	80085f6 <USBD_StdDevReq+0xb2>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <USBD_StdDevReq+0x44>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085d9 	.word	0x080085d9
 800858c:	080085ed 	.word	0x080085ed
 8008590:	080085f7 	.word	0x080085f7
 8008594:	080085e3 	.word	0x080085e3
 8008598:	080085f7 	.word	0x080085f7
 800859c:	080085bb 	.word	0x080085bb
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085f7 	.word	0x080085f7
 80085a8:	080085cf 	.word	0x080085cf
 80085ac:	080085c5 	.word	0x080085c5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f9da 	bl	800896c <USBD_GetDescriptor>
      break;
 80085b8:	e022      	b.n	8008600 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 facf 	bl	8008b60 <USBD_SetAddress>
      break;
 80085c2:	e01d      	b.n	8008600 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fb0e 	bl	8008be8 <USBD_SetConfig>
      break;
 80085cc:	e018      	b.n	8008600 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fb97 	bl	8008d04 <USBD_GetConfig>
      break;
 80085d6:	e013      	b.n	8008600 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fbc7 	bl	8008d6e <USBD_GetStatus>
      break;
 80085e0:	e00e      	b.n	8008600 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fbf5 	bl	8008dd4 <USBD_SetFeature>
      break;
 80085ea:	e009      	b.n	8008600 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc04 	bl	8008dfc <USBD_ClrFeature>
      break;
 80085f4:	e004      	b.n	8008600 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fc5c 	bl	8008eb6 <USBD_CtlError>
      break;
 80085fe:	bf00      	nop
    }
    break;
 8008600:	e004      	b.n	800860c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fc56 	bl	8008eb6 <USBD_CtlError>
    break;
 800860a:	bf00      	nop
  }

  return ret;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop

08008618 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800862e:	2b40      	cmp	r3, #64	; 0x40
 8008630:	d005      	beq.n	800863e <USBD_StdItfReq+0x26>
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d82e      	bhi.n	8008694 <USBD_StdItfReq+0x7c>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <USBD_StdItfReq+0x26>
 800863a:	2b20      	cmp	r3, #32
 800863c:	d12a      	bne.n	8008694 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008644:	3b01      	subs	r3, #1
 8008646:	2b02      	cmp	r3, #2
 8008648:	d81d      	bhi.n	8008686 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b01      	cmp	r3, #1
 8008652:	d813      	bhi.n	800867c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	88db      	ldrh	r3, [r3, #6]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d110      	bne.n	8008690 <USBD_StdItfReq+0x78>
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10d      	bne.n	8008690 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fce6 	bl	8009046 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800867a:	e009      	b.n	8008690 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fc19 	bl	8008eb6 <USBD_CtlError>
      break;
 8008684:	e004      	b.n	8008690 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fc14 	bl	8008eb6 <USBD_CtlError>
      break;
 800868e:	e000      	b.n	8008692 <USBD_StdItfReq+0x7a>
      break;
 8008690:	bf00      	nop
    }
    break;
 8008692:	e004      	b.n	800869e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc0d 	bl	8008eb6 <USBD_CtlError>
    break;
 800869c:	bf00      	nop
  }

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d007      	beq.n	80086d8 <USBD_StdEPReq+0x30>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	f200 8144 	bhi.w	8008956 <USBD_StdEPReq+0x2ae>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <USBD_StdEPReq+0x40>
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	f040 813f 	bne.w	8008956 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
    break;
 80086e6:	e13b      	b.n	8008960 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d10a      	bne.n	800870a <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	e12b      	b.n	8008962 <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b03      	cmp	r3, #3
 8008710:	d007      	beq.n	8008722 <USBD_StdEPReq+0x7a>
 8008712:	2b03      	cmp	r3, #3
 8008714:	f300 8119 	bgt.w	800894a <USBD_StdEPReq+0x2a2>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d072      	beq.n	8008802 <USBD_StdEPReq+0x15a>
 800871c:	2b01      	cmp	r3, #1
 800871e:	d03a      	beq.n	8008796 <USBD_StdEPReq+0xee>
 8008720:	e113      	b.n	800894a <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008728:	2b02      	cmp	r3, #2
 800872a:	d002      	beq.n	8008732 <USBD_StdEPReq+0x8a>
 800872c:	2b03      	cmp	r3, #3
 800872e:	d015      	beq.n	800875c <USBD_StdEPReq+0xb4>
 8008730:	e02b      	b.n	800878a <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <USBD_StdEPReq+0xaa>
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d009      	beq.n	8008752 <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f878 	bl	8009838 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008748:	2180      	movs	r1, #128	; 0x80
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 f874 	bl	8009838 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008750:	e020      	b.n	8008794 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fbae 	bl	8008eb6 <USBD_CtlError>
        break;
 800875a:	e01b      	b.n	8008794 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10e      	bne.n	8008782 <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <USBD_StdEPReq+0xda>
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d008      	beq.n	8008782 <USBD_StdEPReq+0xda>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	88db      	ldrh	r3, [r3, #6]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f85b 	bl	8009838 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fc5f 	bl	8009046 <USBD_CtlSendStatus>

        break;
 8008788:	e004      	b.n	8008794 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fb92 	bl	8008eb6 <USBD_CtlError>
        break;
 8008792:	bf00      	nop
      }
      break;
 8008794:	e0de      	b.n	8008954 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800879c:	2b02      	cmp	r3, #2
 800879e:	d002      	beq.n	80087a6 <USBD_StdEPReq+0xfe>
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d015      	beq.n	80087d0 <USBD_StdEPReq+0x128>
 80087a4:	e026      	b.n	80087f4 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00c      	beq.n	80087c6 <USBD_StdEPReq+0x11e>
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b80      	cmp	r3, #128	; 0x80
 80087b0:	d009      	beq.n	80087c6 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 f83e 	bl	8009838 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80087bc:	2180      	movs	r1, #128	; 0x80
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f83a 	bl	8009838 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80087c4:	e01c      	b.n	8008800 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fb74 	bl	8008eb6 <USBD_CtlError>
        break;
 80087ce:	e017      	b.n	8008800 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d112      	bne.n	80087fe <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 f845 	bl	8009876 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc2a 	bl	8009046 <USBD_CtlSendStatus>
        }
        break;
 80087f2:	e004      	b.n	80087fe <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fb5d 	bl	8008eb6 <USBD_CtlError>
        break;
 80087fc:	e000      	b.n	8008800 <USBD_StdEPReq+0x158>
        break;
 80087fe:	bf00      	nop
      }
      break;
 8008800:	e0a8      	b.n	8008954 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008808:	2b02      	cmp	r3, #2
 800880a:	d002      	beq.n	8008812 <USBD_StdEPReq+0x16a>
 800880c:	2b03      	cmp	r3, #3
 800880e:	d031      	beq.n	8008874 <USBD_StdEPReq+0x1cc>
 8008810:	e095      	b.n	800893e <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <USBD_StdEPReq+0x180>
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b80      	cmp	r3, #128	; 0x80
 800881c:	d004      	beq.n	8008828 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fb48 	bl	8008eb6 <USBD_CtlError>
          break;
 8008826:	e08f      	b.n	8008948 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800882c:	2b00      	cmp	r3, #0
 800882e:	da0b      	bge.n	8008848 <USBD_StdEPReq+0x1a0>
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	3310      	adds	r3, #16
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	3304      	adds	r3, #4
 8008846:	e00a      	b.n	800885e <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2202      	movs	r2, #2
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb8c 	bl	8008f8a <USBD_CtlSendData>
          break;
 8008872:	e069      	b.n	8008948 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8008874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	da11      	bge.n	80088a0 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800887c:	7bbb      	ldrb	r3, [r7, #14]
 800887e:	f003 020f 	and.w	r2, r3, #15
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	3318      	adds	r3, #24
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d117      	bne.n	80088c6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fb0c 	bl	8008eb6 <USBD_CtlError>
            break;
 800889e:	e053      	b.n	8008948 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088a0:	7bbb      	ldrb	r3, [r7, #14]
 80088a2:	f003 020f 	and.w	r2, r3, #15
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d104      	bne.n	80088c6 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 faf9 	bl	8008eb6 <USBD_CtlError>
            break;
 80088c4:	e040      	b.n	8008948 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80088c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da0b      	bge.n	80088e6 <USBD_StdEPReq+0x23e>
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	3310      	adds	r3, #16
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	4413      	add	r3, r2
 80088e2:	3304      	adds	r3, #4
 80088e4:	e00a      	b.n	80088fc <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80088ec:	4613      	mov	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	4413      	add	r3, r2
 80088fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <USBD_StdEPReq+0x262>
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	2b80      	cmp	r3, #128	; 0x80
 8008908:	d103      	bne.n	8008912 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	e00e      	b.n	8008930 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 ffcc 	bl	80098b4 <USBD_LL_IsStallEP>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2201      	movs	r2, #1
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	e002      	b.n	8008930 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2202      	movs	r2, #2
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fb27 	bl	8008f8a <USBD_CtlSendData>
          break;
 800893c:	e004      	b.n	8008948 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fab8 	bl	8008eb6 <USBD_CtlError>
        break;
 8008946:	bf00      	nop
      }
      break;
 8008948:	e004      	b.n	8008954 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fab2 	bl	8008eb6 <USBD_CtlError>
      break;
 8008952:	bf00      	nop
    }
    break;
 8008954:	e004      	b.n	8008960 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 faac 	bl	8008eb6 <USBD_CtlError>
    break;
 800895e:	bf00      	nop
  }

  return ret;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	885b      	ldrh	r3, [r3, #2]
 800897a:	0a1b      	lsrs	r3, r3, #8
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	2b06      	cmp	r3, #6
 8008982:	f200 80c9 	bhi.w	8008b18 <USBD_GetDescriptor+0x1ac>
 8008986:	a201      	add	r2, pc, #4	; (adr r2, 800898c <USBD_GetDescriptor+0x20>)
 8008988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898c:	080089a9 	.word	0x080089a9
 8008990:	080089c1 	.word	0x080089c1
 8008994:	08008a01 	.word	0x08008a01
 8008998:	08008b19 	.word	0x08008b19
 800899c:	08008b19 	.word	0x08008b19
 80089a0:	08008ac5 	.word	0x08008ac5
 80089a4:	08008aeb 	.word	0x08008aeb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 010a 	add.w	r1, r7, #10
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
    break;
 80089be:	e0b0      	b.n	8008b22 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7c1b      	ldrb	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10d      	bne.n	80089e4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	f107 020a 	add.w	r2, r7, #10
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3301      	adds	r3, #1
 80089de:	2202      	movs	r2, #2
 80089e0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80089e2:	e09e      	b.n	8008b22 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	f107 020a 	add.w	r2, r7, #10
 80089f0:	4610      	mov	r0, r2
 80089f2:	4798      	blx	r3
 80089f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	2202      	movs	r2, #2
 80089fc:	701a      	strb	r2, [r3, #0]
    break;
 80089fe:	e090      	b.n	8008b22 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	885b      	ldrh	r3, [r3, #2]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b05      	cmp	r3, #5
 8008a08:	d856      	bhi.n	8008ab8 <USBD_GetDescriptor+0x14c>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <USBD_GetDescriptor+0xa4>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a29 	.word	0x08008a29
 8008a14:	08008a41 	.word	0x08008a41
 8008a18:	08008a59 	.word	0x08008a59
 8008a1c:	08008a71 	.word	0x08008a71
 8008a20:	08008a89 	.word	0x08008a89
 8008a24:	08008aa1 	.word	0x08008aa1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 010a 	add.w	r1, r7, #10
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
      break;
 8008a3e:	e040      	b.n	8008ac2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	7c12      	ldrb	r2, [r2, #16]
 8008a4c:	f107 010a 	add.w	r1, r7, #10
 8008a50:	4610      	mov	r0, r2
 8008a52:	4798      	blx	r3
 8008a54:	60f8      	str	r0, [r7, #12]
      break;
 8008a56:	e034      	b.n	8008ac2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 010a 	add.w	r1, r7, #10
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
      break;
 8008a6e:	e028      	b.n	8008ac2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	7c12      	ldrb	r2, [r2, #16]
 8008a7c:	f107 010a 	add.w	r1, r7, #10
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	60f8      	str	r0, [r7, #12]
      break;
 8008a86:	e01c      	b.n	8008ac2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	7c12      	ldrb	r2, [r2, #16]
 8008a94:	f107 010a 	add.w	r1, r7, #10
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
      break;
 8008a9e:	e010      	b.n	8008ac2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7c12      	ldrb	r2, [r2, #16]
 8008aac:	f107 010a 	add.w	r1, r7, #10
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
      break;
 8008ab6:	e004      	b.n	8008ac2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9fb 	bl	8008eb6 <USBD_CtlError>
      return;
 8008ac0:	e04b      	b.n	8008b5a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008ac2:	e02e      	b.n	8008b22 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7c1b      	ldrb	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d109      	bne.n	8008ae0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad4:	f107 020a 	add.w	r2, r7, #10
 8008ad8:	4610      	mov	r0, r2
 8008ada:	4798      	blx	r3
 8008adc:	60f8      	str	r0, [r7, #12]
      break;
 8008ade:	e020      	b.n	8008b22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f9e7 	bl	8008eb6 <USBD_CtlError>
      return;
 8008ae8:	e037      	b.n	8008b5a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	7c1b      	ldrb	r3, [r3, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10d      	bne.n	8008b0e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	f107 020a 	add.w	r2, r7, #10
 8008afe:	4610      	mov	r0, r2
 8008b00:	4798      	blx	r3
 8008b02:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	2207      	movs	r2, #7
 8008b0a:	701a      	strb	r2, [r3, #0]
      break;
 8008b0c:	e009      	b.n	8008b22 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f9d0 	bl	8008eb6 <USBD_CtlError>
      return;
 8008b16:	e020      	b.n	8008b5a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f9cb 	bl	8008eb6 <USBD_CtlError>
    return;
 8008b20:	e01b      	b.n	8008b5a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008b22:	897b      	ldrh	r3, [r7, #10]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d011      	beq.n	8008b4c <USBD_GetDescriptor+0x1e0>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	88db      	ldrh	r3, [r3, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00d      	beq.n	8008b4c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	88da      	ldrh	r2, [r3, #6]
 8008b34:	897b      	ldrh	r3, [r7, #10]
 8008b36:	4293      	cmp	r3, r2
 8008b38:	bf28      	it	cs
 8008b3a:	4613      	movcs	r3, r2
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008b40:	897b      	ldrh	r3, [r7, #10]
 8008b42:	461a      	mov	r2, r3
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fa1f 	bl	8008f8a <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	88db      	ldrh	r3, [r3, #6]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d102      	bne.n	8008b5a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fa76 	bl	8009046 <USBD_CtlSendStatus>
  }
}
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	889b      	ldrh	r3, [r3, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d130      	bne.n	8008bd4 <USBD_SetAddress+0x74>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88db      	ldrh	r3, [r3, #6]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d12c      	bne.n	8008bd4 <USBD_SetAddress+0x74>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b80:	d828      	bhi.n	8008bd4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d104      	bne.n	8008ba2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f98b 	bl	8008eb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba0:	e01d      	b.n	8008bde <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	7bfa      	ldrb	r2, [r7, #15]
 8008ba6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 feac 	bl	800990c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa46 	bl	8009046 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc8:	e009      	b.n	8008bde <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd2:	e004      	b.n	8008bde <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f96d 	bl	8008eb6 <USBD_CtlError>
  }
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
	...

08008be8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	4b41      	ldr	r3, [pc, #260]	; (8008d00 <USBD_SetConfig+0x118>)
 8008bfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bfc:	4b40      	ldr	r3, [pc, #256]	; (8008d00 <USBD_SetConfig+0x118>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d904      	bls.n	8008c0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f955 	bl	8008eb6 <USBD_CtlError>
 8008c0c:	e075      	b.n	8008cfa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_SetConfig+0x36>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d023      	beq.n	8008c64 <USBD_SetConfig+0x7c>
 8008c1c:	e062      	b.n	8008ce4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008c1e:	4b38      	ldr	r3, [pc, #224]	; (8008d00 <USBD_SetConfig+0x118>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01a      	beq.n	8008c5c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008c26:	4b36      	ldr	r3, [pc, #216]	; (8008d00 <USBD_SetConfig+0x118>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2203      	movs	r2, #3
 8008c34:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c38:	4b31      	ldr	r3, [pc, #196]	; (8008d00 <USBD_SetConfig+0x118>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff fa5d 	bl	80080fe <USBD_SetClassConfig>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d104      	bne.n	8008c54 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f932 	bl	8008eb6 <USBD_CtlError>
          return;
 8008c52:	e052      	b.n	8008cfa <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f9f6 	bl	8009046 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008c5a:	e04e      	b.n	8008cfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9f2 	bl	8009046 <USBD_CtlSendStatus>
      break;
 8008c62:	e04a      	b.n	8008cfa <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c64:	4b26      	ldr	r3, [pc, #152]	; (8008d00 <USBD_SetConfig+0x118>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d112      	bne.n	8008c92 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008c74:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <USBD_SetConfig+0x118>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c7e:	4b20      	ldr	r3, [pc, #128]	; (8008d00 <USBD_SetConfig+0x118>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff fa59 	bl	800813c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f9db 	bl	8009046 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008c90:	e033      	b.n	8008cfa <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008c92:	4b1b      	ldr	r3, [pc, #108]	; (8008d00 <USBD_SetConfig+0x118>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d01d      	beq.n	8008cdc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff fa47 	bl	800813c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cae:	4b14      	ldr	r3, [pc, #80]	; (8008d00 <USBD_SetConfig+0x118>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cb8:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <USBD_SetConfig+0x118>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff fa1d 	bl	80080fe <USBD_SetClassConfig>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d104      	bne.n	8008cd4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f8f2 	bl	8008eb6 <USBD_CtlError>
          return;
 8008cd2:	e012      	b.n	8008cfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f9b6 	bl	8009046 <USBD_CtlSendStatus>
      break;
 8008cda:	e00e      	b.n	8008cfa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f9b2 	bl	8009046 <USBD_CtlSendStatus>
      break;
 8008ce2:	e00a      	b.n	8008cfa <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f8e5 	bl	8008eb6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008cec:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <USBD_SetConfig+0x118>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff fa22 	bl	800813c <USBD_ClrClassConfig>
      break;
 8008cf8:	bf00      	nop
    }
  }
}
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	2000038c 	.word	0x2000038c

08008d04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	88db      	ldrh	r3, [r3, #6]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d004      	beq.n	8008d20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8cc 	bl	8008eb6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008d1e:	e022      	b.n	8008d66 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	dc02      	bgt.n	8008d30 <USBD_GetConfig+0x2c>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dc03      	bgt.n	8008d36 <USBD_GetConfig+0x32>
 8008d2e:	e015      	b.n	8008d5c <USBD_GetConfig+0x58>
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d00b      	beq.n	8008d4c <USBD_GetConfig+0x48>
 8008d34:	e012      	b.n	8008d5c <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	2201      	movs	r2, #1
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f920 	bl	8008f8a <USBD_CtlSendData>
      break;
 8008d4a:	e00c      	b.n	8008d66 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	2201      	movs	r2, #1
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f918 	bl	8008f8a <USBD_CtlSendData>
      break;
 8008d5a:	e004      	b.n	8008d66 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 8008d5c:	6839      	ldr	r1, [r7, #0]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8a9 	bl	8008eb6 <USBD_CtlError>
      break;
 8008d64:	bf00      	nop
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d81e      	bhi.n	8008dc2 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	88db      	ldrh	r3, [r3, #6]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d004      	beq.n	8008d96 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f891 	bl	8008eb6 <USBD_CtlError>
      break;
 8008d94:	e01a      	b.n	8008dcc <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d005      	beq.n	8008db2 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f043 0202 	orr.w	r2, r3, #2
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	330c      	adds	r3, #12
 8008db6:	2202      	movs	r2, #2
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f8e5 	bl	8008f8a <USBD_CtlSendData>
    break;
 8008dc0:	e004      	b.n	8008dcc <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f876 	bl	8008eb6 <USBD_CtlError>
    break;
 8008dca:	bf00      	nop
  }
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	885b      	ldrh	r3, [r3, #2]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d106      	bne.n	8008df4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f929 	bl	8009046 <USBD_CtlSendStatus>
  }

}
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d80b      	bhi.n	8008e2a <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d10c      	bne.n	8008e34 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f90f 	bl	8009046 <USBD_CtlSendStatus>
    }
    break;
 8008e28:	e004      	b.n	8008e34 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f842 	bl	8008eb6 <USBD_CtlError>
    break;
 8008e32:	e000      	b.n	8008e36 <USBD_ClrFeature+0x3a>
    break;
 8008e34:	bf00      	nop
  }
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	785a      	ldrb	r2, [r3, #1]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	3303      	adds	r3, #3
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	3304      	adds	r3, #4
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	3305      	adds	r3, #5
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	021b      	lsls	r3, r3, #8
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	3306      	adds	r3, #6
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	3307      	adds	r3, #7
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4413      	add	r3, r2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	80da      	strh	r2, [r3, #6]

}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008ec0:	2180      	movs	r1, #128	; 0x80
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fcb8 	bl	8009838 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008ec8:	2100      	movs	r1, #0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fcb4 	bl	8009838 <USBD_LL_StallEP>
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d032      	beq.n	8008f54 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 f834 	bl	8008f5c <USBD_GetLen>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	75fa      	strb	r2, [r7, #23]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	7812      	ldrb	r2, [r2, #0]
 8008f12:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	75fa      	strb	r2, [r7, #23]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4413      	add	r3, r2
 8008f20:	2203      	movs	r2, #3
 8008f22:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f24:	e012      	b.n	8008f4c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	60fa      	str	r2, [r7, #12]
 8008f2c:	7dfa      	ldrb	r2, [r7, #23]
 8008f2e:	1c51      	adds	r1, r2, #1
 8008f30:	75f9      	strb	r1, [r7, #23]
 8008f32:	4611      	mov	r1, r2
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	440a      	add	r2, r1
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	75fa      	strb	r2, [r7, #23]
 8008f42:	461a      	mov	r2, r3
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4413      	add	r3, r2
 8008f48:	2200      	movs	r2, #0
 8008f4a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e8      	bne.n	8008f26 <USBD_GetString+0x4e>
    }
  }
}
 8008f54:	bf00      	nop
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008f68:	e005      	b.n	8008f76 <USBD_GetLen+0x1a>
    {
        len++;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3301      	adds	r3, #1
 8008f74:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1f5      	bne.n	8008f6a <USBD_GetLen+0xe>
    }

    return len;
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bc80      	pop	{r7}
 8008f88:	4770      	bx	lr

08008f8a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	4613      	mov	r3, r2
 8008f96:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008fa0:	88fa      	ldrh	r2, [r7, #6]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008fa6:	88fa      	ldrh	r2, [r7, #6]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008fac:	88fb      	ldrh	r3, [r7, #6]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fcc9 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008fd0:	88fb      	ldrh	r3, [r7, #6]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 fcb7 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008ffc:	88fa      	ldrh	r2, [r7, #6]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009004:	88fa      	ldrh	r2, [r7, #6]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800900c:	88fb      	ldrh	r3, [r7, #6]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	2100      	movs	r1, #0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fcbc 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	60b9      	str	r1, [r7, #8]
 800902c:	4613      	mov	r3, r2
 800902e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009030:	88fb      	ldrh	r3, [r7, #6]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	2100      	movs	r1, #0
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 fcaa 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2204      	movs	r2, #4
 8009052:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009056:	2300      	movs	r3, #0
 8009058:	2200      	movs	r2, #0
 800905a:	2100      	movs	r1, #0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fc74 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2205      	movs	r2, #5
 8009078:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800907c:	2300      	movs	r3, #0
 800907e:	2200      	movs	r2, #0
 8009080:	2100      	movs	r1, #0
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fc84 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009098:	2200      	movs	r2, #0
 800909a:	4912      	ldr	r1, [pc, #72]	; (80090e4 <MX_USB_DEVICE_Init+0x50>)
 800909c:	4812      	ldr	r0, [pc, #72]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 800909e:	f7fe ffd4 	bl	800804a <USBD_Init>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090a8:	f7f9 f8b6 	bl	8002218 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090ac:	490f      	ldr	r1, [pc, #60]	; (80090ec <MX_USB_DEVICE_Init+0x58>)
 80090ae:	480e      	ldr	r0, [pc, #56]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 80090b0:	f7fe fff6 	bl	80080a0 <USBD_RegisterClass>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090ba:	f7f9 f8ad 	bl	8002218 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090be:	490c      	ldr	r1, [pc, #48]	; (80090f0 <MX_USB_DEVICE_Init+0x5c>)
 80090c0:	4809      	ldr	r0, [pc, #36]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 80090c2:	f7fe ff27 	bl	8007f14 <USBD_CDC_RegisterInterface>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090cc:	f7f9 f8a4 	bl	8002218 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090d0:	4805      	ldr	r0, [pc, #20]	; (80090e8 <MX_USB_DEVICE_Init+0x54>)
 80090d2:	f7fe fffe 	bl	80080d2 <USBD_Start>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090dc:	f7f9 f89c 	bl	8002218 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090e0:	bf00      	nop
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20000144 	.word	0x20000144
 80090e8:	200006d8 	.word	0x200006d8
 80090ec:	20000030 	.word	0x20000030
 80090f0:	20000134 	.word	0x20000134

080090f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090f8:	2200      	movs	r2, #0
 80090fa:	4905      	ldr	r1, [pc, #20]	; (8009110 <CDC_Init_FS+0x1c>)
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <CDC_Init_FS+0x20>)
 80090fe:	f7fe ff1f 	bl	8007f40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009102:	4905      	ldr	r1, [pc, #20]	; (8009118 <CDC_Init_FS+0x24>)
 8009104:	4803      	ldr	r0, [pc, #12]	; (8009114 <CDC_Init_FS+0x20>)
 8009106:	f7fe ff34 	bl	8007f72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800910a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800910c:	4618      	mov	r0, r3
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20000d5c 	.word	0x20000d5c
 8009114:	200006d8 	.word	0x200006d8
 8009118:	20000974 	.word	0x20000974

0800911c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009120:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009122:	4618      	mov	r0, r3
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr
	...

0800912c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	71fb      	strb	r3, [r7, #7]
 8009138:	4613      	mov	r3, r2
 800913a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	2b23      	cmp	r3, #35	; 0x23
 8009140:	d866      	bhi.n	8009210 <CDC_Control_FS+0xe4>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <CDC_Control_FS+0x1c>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	08009211 	.word	0x08009211
 800914c:	08009211 	.word	0x08009211
 8009150:	08009211 	.word	0x08009211
 8009154:	08009211 	.word	0x08009211
 8009158:	08009211 	.word	0x08009211
 800915c:	08009211 	.word	0x08009211
 8009160:	08009211 	.word	0x08009211
 8009164:	08009211 	.word	0x08009211
 8009168:	08009211 	.word	0x08009211
 800916c:	08009211 	.word	0x08009211
 8009170:	08009211 	.word	0x08009211
 8009174:	08009211 	.word	0x08009211
 8009178:	08009211 	.word	0x08009211
 800917c:	08009211 	.word	0x08009211
 8009180:	08009211 	.word	0x08009211
 8009184:	08009211 	.word	0x08009211
 8009188:	08009211 	.word	0x08009211
 800918c:	08009211 	.word	0x08009211
 8009190:	08009211 	.word	0x08009211
 8009194:	08009211 	.word	0x08009211
 8009198:	08009211 	.word	0x08009211
 800919c:	08009211 	.word	0x08009211
 80091a0:	08009211 	.word	0x08009211
 80091a4:	08009211 	.word	0x08009211
 80091a8:	08009211 	.word	0x08009211
 80091ac:	08009211 	.word	0x08009211
 80091b0:	08009211 	.word	0x08009211
 80091b4:	08009211 	.word	0x08009211
 80091b8:	08009211 	.word	0x08009211
 80091bc:	08009211 	.word	0x08009211
 80091c0:	08009211 	.word	0x08009211
 80091c4:	08009211 	.word	0x08009211
 80091c8:	08009211 	.word	0x08009211
 80091cc:	080091d9 	.word	0x080091d9
 80091d0:	08009211 	.word	0x08009211
 80091d4:	08009211 	.word	0x08009211
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:
        pbuf[0] = 0x20; // bits/second 115200
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2220      	movs	r2, #32
 80091dc:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0xc2;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	22c2      	movs	r2, #194	; 0xc2
 80091e4:	701a      	strb	r2, [r3, #0]
        pbuf[2] = 0x01;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	3302      	adds	r3, #2
 80091ea:	2201      	movs	r2, #1
 80091ec:	701a      	strb	r2, [r3, #0]
        pbuf[3] = 0x00;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	3303      	adds	r3, #3
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
        pbuf[4] = 0x00; // 1 stop bit
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	3304      	adds	r3, #4
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
        pbuf[5] = 0x00; // parity none
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	3305      	adds	r3, #5
 8009202:	2200      	movs	r2, #0
 8009204:	701a      	strb	r2, [r3, #0]
        pbuf[6] = 0x08; // 8 data bits
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	3306      	adds	r3, #6
 800920a:	2208      	movs	r2, #8
 800920c:	701a      	strb	r2, [r3, #0]
    break;
 800920e:	e000      	b.n	8009212 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009210:	bf00      	nop
  }

  return (USBD_OK);
 8009212:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop

08009220 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t i=0;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]

  while(i<*Len)
 800922e:	e018      	b.n	8009262 <CDC_Receive_FS+0x42>
  {
	  if(Buf[i]=='\n' || Buf[i]=='\r') USB_CDC_End_Line_Received=1;
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b0a      	cmp	r3, #10
 800923a:	d005      	beq.n	8009248 <CDC_Receive_FS+0x28>
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b0d      	cmp	r3, #13
 8009246:	d102      	bne.n	800924e <CDC_Receive_FS+0x2e>
 8009248:	4b12      	ldr	r3, [pc, #72]	; (8009294 <CDC_Receive_FS+0x74>)
 800924a:	2201      	movs	r2, #1
 800924c:	701a      	strb	r2, [r3, #0]
	  Write_to_circ_buffer(Buf[i]);
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	4618      	mov	r0, r3
 8009258:	f7f8 fd96 	bl	8001d88 <Write_to_circ_buffer>
	  i++;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3301      	adds	r3, #1
 8009260:	60fb      	str	r3, [r7, #12]
  while(i<*Len)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	429a      	cmp	r2, r3
 800926a:	d3e1      	bcc.n	8009230 <CDC_Receive_FS+0x10>
  }

  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f811 	bl	800929c <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4806      	ldr	r0, [pc, #24]	; (8009298 <CDC_Receive_FS+0x78>)
 800927e:	f7fe fe78 	bl	8007f72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009282:	4805      	ldr	r0, [pc, #20]	; (8009298 <CDC_Receive_FS+0x78>)
 8009284:	f7fe feb7 	bl	8007ff6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009288:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	2000061b 	.word	0x2000061b
 8009298:	200006d8 	.word	0x200006d8

0800929c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092ac:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <CDC_Transmit_FS+0x48>)
 80092ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80092b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80092be:	2301      	movs	r3, #1
 80092c0:	e00b      	b.n	80092da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	461a      	mov	r2, r3
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4806      	ldr	r0, [pc, #24]	; (80092e4 <CDC_Transmit_FS+0x48>)
 80092ca:	f7fe fe39 	bl	8007f40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80092ce:	4805      	ldr	r0, [pc, #20]	; (80092e4 <CDC_Transmit_FS+0x48>)
 80092d0:	f7fe fe62 	bl	8007f98 <USBD_CDC_TransmitPacket>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200006d8 	.word	0x200006d8

080092e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2212      	movs	r2, #18
 80092f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092fa:	4b03      	ldr	r3, [pc, #12]	; (8009308 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	20000160 	.word	0x20000160

0800930c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	6039      	str	r1, [r7, #0]
 8009316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2204      	movs	r2, #4
 800931c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	bc80      	pop	{r7}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	20000174 	.word	0x20000174

08009330 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	4603      	mov	r3, r0
 8009338:	6039      	str	r1, [r7, #0]
 800933a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d105      	bne.n	800934e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4907      	ldr	r1, [pc, #28]	; (8009364 <USBD_FS_ProductStrDescriptor+0x34>)
 8009346:	4808      	ldr	r0, [pc, #32]	; (8009368 <USBD_FS_ProductStrDescriptor+0x38>)
 8009348:	f7ff fdc6 	bl	8008ed8 <USBD_GetString>
 800934c:	e004      	b.n	8009358 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4904      	ldr	r1, [pc, #16]	; (8009364 <USBD_FS_ProductStrDescriptor+0x34>)
 8009352:	4805      	ldr	r0, [pc, #20]	; (8009368 <USBD_FS_ProductStrDescriptor+0x38>)
 8009354:	f7ff fdc0 	bl	8008ed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009358:	4b02      	ldr	r3, [pc, #8]	; (8009364 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20001144 	.word	0x20001144
 8009368:	0800ca04 	.word	0x0800ca04

0800936c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	4904      	ldr	r1, [pc, #16]	; (800938c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800937c:	4804      	ldr	r0, [pc, #16]	; (8009390 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800937e:	f7ff fdab 	bl	8008ed8 <USBD_GetString>
  return USBD_StrDesc;
 8009382:	4b02      	ldr	r3, [pc, #8]	; (800938c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20001144 	.word	0x20001144
 8009390:	0800ca10 	.word	0x0800ca10

08009394 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	221a      	movs	r2, #26
 80093a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093a6:	f000 f843 	bl	8009430 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093aa:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000178 	.word	0x20000178

080093b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	4907      	ldr	r1, [pc, #28]	; (80093ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80093ce:	4808      	ldr	r0, [pc, #32]	; (80093f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093d0:	f7ff fd82 	bl	8008ed8 <USBD_GetString>
 80093d4:	e004      	b.n	80093e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4904      	ldr	r1, [pc, #16]	; (80093ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80093da:	4805      	ldr	r0, [pc, #20]	; (80093f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093dc:	f7ff fd7c 	bl	8008ed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e0:	4b02      	ldr	r3, [pc, #8]	; (80093ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20001144 	.word	0x20001144
 80093f0:	0800ca20 	.word	0x0800ca20

080093f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	6039      	str	r1, [r7, #0]
 80093fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d105      	bne.n	8009412 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4907      	ldr	r1, [pc, #28]	; (8009428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800940a:	4808      	ldr	r0, [pc, #32]	; (800942c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800940c:	f7ff fd64 	bl	8008ed8 <USBD_GetString>
 8009410:	e004      	b.n	800941c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4904      	ldr	r1, [pc, #16]	; (8009428 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009416:	4805      	ldr	r0, [pc, #20]	; (800942c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009418:	f7ff fd5e 	bl	8008ed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20001144 	.word	0x20001144
 800942c:	0800ca2c 	.word	0x0800ca2c

08009430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <Get_SerialNum+0x44>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800943c:	4b0e      	ldr	r3, [pc, #56]	; (8009478 <Get_SerialNum+0x48>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009442:	4b0e      	ldr	r3, [pc, #56]	; (800947c <Get_SerialNum+0x4c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4413      	add	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009456:	2208      	movs	r2, #8
 8009458:	4909      	ldr	r1, [pc, #36]	; (8009480 <Get_SerialNum+0x50>)
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f814 	bl	8009488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009460:	2204      	movs	r2, #4
 8009462:	4908      	ldr	r1, [pc, #32]	; (8009484 <Get_SerialNum+0x54>)
 8009464:	68b8      	ldr	r0, [r7, #8]
 8009466:	f000 f80f 	bl	8009488 <IntToUnicode>
  }
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	1ff80050 	.word	0x1ff80050
 8009478:	1ff80054 	.word	0x1ff80054
 800947c:	1ff80058 	.word	0x1ff80058
 8009480:	2000017a 	.word	0x2000017a
 8009484:	2000018a 	.word	0x2000018a

08009488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800949a:	2300      	movs	r3, #0
 800949c:	75fb      	strb	r3, [r7, #23]
 800949e:	e027      	b.n	80094f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	0f1b      	lsrs	r3, r3, #28
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d80b      	bhi.n	80094c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	0f1b      	lsrs	r3, r3, #28
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	7dfb      	ldrb	r3, [r7, #23]
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	4619      	mov	r1, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	440b      	add	r3, r1
 80094b8:	3230      	adds	r2, #48	; 0x30
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	701a      	strb	r2, [r3, #0]
 80094be:	e00a      	b.n	80094d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	0f1b      	lsrs	r3, r3, #28
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	4619      	mov	r1, r3
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	440b      	add	r3, r1
 80094d0:	3237      	adds	r2, #55	; 0x37
 80094d2:	b2d2      	uxtb	r2, r2
 80094d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	3301      	adds	r3, #1
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4413      	add	r3, r2
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	3301      	adds	r3, #1
 80094ee:	75fb      	strb	r3, [r7, #23]
 80094f0:	7dfa      	ldrb	r2, [r7, #23]
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d3d3      	bcc.n	80094a0 <IntToUnicode+0x18>
  }
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	bc80      	pop	{r7}
 8009502:	4770      	bx	lr

08009504 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d106      	bne.n	8009524 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <HAL_PCDEx_SetConnectionState+0x38>)
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	4a08      	ldr	r2, [pc, #32]	; (800953c <HAL_PCDEx_SetConnectionState+0x38>)
 800951c:	f043 0301 	orr.w	r3, r3, #1
 8009520:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 8009522:	e005      	b.n	8009530 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <HAL_PCDEx_SetConnectionState+0x38>)
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a04      	ldr	r2, [pc, #16]	; (800953c <HAL_PCDEx_SetConnectionState+0x38>)
 800952a:	f023 0301 	bic.w	r3, r3, #1
 800952e:	6053      	str	r3, [r2, #4]
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	40010000 	.word	0x40010000

08009540 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a0d      	ldr	r2, [pc, #52]	; (8009584 <HAL_PCD_MspInit+0x44>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d113      	bne.n	800957a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009552:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <HAL_PCD_MspInit+0x48>)
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	4a0c      	ldr	r2, [pc, #48]	; (8009588 <HAL_PCD_MspInit+0x48>)
 8009558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800955c:	6253      	str	r3, [r2, #36]	; 0x24
 800955e:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <HAL_PCD_MspInit+0x48>)
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	2014      	movs	r0, #20
 8009570:	f7f9 f9fd 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009574:	2014      	movs	r0, #20
 8009576:	f7f9 fa16 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	40005c00 	.word	0x40005c00
 8009588:	40023800 	.word	0x40023800

0800958c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f7fe fddd 	bl	8008162 <USBD_LL_SetupStage>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	440b      	add	r3, r1
 80095d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	4619      	mov	r1, r3
 80095da:	f7fe fe0f 	bl	80081fc <USBD_LL_DataOutStage>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	460b      	mov	r3, r1
 80095f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80095f8:	78fa      	ldrb	r2, [r7, #3]
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	440b      	add	r3, r1
 8009606:	333c      	adds	r3, #60	; 0x3c
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	4619      	mov	r1, r3
 800960e:	f7fe fe66 	bl	80082de <USBD_LL_DataInStage>
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe ff71 	bl	8008510 <USBD_LL_SOF>
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800963e:	2301      	movs	r3, #1
 8009640:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d001      	beq.n	800964e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800964a:	f7f8 fde5 	bl	8002218 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009654:	7bfa      	ldrb	r2, [r7, #15]
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe ff26 	bl	80084aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fedf 	bl	8008428 <USBD_LL_Reset>
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe ff20 	bl	80084c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009690:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <HAL_PCD_SuspendCallback+0x30>)
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	4a03      	ldr	r2, [pc, #12]	; (80096a4 <HAL_PCD_SuspendCallback+0x30>)
 8009696:	f043 0306 	orr.w	r3, r3, #6
 800969a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	e000ed00 	.word	0xe000ed00

080096a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe ff1a 	bl	80084f0 <USBD_LL_Resume>
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80096cc:	4a28      	ldr	r2, [pc, #160]	; (8009770 <USBD_LL_Init+0xac>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a26      	ldr	r2, [pc, #152]	; (8009770 <USBD_LL_Init+0xac>)
 80096d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80096dc:	4b24      	ldr	r3, [pc, #144]	; (8009770 <USBD_LL_Init+0xac>)
 80096de:	4a25      	ldr	r2, [pc, #148]	; (8009774 <USBD_LL_Init+0xb0>)
 80096e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <USBD_LL_Init+0xac>)
 80096e4:	2208      	movs	r2, #8
 80096e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096e8:	4b21      	ldr	r3, [pc, #132]	; (8009770 <USBD_LL_Init+0xac>)
 80096ea:	2202      	movs	r2, #2
 80096ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096ee:	4b20      	ldr	r3, [pc, #128]	; (8009770 <USBD_LL_Init+0xac>)
 80096f0:	2202      	movs	r2, #2
 80096f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096f4:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <USBD_LL_Init+0xac>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <USBD_LL_Init+0xac>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009700:	481b      	ldr	r0, [pc, #108]	; (8009770 <USBD_LL_Init+0xac>)
 8009702:	f7f9 fb33 	bl	8002d6c <HAL_PCD_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800970c:	f7f8 fd84 	bl	8002218 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009716:	2318      	movs	r3, #24
 8009718:	2200      	movs	r2, #0
 800971a:	2100      	movs	r1, #0
 800971c:	f7fa ff10 	bl	8004540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009726:	2358      	movs	r3, #88	; 0x58
 8009728:	2200      	movs	r2, #0
 800972a:	2180      	movs	r1, #128	; 0x80
 800972c:	f7fa ff08 	bl	8004540 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009736:	23c0      	movs	r3, #192	; 0xc0
 8009738:	2200      	movs	r2, #0
 800973a:	2181      	movs	r1, #129	; 0x81
 800973c:	f7fa ff00 	bl	8004540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009746:	f44f 7388 	mov.w	r3, #272	; 0x110
 800974a:	2200      	movs	r2, #0
 800974c:	2101      	movs	r1, #1
 800974e:	f7fa fef7 	bl	8004540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800975c:	2200      	movs	r2, #0
 800975e:	2182      	movs	r1, #130	; 0x82
 8009760:	f7fa feee 	bl	8004540 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20001344 	.word	0x20001344
 8009774:	40005c00 	.word	0x40005c00

08009778 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800978e:	4618      	mov	r0, r3
 8009790:	f7f9 fbca 	bl	8002f28 <HAL_PCD_Start>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f944 	bl	8009a28 <USBD_Get_USB_Status>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	461a      	mov	r2, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70bb      	strb	r3, [r7, #2]
 80097c4:	4613      	mov	r3, r2
 80097c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80097d6:	78bb      	ldrb	r3, [r7, #2]
 80097d8:	883a      	ldrh	r2, [r7, #0]
 80097da:	78f9      	ldrb	r1, [r7, #3]
 80097dc:	f7f9 fce6 	bl	80031ac <HAL_PCD_EP_Open>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f91e 	bl	8009a28 <USBD_Get_USB_Status>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	4611      	mov	r1, r2
 8009818:	4618      	mov	r0, r3
 800981a:	f7f9 fd2d 	bl	8003278 <HAL_PCD_EP_Close>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f8ff 	bl	8009a28 <USBD_Get_USB_Status>
 800982a:	4603      	mov	r3, r0
 800982c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f7f9 fded 	bl	8003436 <HAL_PCD_EP_SetStall>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f8e0 	bl	8009a28 <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7f9 fe20 	bl	80034da <HAL_PCD_EP_ClrStall>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f8c1 	bl	8009a28 <USBD_Get_USB_Status>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80098c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da0c      	bge.n	80098ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	440b      	add	r3, r1
 80098e4:	3302      	adds	r3, #2
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	e00b      	b.n	8009902 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f0:	68f9      	ldr	r1, [r7, #12]
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	440b      	add	r3, r1
 80098fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009900:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr

0800990c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7f9 fc19 	bl	8003162 <HAL_PCD_SetAddress>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f876 	bl	8009a28 <USBD_Get_USB_Status>
 800993c:	4603      	mov	r3, r0
 800993e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009940:	7bbb      	ldrb	r3, [r7, #14]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	461a      	mov	r2, r3
 8009956:	460b      	mov	r3, r1
 8009958:	72fb      	strb	r3, [r7, #11]
 800995a:	4613      	mov	r3, r2
 800995c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800996c:	893b      	ldrh	r3, [r7, #8]
 800996e:	7af9      	ldrb	r1, [r7, #11]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f7f9 fd1d 	bl	80033b0 <HAL_PCD_EP_Transmit>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f853 	bl	8009a28 <USBD_Get_USB_Status>
 8009982:	4603      	mov	r3, r0
 8009984:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009986:	7dbb      	ldrb	r3, [r7, #22]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	461a      	mov	r2, r3
 800999c:	460b      	mov	r3, r1
 800999e:	72fb      	strb	r3, [r7, #11]
 80099a0:	4613      	mov	r3, r2
 80099a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80099b2:	893b      	ldrh	r3, [r7, #8]
 80099b4:	7af9      	ldrb	r1, [r7, #11]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	f7f9 fca6 	bl	8003308 <HAL_PCD_EP_Receive>
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f830 	bl	8009a28 <USBD_Get_USB_Status>
 80099c8:	4603      	mov	r3, r0
 80099ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	460b      	mov	r3, r1
 80099e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80099e8:	78fa      	ldrb	r2, [r7, #3]
 80099ea:	4611      	mov	r1, r2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7f9 fcc8 	bl	8003382 <HAL_PCD_EP_GetRxCount>
 80099f2:	4603      	mov	r3, r0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a04:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <USBD_static_malloc+0x14>)
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bc80      	pop	{r7}
 8009a0e:	4770      	bx	lr
 8009a10:	20000390 	.word	0x20000390

08009a14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]

}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr
	...

08009a28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d817      	bhi.n	8009a6c <USBD_Get_USB_Status+0x44>
 8009a3c:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <USBD_Get_USB_Status+0x1c>)
 8009a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a42:	bf00      	nop
 8009a44:	08009a55 	.word	0x08009a55
 8009a48:	08009a5b 	.word	0x08009a5b
 8009a4c:	08009a61 	.word	0x08009a61
 8009a50:	08009a67 	.word	0x08009a67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	e00b      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5e:	e008      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a60:	2301      	movs	r3, #1
 8009a62:	73fb      	strb	r3, [r7, #15]
    break;
 8009a64:	e005      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a66:	2302      	movs	r3, #2
 8009a68:	73fb      	strb	r3, [r7, #15]
    break;
 8009a6a:	e002      	b.n	8009a72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a70:	bf00      	nop
  }
  return usb_status;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bc80      	pop	{r7}
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop

08009a80 <atof>:
 8009a80:	2100      	movs	r1, #0
 8009a82:	f000 be61 	b.w	800a748 <strtod>
	...

08009a88 <__errno>:
 8009a88:	4b01      	ldr	r3, [pc, #4]	; (8009a90 <__errno+0x8>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	20000194 	.word	0x20000194

08009a94 <__libc_init_array>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	2600      	movs	r6, #0
 8009a98:	4d0c      	ldr	r5, [pc, #48]	; (8009acc <__libc_init_array+0x38>)
 8009a9a:	4c0d      	ldr	r4, [pc, #52]	; (8009ad0 <__libc_init_array+0x3c>)
 8009a9c:	1b64      	subs	r4, r4, r5
 8009a9e:	10a4      	asrs	r4, r4, #2
 8009aa0:	42a6      	cmp	r6, r4
 8009aa2:	d109      	bne.n	8009ab8 <__libc_init_array+0x24>
 8009aa4:	f002 fee8 	bl	800c878 <_init>
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	4d0a      	ldr	r5, [pc, #40]	; (8009ad4 <__libc_init_array+0x40>)
 8009aac:	4c0a      	ldr	r4, [pc, #40]	; (8009ad8 <__libc_init_array+0x44>)
 8009aae:	1b64      	subs	r4, r4, r5
 8009ab0:	10a4      	asrs	r4, r4, #2
 8009ab2:	42a6      	cmp	r6, r4
 8009ab4:	d105      	bne.n	8009ac2 <__libc_init_array+0x2e>
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009abc:	4798      	blx	r3
 8009abe:	3601      	adds	r6, #1
 8009ac0:	e7ee      	b.n	8009aa0 <__libc_init_array+0xc>
 8009ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac6:	4798      	blx	r3
 8009ac8:	3601      	adds	r6, #1
 8009aca:	e7f2      	b.n	8009ab2 <__libc_init_array+0x1e>
 8009acc:	0800cef8 	.word	0x0800cef8
 8009ad0:	0800cef8 	.word	0x0800cef8
 8009ad4:	0800cef8 	.word	0x0800cef8
 8009ad8:	0800cefc 	.word	0x0800cefc

08009adc <memcpy>:
 8009adc:	440a      	add	r2, r1
 8009ade:	4291      	cmp	r1, r2
 8009ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae4:	d100      	bne.n	8009ae8 <memcpy+0xc>
 8009ae6:	4770      	bx	lr
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aee:	4291      	cmp	r1, r2
 8009af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af4:	d1f9      	bne.n	8009aea <memcpy+0xe>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <memset>:
 8009af8:	4603      	mov	r3, r0
 8009afa:	4402      	add	r2, r0
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d100      	bne.n	8009b02 <memset+0xa>
 8009b00:	4770      	bx	lr
 8009b02:	f803 1b01 	strb.w	r1, [r3], #1
 8009b06:	e7f9      	b.n	8009afc <memset+0x4>

08009b08 <strcpy>:
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b0e:	f803 2b01 	strb.w	r2, [r3], #1
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d1f9      	bne.n	8009b0a <strcpy+0x2>
 8009b16:	4770      	bx	lr

08009b18 <sulp>:
 8009b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1c:	460f      	mov	r7, r1
 8009b1e:	4690      	mov	r8, r2
 8009b20:	f001 fd9a 	bl	800b658 <__ulp>
 8009b24:	4604      	mov	r4, r0
 8009b26:	460d      	mov	r5, r1
 8009b28:	f1b8 0f00 	cmp.w	r8, #0
 8009b2c:	d011      	beq.n	8009b52 <sulp+0x3a>
 8009b2e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dd0b      	ble.n	8009b52 <sulp+0x3a>
 8009b3a:	2400      	movs	r4, #0
 8009b3c:	051b      	lsls	r3, r3, #20
 8009b3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b46:	4622      	mov	r2, r4
 8009b48:	462b      	mov	r3, r5
 8009b4a:	f7f6 fce7 	bl	800051c <__aeabi_dmul>
 8009b4e:	4604      	mov	r4, r0
 8009b50:	460d      	mov	r5, r1
 8009b52:	4620      	mov	r0, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b5a:	0000      	movs	r0, r0
 8009b5c:	0000      	movs	r0, r0
	...

08009b60 <_strtod_l>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	469b      	mov	fp, r3
 8009b66:	2300      	movs	r3, #0
 8009b68:	b0a1      	sub	sp, #132	; 0x84
 8009b6a:	931c      	str	r3, [sp, #112]	; 0x70
 8009b6c:	4ba1      	ldr	r3, [pc, #644]	; (8009df4 <_strtod_l+0x294>)
 8009b6e:	4682      	mov	sl, r0
 8009b70:	681f      	ldr	r7, [r3, #0]
 8009b72:	460e      	mov	r6, r1
 8009b74:	4638      	mov	r0, r7
 8009b76:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b78:	f7f6 fb0c 	bl	8000194 <strlen>
 8009b7c:	f04f 0800 	mov.w	r8, #0
 8009b80:	4604      	mov	r4, r0
 8009b82:	f04f 0900 	mov.w	r9, #0
 8009b86:	961b      	str	r6, [sp, #108]	; 0x6c
 8009b88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b8a:	781a      	ldrb	r2, [r3, #0]
 8009b8c:	2a2b      	cmp	r2, #43	; 0x2b
 8009b8e:	d04c      	beq.n	8009c2a <_strtod_l+0xca>
 8009b90:	d83a      	bhi.n	8009c08 <_strtod_l+0xa8>
 8009b92:	2a0d      	cmp	r2, #13
 8009b94:	d833      	bhi.n	8009bfe <_strtod_l+0x9e>
 8009b96:	2a08      	cmp	r2, #8
 8009b98:	d833      	bhi.n	8009c02 <_strtod_l+0xa2>
 8009b9a:	2a00      	cmp	r2, #0
 8009b9c:	d03d      	beq.n	8009c1a <_strtod_l+0xba>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009ba4:	782b      	ldrb	r3, [r5, #0]
 8009ba6:	2b30      	cmp	r3, #48	; 0x30
 8009ba8:	f040 80af 	bne.w	8009d0a <_strtod_l+0x1aa>
 8009bac:	786b      	ldrb	r3, [r5, #1]
 8009bae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bb2:	2b58      	cmp	r3, #88	; 0x58
 8009bb4:	d16c      	bne.n	8009c90 <_strtod_l+0x130>
 8009bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bb8:	4650      	mov	r0, sl
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	ab1c      	add	r3, sp, #112	; 0x70
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4a8d      	ldr	r2, [pc, #564]	; (8009df8 <_strtod_l+0x298>)
 8009bc2:	f8cd b008 	str.w	fp, [sp, #8]
 8009bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8009bc8:	a91b      	add	r1, sp, #108	; 0x6c
 8009bca:	f000 febd 	bl	800a948 <__gethex>
 8009bce:	f010 0607 	ands.w	r6, r0, #7
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	d005      	beq.n	8009be2 <_strtod_l+0x82>
 8009bd6:	2e06      	cmp	r6, #6
 8009bd8:	d129      	bne.n	8009c2e <_strtod_l+0xce>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	3501      	adds	r5, #1
 8009bde:	951b      	str	r5, [sp, #108]	; 0x6c
 8009be0:	930c      	str	r3, [sp, #48]	; 0x30
 8009be2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f040 8596 	bne.w	800a716 <_strtod_l+0xbb6>
 8009bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bec:	b1d3      	cbz	r3, 8009c24 <_strtod_l+0xc4>
 8009bee:	4642      	mov	r2, r8
 8009bf0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	b021      	add	sp, #132	; 0x84
 8009bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfe:	2a20      	cmp	r2, #32
 8009c00:	d1cd      	bne.n	8009b9e <_strtod_l+0x3e>
 8009c02:	3301      	adds	r3, #1
 8009c04:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c06:	e7bf      	b.n	8009b88 <_strtod_l+0x28>
 8009c08:	2a2d      	cmp	r2, #45	; 0x2d
 8009c0a:	d1c8      	bne.n	8009b9e <_strtod_l+0x3e>
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	920c      	str	r2, [sp, #48]	; 0x30
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1c3      	bne.n	8009ba2 <_strtod_l+0x42>
 8009c1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c1c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f040 8577 	bne.w	800a712 <_strtod_l+0xbb2>
 8009c24:	4642      	mov	r2, r8
 8009c26:	464b      	mov	r3, r9
 8009c28:	e7e4      	b.n	8009bf4 <_strtod_l+0x94>
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	e7ef      	b.n	8009c0e <_strtod_l+0xae>
 8009c2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c30:	b13a      	cbz	r2, 8009c42 <_strtod_l+0xe2>
 8009c32:	2135      	movs	r1, #53	; 0x35
 8009c34:	a81e      	add	r0, sp, #120	; 0x78
 8009c36:	f001 fe13 	bl	800b860 <__copybits>
 8009c3a:	4650      	mov	r0, sl
 8009c3c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c3e:	f001 f9db 	bl	800aff8 <_Bfree>
 8009c42:	3e01      	subs	r6, #1
 8009c44:	2e05      	cmp	r6, #5
 8009c46:	d807      	bhi.n	8009c58 <_strtod_l+0xf8>
 8009c48:	e8df f006 	tbb	[pc, r6]
 8009c4c:	1d180b0e 	.word	0x1d180b0e
 8009c50:	030e      	.short	0x030e
 8009c52:	f04f 0900 	mov.w	r9, #0
 8009c56:	46c8      	mov	r8, r9
 8009c58:	0721      	lsls	r1, r4, #28
 8009c5a:	d5c2      	bpl.n	8009be2 <_strtod_l+0x82>
 8009c5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009c60:	e7bf      	b.n	8009be2 <_strtod_l+0x82>
 8009c62:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8009c66:	e7f7      	b.n	8009c58 <_strtod_l+0xf8>
 8009c68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009c6a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009c6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c76:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009c7a:	e7ed      	b.n	8009c58 <_strtod_l+0xf8>
 8009c7c:	f04f 0800 	mov.w	r8, #0
 8009c80:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009dfc <_strtod_l+0x29c>
 8009c84:	e7e8      	b.n	8009c58 <_strtod_l+0xf8>
 8009c86:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c8a:	f04f 38ff 	mov.w	r8, #4294967295
 8009c8e:	e7e3      	b.n	8009c58 <_strtod_l+0xf8>
 8009c90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c96:	785b      	ldrb	r3, [r3, #1]
 8009c98:	2b30      	cmp	r3, #48	; 0x30
 8009c9a:	d0f9      	beq.n	8009c90 <_strtod_l+0x130>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0a0      	beq.n	8009be2 <_strtod_l+0x82>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	9307      	str	r3, [sp, #28]
 8009ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ca6:	220a      	movs	r2, #10
 8009ca8:	9308      	str	r3, [sp, #32]
 8009caa:	2300      	movs	r3, #0
 8009cac:	469b      	mov	fp, r3
 8009cae:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009cb2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009cb4:	7805      	ldrb	r5, [r0, #0]
 8009cb6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009cba:	b2d9      	uxtb	r1, r3
 8009cbc:	2909      	cmp	r1, #9
 8009cbe:	d926      	bls.n	8009d0e <_strtod_l+0x1ae>
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f002 f9c8 	bl	800c058 <strncmp>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d032      	beq.n	8009d32 <_strtod_l+0x1d2>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	462b      	mov	r3, r5
 8009cd0:	465c      	mov	r4, fp
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	9004      	str	r0, [sp, #16]
 8009cd6:	2b65      	cmp	r3, #101	; 0x65
 8009cd8:	d001      	beq.n	8009cde <_strtod_l+0x17e>
 8009cda:	2b45      	cmp	r3, #69	; 0x45
 8009cdc:	d113      	bne.n	8009d06 <_strtod_l+0x1a6>
 8009cde:	b91c      	cbnz	r4, 8009ce8 <_strtod_l+0x188>
 8009ce0:	9b07      	ldr	r3, [sp, #28]
 8009ce2:	4303      	orrs	r3, r0
 8009ce4:	d099      	beq.n	8009c1a <_strtod_l+0xba>
 8009ce6:	2400      	movs	r4, #0
 8009ce8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009cea:	1c73      	adds	r3, r6, #1
 8009cec:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cee:	7873      	ldrb	r3, [r6, #1]
 8009cf0:	2b2b      	cmp	r3, #43	; 0x2b
 8009cf2:	d078      	beq.n	8009de6 <_strtod_l+0x286>
 8009cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8009cf6:	d07b      	beq.n	8009df0 <_strtod_l+0x290>
 8009cf8:	2700      	movs	r7, #0
 8009cfa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009cfe:	2909      	cmp	r1, #9
 8009d00:	f240 8082 	bls.w	8009e08 <_strtod_l+0x2a8>
 8009d04:	961b      	str	r6, [sp, #108]	; 0x6c
 8009d06:	2500      	movs	r5, #0
 8009d08:	e09e      	b.n	8009e48 <_strtod_l+0x2e8>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e7c9      	b.n	8009ca2 <_strtod_l+0x142>
 8009d0e:	f1bb 0f08 	cmp.w	fp, #8
 8009d12:	bfd5      	itete	le
 8009d14:	9906      	ldrle	r1, [sp, #24]
 8009d16:	9905      	ldrgt	r1, [sp, #20]
 8009d18:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009d20:	f100 0001 	add.w	r0, r0, #1
 8009d24:	bfd4      	ite	le
 8009d26:	9306      	strle	r3, [sp, #24]
 8009d28:	9305      	strgt	r3, [sp, #20]
 8009d2a:	f10b 0b01 	add.w	fp, fp, #1
 8009d2e:	901b      	str	r0, [sp, #108]	; 0x6c
 8009d30:	e7bf      	b.n	8009cb2 <_strtod_l+0x152>
 8009d32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d34:	191a      	adds	r2, r3, r4
 8009d36:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d38:	5d1b      	ldrb	r3, [r3, r4]
 8009d3a:	f1bb 0f00 	cmp.w	fp, #0
 8009d3e:	d036      	beq.n	8009dae <_strtod_l+0x24e>
 8009d40:	465c      	mov	r4, fp
 8009d42:	9004      	str	r0, [sp, #16]
 8009d44:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009d48:	2a09      	cmp	r2, #9
 8009d4a:	d912      	bls.n	8009d72 <_strtod_l+0x212>
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	e7c2      	b.n	8009cd6 <_strtod_l+0x176>
 8009d50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d52:	3001      	adds	r0, #1
 8009d54:	1c5a      	adds	r2, r3, #1
 8009d56:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	2b30      	cmp	r3, #48	; 0x30
 8009d5c:	d0f8      	beq.n	8009d50 <_strtod_l+0x1f0>
 8009d5e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009d62:	2a08      	cmp	r2, #8
 8009d64:	f200 84dc 	bhi.w	800a720 <_strtod_l+0xbc0>
 8009d68:	9004      	str	r0, [sp, #16]
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d70:	9208      	str	r2, [sp, #32]
 8009d72:	3b30      	subs	r3, #48	; 0x30
 8009d74:	f100 0201 	add.w	r2, r0, #1
 8009d78:	d013      	beq.n	8009da2 <_strtod_l+0x242>
 8009d7a:	9904      	ldr	r1, [sp, #16]
 8009d7c:	1905      	adds	r5, r0, r4
 8009d7e:	4411      	add	r1, r2
 8009d80:	9104      	str	r1, [sp, #16]
 8009d82:	4622      	mov	r2, r4
 8009d84:	210a      	movs	r1, #10
 8009d86:	42aa      	cmp	r2, r5
 8009d88:	d113      	bne.n	8009db2 <_strtod_l+0x252>
 8009d8a:	1822      	adds	r2, r4, r0
 8009d8c:	2a08      	cmp	r2, #8
 8009d8e:	f104 0401 	add.w	r4, r4, #1
 8009d92:	4404      	add	r4, r0
 8009d94:	dc1b      	bgt.n	8009dce <_strtod_l+0x26e>
 8009d96:	220a      	movs	r2, #10
 8009d98:	9906      	ldr	r1, [sp, #24]
 8009d9a:	fb02 3301 	mla	r3, r2, r1, r3
 8009d9e:	9306      	str	r3, [sp, #24]
 8009da0:	2200      	movs	r2, #0
 8009da2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009da4:	4610      	mov	r0, r2
 8009da6:	1c59      	adds	r1, r3, #1
 8009da8:	911b      	str	r1, [sp, #108]	; 0x6c
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	e7ca      	b.n	8009d44 <_strtod_l+0x1e4>
 8009dae:	4658      	mov	r0, fp
 8009db0:	e7d3      	b.n	8009d5a <_strtod_l+0x1fa>
 8009db2:	2a08      	cmp	r2, #8
 8009db4:	dc04      	bgt.n	8009dc0 <_strtod_l+0x260>
 8009db6:	9f06      	ldr	r7, [sp, #24]
 8009db8:	434f      	muls	r7, r1
 8009dba:	9706      	str	r7, [sp, #24]
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	e7e2      	b.n	8009d86 <_strtod_l+0x226>
 8009dc0:	1c57      	adds	r7, r2, #1
 8009dc2:	2f10      	cmp	r7, #16
 8009dc4:	bfde      	ittt	le
 8009dc6:	9f05      	ldrle	r7, [sp, #20]
 8009dc8:	434f      	mulle	r7, r1
 8009dca:	9705      	strle	r7, [sp, #20]
 8009dcc:	e7f6      	b.n	8009dbc <_strtod_l+0x25c>
 8009dce:	2c10      	cmp	r4, #16
 8009dd0:	bfdf      	itttt	le
 8009dd2:	220a      	movle	r2, #10
 8009dd4:	9905      	ldrle	r1, [sp, #20]
 8009dd6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009dda:	9305      	strle	r3, [sp, #20]
 8009ddc:	e7e0      	b.n	8009da0 <_strtod_l+0x240>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2201      	movs	r2, #1
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	e77c      	b.n	8009ce0 <_strtod_l+0x180>
 8009de6:	2700      	movs	r7, #0
 8009de8:	1cb3      	adds	r3, r6, #2
 8009dea:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dec:	78b3      	ldrb	r3, [r6, #2]
 8009dee:	e784      	b.n	8009cfa <_strtod_l+0x19a>
 8009df0:	2701      	movs	r7, #1
 8009df2:	e7f9      	b.n	8009de8 <_strtod_l+0x288>
 8009df4:	0800cbe8 	.word	0x0800cbe8
 8009df8:	0800ca68 	.word	0x0800ca68
 8009dfc:	7ff00000 	.word	0x7ff00000
 8009e00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e02:	1c59      	adds	r1, r3, #1
 8009e04:	911b      	str	r1, [sp, #108]	; 0x6c
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	2b30      	cmp	r3, #48	; 0x30
 8009e0a:	d0f9      	beq.n	8009e00 <_strtod_l+0x2a0>
 8009e0c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009e10:	2908      	cmp	r1, #8
 8009e12:	f63f af78 	bhi.w	8009d06 <_strtod_l+0x1a6>
 8009e16:	f04f 0e0a 	mov.w	lr, #10
 8009e1a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009e1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e20:	9309      	str	r3, [sp, #36]	; 0x24
 8009e22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e24:	1c59      	adds	r1, r3, #1
 8009e26:	911b      	str	r1, [sp, #108]	; 0x6c
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009e2e:	2d09      	cmp	r5, #9
 8009e30:	d935      	bls.n	8009e9e <_strtod_l+0x33e>
 8009e32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e34:	1b49      	subs	r1, r1, r5
 8009e36:	2908      	cmp	r1, #8
 8009e38:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009e3c:	dc02      	bgt.n	8009e44 <_strtod_l+0x2e4>
 8009e3e:	4565      	cmp	r5, ip
 8009e40:	bfa8      	it	ge
 8009e42:	4665      	movge	r5, ip
 8009e44:	b107      	cbz	r7, 8009e48 <_strtod_l+0x2e8>
 8009e46:	426d      	negs	r5, r5
 8009e48:	2c00      	cmp	r4, #0
 8009e4a:	d14c      	bne.n	8009ee6 <_strtod_l+0x386>
 8009e4c:	9907      	ldr	r1, [sp, #28]
 8009e4e:	4301      	orrs	r1, r0
 8009e50:	f47f aec7 	bne.w	8009be2 <_strtod_l+0x82>
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	f47f aee0 	bne.w	8009c1a <_strtod_l+0xba>
 8009e5a:	2b69      	cmp	r3, #105	; 0x69
 8009e5c:	d026      	beq.n	8009eac <_strtod_l+0x34c>
 8009e5e:	dc23      	bgt.n	8009ea8 <_strtod_l+0x348>
 8009e60:	2b49      	cmp	r3, #73	; 0x49
 8009e62:	d023      	beq.n	8009eac <_strtod_l+0x34c>
 8009e64:	2b4e      	cmp	r3, #78	; 0x4e
 8009e66:	f47f aed8 	bne.w	8009c1a <_strtod_l+0xba>
 8009e6a:	499c      	ldr	r1, [pc, #624]	; (800a0dc <_strtod_l+0x57c>)
 8009e6c:	a81b      	add	r0, sp, #108	; 0x6c
 8009e6e:	f000 ffb9 	bl	800ade4 <__match>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f43f aed1 	beq.w	8009c1a <_strtod_l+0xba>
 8009e78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b28      	cmp	r3, #40	; 0x28
 8009e7e:	d12c      	bne.n	8009eda <_strtod_l+0x37a>
 8009e80:	4997      	ldr	r1, [pc, #604]	; (800a0e0 <_strtod_l+0x580>)
 8009e82:	aa1e      	add	r2, sp, #120	; 0x78
 8009e84:	a81b      	add	r0, sp, #108	; 0x6c
 8009e86:	f000 ffc1 	bl	800ae0c <__hexnan>
 8009e8a:	2805      	cmp	r0, #5
 8009e8c:	d125      	bne.n	8009eda <_strtod_l+0x37a>
 8009e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e90:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009e94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e9c:	e6a1      	b.n	8009be2 <_strtod_l+0x82>
 8009e9e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8009ea2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009ea6:	e7bc      	b.n	8009e22 <_strtod_l+0x2c2>
 8009ea8:	2b6e      	cmp	r3, #110	; 0x6e
 8009eaa:	e7dc      	b.n	8009e66 <_strtod_l+0x306>
 8009eac:	498d      	ldr	r1, [pc, #564]	; (800a0e4 <_strtod_l+0x584>)
 8009eae:	a81b      	add	r0, sp, #108	; 0x6c
 8009eb0:	f000 ff98 	bl	800ade4 <__match>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f43f aeb0 	beq.w	8009c1a <_strtod_l+0xba>
 8009eba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ebc:	498a      	ldr	r1, [pc, #552]	; (800a0e8 <_strtod_l+0x588>)
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	a81b      	add	r0, sp, #108	; 0x6c
 8009ec2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ec4:	f000 ff8e 	bl	800ade4 <__match>
 8009ec8:	b910      	cbnz	r0, 8009ed0 <_strtod_l+0x370>
 8009eca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ecc:	3301      	adds	r3, #1
 8009ece:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ed0:	f04f 0800 	mov.w	r8, #0
 8009ed4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800a0f8 <_strtod_l+0x598>
 8009ed8:	e683      	b.n	8009be2 <_strtod_l+0x82>
 8009eda:	4884      	ldr	r0, [pc, #528]	; (800a0ec <_strtod_l+0x58c>)
 8009edc:	f002 f8a6 	bl	800c02c <nan>
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4689      	mov	r9, r1
 8009ee4:	e67d      	b.n	8009be2 <_strtod_l+0x82>
 8009ee6:	9b04      	ldr	r3, [sp, #16]
 8009ee8:	f1bb 0f00 	cmp.w	fp, #0
 8009eec:	bf08      	it	eq
 8009eee:	46a3      	moveq	fp, r4
 8009ef0:	1aeb      	subs	r3, r5, r3
 8009ef2:	2c10      	cmp	r4, #16
 8009ef4:	9806      	ldr	r0, [sp, #24]
 8009ef6:	4626      	mov	r6, r4
 8009ef8:	9307      	str	r3, [sp, #28]
 8009efa:	bfa8      	it	ge
 8009efc:	2610      	movge	r6, #16
 8009efe:	f7f6 fa93 	bl	8000428 <__aeabi_ui2d>
 8009f02:	2c09      	cmp	r4, #9
 8009f04:	4680      	mov	r8, r0
 8009f06:	4689      	mov	r9, r1
 8009f08:	dd13      	ble.n	8009f32 <_strtod_l+0x3d2>
 8009f0a:	4b79      	ldr	r3, [pc, #484]	; (800a0f0 <_strtod_l+0x590>)
 8009f0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f10:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f14:	f7f6 fb02 	bl	800051c <__aeabi_dmul>
 8009f18:	4680      	mov	r8, r0
 8009f1a:	9805      	ldr	r0, [sp, #20]
 8009f1c:	4689      	mov	r9, r1
 8009f1e:	f7f6 fa83 	bl	8000428 <__aeabi_ui2d>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4640      	mov	r0, r8
 8009f28:	4649      	mov	r1, r9
 8009f2a:	f7f6 f941 	bl	80001b0 <__adddf3>
 8009f2e:	4680      	mov	r8, r0
 8009f30:	4689      	mov	r9, r1
 8009f32:	2c0f      	cmp	r4, #15
 8009f34:	dc36      	bgt.n	8009fa4 <_strtod_l+0x444>
 8009f36:	9b07      	ldr	r3, [sp, #28]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f43f ae52 	beq.w	8009be2 <_strtod_l+0x82>
 8009f3e:	dd22      	ble.n	8009f86 <_strtod_l+0x426>
 8009f40:	2b16      	cmp	r3, #22
 8009f42:	dc09      	bgt.n	8009f58 <_strtod_l+0x3f8>
 8009f44:	4c6a      	ldr	r4, [pc, #424]	; (800a0f0 <_strtod_l+0x590>)
 8009f46:	4642      	mov	r2, r8
 8009f48:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009f52:	f7f6 fae3 	bl	800051c <__aeabi_dmul>
 8009f56:	e7c3      	b.n	8009ee0 <_strtod_l+0x380>
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	db20      	blt.n	8009fa4 <_strtod_l+0x444>
 8009f62:	4d63      	ldr	r5, [pc, #396]	; (800a0f0 <_strtod_l+0x590>)
 8009f64:	f1c4 040f 	rsb	r4, r4, #15
 8009f68:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f72:	464b      	mov	r3, r9
 8009f74:	f7f6 fad2 	bl	800051c <__aeabi_dmul>
 8009f78:	9b07      	ldr	r3, [sp, #28]
 8009f7a:	1b1c      	subs	r4, r3, r4
 8009f7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009f80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f84:	e7e5      	b.n	8009f52 <_strtod_l+0x3f2>
 8009f86:	9b07      	ldr	r3, [sp, #28]
 8009f88:	3316      	adds	r3, #22
 8009f8a:	db0b      	blt.n	8009fa4 <_strtod_l+0x444>
 8009f8c:	9b04      	ldr	r3, [sp, #16]
 8009f8e:	4a58      	ldr	r2, [pc, #352]	; (800a0f0 <_strtod_l+0x590>)
 8009f90:	1b5d      	subs	r5, r3, r5
 8009f92:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009f96:	4640      	mov	r0, r8
 8009f98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	f7f6 fbe7 	bl	8000770 <__aeabi_ddiv>
 8009fa2:	e79d      	b.n	8009ee0 <_strtod_l+0x380>
 8009fa4:	9b07      	ldr	r3, [sp, #28]
 8009fa6:	1ba6      	subs	r6, r4, r6
 8009fa8:	441e      	add	r6, r3
 8009faa:	2e00      	cmp	r6, #0
 8009fac:	dd71      	ble.n	800a092 <_strtod_l+0x532>
 8009fae:	f016 030f 	ands.w	r3, r6, #15
 8009fb2:	d00a      	beq.n	8009fca <_strtod_l+0x46a>
 8009fb4:	494e      	ldr	r1, [pc, #312]	; (800a0f0 <_strtod_l+0x590>)
 8009fb6:	4642      	mov	r2, r8
 8009fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fc0:	464b      	mov	r3, r9
 8009fc2:	f7f6 faab 	bl	800051c <__aeabi_dmul>
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	4689      	mov	r9, r1
 8009fca:	f036 060f 	bics.w	r6, r6, #15
 8009fce:	d050      	beq.n	800a072 <_strtod_l+0x512>
 8009fd0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009fd4:	dd27      	ble.n	800a026 <_strtod_l+0x4c6>
 8009fd6:	f04f 0b00 	mov.w	fp, #0
 8009fda:	f8cd b010 	str.w	fp, [sp, #16]
 8009fde:	f8cd b020 	str.w	fp, [sp, #32]
 8009fe2:	f8cd b018 	str.w	fp, [sp, #24]
 8009fe6:	2322      	movs	r3, #34	; 0x22
 8009fe8:	f04f 0800 	mov.w	r8, #0
 8009fec:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a0f8 <_strtod_l+0x598>
 8009ff0:	f8ca 3000 	str.w	r3, [sl]
 8009ff4:	9b08      	ldr	r3, [sp, #32]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f43f adf3 	beq.w	8009be2 <_strtod_l+0x82>
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a000:	f000 fffa 	bl	800aff8 <_Bfree>
 800a004:	4650      	mov	r0, sl
 800a006:	9906      	ldr	r1, [sp, #24]
 800a008:	f000 fff6 	bl	800aff8 <_Bfree>
 800a00c:	4650      	mov	r0, sl
 800a00e:	9904      	ldr	r1, [sp, #16]
 800a010:	f000 fff2 	bl	800aff8 <_Bfree>
 800a014:	4650      	mov	r0, sl
 800a016:	9908      	ldr	r1, [sp, #32]
 800a018:	f000 ffee 	bl	800aff8 <_Bfree>
 800a01c:	4659      	mov	r1, fp
 800a01e:	4650      	mov	r0, sl
 800a020:	f000 ffea 	bl	800aff8 <_Bfree>
 800a024:	e5dd      	b.n	8009be2 <_strtod_l+0x82>
 800a026:	2300      	movs	r3, #0
 800a028:	4640      	mov	r0, r8
 800a02a:	4649      	mov	r1, r9
 800a02c:	461f      	mov	r7, r3
 800a02e:	1136      	asrs	r6, r6, #4
 800a030:	2e01      	cmp	r6, #1
 800a032:	dc21      	bgt.n	800a078 <_strtod_l+0x518>
 800a034:	b10b      	cbz	r3, 800a03a <_strtod_l+0x4da>
 800a036:	4680      	mov	r8, r0
 800a038:	4689      	mov	r9, r1
 800a03a:	4b2e      	ldr	r3, [pc, #184]	; (800a0f4 <_strtod_l+0x594>)
 800a03c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a040:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a044:	4642      	mov	r2, r8
 800a046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a04a:	464b      	mov	r3, r9
 800a04c:	f7f6 fa66 	bl	800051c <__aeabi_dmul>
 800a050:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <_strtod_l+0x598>)
 800a052:	460a      	mov	r2, r1
 800a054:	400b      	ands	r3, r1
 800a056:	4929      	ldr	r1, [pc, #164]	; (800a0fc <_strtod_l+0x59c>)
 800a058:	4680      	mov	r8, r0
 800a05a:	428b      	cmp	r3, r1
 800a05c:	d8bb      	bhi.n	8009fd6 <_strtod_l+0x476>
 800a05e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a062:	428b      	cmp	r3, r1
 800a064:	bf86      	itte	hi
 800a066:	f04f 38ff 	movhi.w	r8, #4294967295
 800a06a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a100 <_strtod_l+0x5a0>
 800a06e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a072:	2300      	movs	r3, #0
 800a074:	9305      	str	r3, [sp, #20]
 800a076:	e07e      	b.n	800a176 <_strtod_l+0x616>
 800a078:	07f2      	lsls	r2, r6, #31
 800a07a:	d507      	bpl.n	800a08c <_strtod_l+0x52c>
 800a07c:	4b1d      	ldr	r3, [pc, #116]	; (800a0f4 <_strtod_l+0x594>)
 800a07e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 fa49 	bl	800051c <__aeabi_dmul>
 800a08a:	2301      	movs	r3, #1
 800a08c:	3701      	adds	r7, #1
 800a08e:	1076      	asrs	r6, r6, #1
 800a090:	e7ce      	b.n	800a030 <_strtod_l+0x4d0>
 800a092:	d0ee      	beq.n	800a072 <_strtod_l+0x512>
 800a094:	4276      	negs	r6, r6
 800a096:	f016 020f 	ands.w	r2, r6, #15
 800a09a:	d00a      	beq.n	800a0b2 <_strtod_l+0x552>
 800a09c:	4b14      	ldr	r3, [pc, #80]	; (800a0f0 <_strtod_l+0x590>)
 800a09e:	4640      	mov	r0, r8
 800a0a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 fb61 	bl	8000770 <__aeabi_ddiv>
 800a0ae:	4680      	mov	r8, r0
 800a0b0:	4689      	mov	r9, r1
 800a0b2:	1136      	asrs	r6, r6, #4
 800a0b4:	d0dd      	beq.n	800a072 <_strtod_l+0x512>
 800a0b6:	2e1f      	cmp	r6, #31
 800a0b8:	dd24      	ble.n	800a104 <_strtod_l+0x5a4>
 800a0ba:	f04f 0b00 	mov.w	fp, #0
 800a0be:	f8cd b010 	str.w	fp, [sp, #16]
 800a0c2:	f8cd b020 	str.w	fp, [sp, #32]
 800a0c6:	f8cd b018 	str.w	fp, [sp, #24]
 800a0ca:	2322      	movs	r3, #34	; 0x22
 800a0cc:	f04f 0800 	mov.w	r8, #0
 800a0d0:	f04f 0900 	mov.w	r9, #0
 800a0d4:	f8ca 3000 	str.w	r3, [sl]
 800a0d8:	e78c      	b.n	8009ff4 <_strtod_l+0x494>
 800a0da:	bf00      	nop
 800a0dc:	0800ca65 	.word	0x0800ca65
 800a0e0:	0800ca7c 	.word	0x0800ca7c
 800a0e4:	0800ca5c 	.word	0x0800ca5c
 800a0e8:	0800ca5f 	.word	0x0800ca5f
 800a0ec:	0800cb6b 	.word	0x0800cb6b
 800a0f0:	0800cc88 	.word	0x0800cc88
 800a0f4:	0800cc60 	.word	0x0800cc60
 800a0f8:	7ff00000 	.word	0x7ff00000
 800a0fc:	7ca00000 	.word	0x7ca00000
 800a100:	7fefffff 	.word	0x7fefffff
 800a104:	f016 0310 	ands.w	r3, r6, #16
 800a108:	bf18      	it	ne
 800a10a:	236a      	movne	r3, #106	; 0x6a
 800a10c:	4640      	mov	r0, r8
 800a10e:	9305      	str	r3, [sp, #20]
 800a110:	4649      	mov	r1, r9
 800a112:	2300      	movs	r3, #0
 800a114:	4fb2      	ldr	r7, [pc, #712]	; (800a3e0 <_strtod_l+0x880>)
 800a116:	07f2      	lsls	r2, r6, #31
 800a118:	d504      	bpl.n	800a124 <_strtod_l+0x5c4>
 800a11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11e:	f7f6 f9fd 	bl	800051c <__aeabi_dmul>
 800a122:	2301      	movs	r3, #1
 800a124:	1076      	asrs	r6, r6, #1
 800a126:	f107 0708 	add.w	r7, r7, #8
 800a12a:	d1f4      	bne.n	800a116 <_strtod_l+0x5b6>
 800a12c:	b10b      	cbz	r3, 800a132 <_strtod_l+0x5d2>
 800a12e:	4680      	mov	r8, r0
 800a130:	4689      	mov	r9, r1
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	b1bb      	cbz	r3, 800a166 <_strtod_l+0x606>
 800a136:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800a13a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a13e:	2b00      	cmp	r3, #0
 800a140:	4649      	mov	r1, r9
 800a142:	dd10      	ble.n	800a166 <_strtod_l+0x606>
 800a144:	2b1f      	cmp	r3, #31
 800a146:	f340 812b 	ble.w	800a3a0 <_strtod_l+0x840>
 800a14a:	2b34      	cmp	r3, #52	; 0x34
 800a14c:	bfd8      	it	le
 800a14e:	f04f 32ff 	movle.w	r2, #4294967295
 800a152:	f04f 0800 	mov.w	r8, #0
 800a156:	bfcf      	iteee	gt
 800a158:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a15c:	3b20      	suble	r3, #32
 800a15e:	fa02 f303 	lslle.w	r3, r2, r3
 800a162:	ea03 0901 	andle.w	r9, r3, r1
 800a166:	2200      	movs	r2, #0
 800a168:	2300      	movs	r3, #0
 800a16a:	4640      	mov	r0, r8
 800a16c:	4649      	mov	r1, r9
 800a16e:	f7f6 fc3d 	bl	80009ec <__aeabi_dcmpeq>
 800a172:	2800      	cmp	r0, #0
 800a174:	d1a1      	bne.n	800a0ba <_strtod_l+0x55a>
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	465a      	mov	r2, fp
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	4650      	mov	r0, sl
 800a17e:	4623      	mov	r3, r4
 800a180:	9908      	ldr	r1, [sp, #32]
 800a182:	f000 ffa5 	bl	800b0d0 <__s2b>
 800a186:	9008      	str	r0, [sp, #32]
 800a188:	2800      	cmp	r0, #0
 800a18a:	f43f af24 	beq.w	8009fd6 <_strtod_l+0x476>
 800a18e:	9b04      	ldr	r3, [sp, #16]
 800a190:	f04f 0b00 	mov.w	fp, #0
 800a194:	1b5d      	subs	r5, r3, r5
 800a196:	9b07      	ldr	r3, [sp, #28]
 800a198:	f8cd b010 	str.w	fp, [sp, #16]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	bfb4      	ite	lt
 800a1a0:	462b      	movlt	r3, r5
 800a1a2:	2300      	movge	r3, #0
 800a1a4:	930e      	str	r3, [sp, #56]	; 0x38
 800a1a6:	9b07      	ldr	r3, [sp, #28]
 800a1a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1ac:	9316      	str	r3, [sp, #88]	; 0x58
 800a1ae:	9b08      	ldr	r3, [sp, #32]
 800a1b0:	4650      	mov	r0, sl
 800a1b2:	6859      	ldr	r1, [r3, #4]
 800a1b4:	f000 fee0 	bl	800af78 <_Balloc>
 800a1b8:	9006      	str	r0, [sp, #24]
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f43f af13 	beq.w	8009fe6 <_strtod_l+0x486>
 800a1c0:	9b08      	ldr	r3, [sp, #32]
 800a1c2:	300c      	adds	r0, #12
 800a1c4:	691a      	ldr	r2, [r3, #16]
 800a1c6:	f103 010c 	add.w	r1, r3, #12
 800a1ca:	3202      	adds	r2, #2
 800a1cc:	0092      	lsls	r2, r2, #2
 800a1ce:	f7ff fc85 	bl	8009adc <memcpy>
 800a1d2:	ab1e      	add	r3, sp, #120	; 0x78
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	4642      	mov	r2, r8
 800a1dc:	464b      	mov	r3, r9
 800a1de:	4650      	mov	r0, sl
 800a1e0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800a1e4:	f001 fab2 	bl	800b74c <__d2b>
 800a1e8:	901c      	str	r0, [sp, #112]	; 0x70
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f43f aefb 	beq.w	8009fe6 <_strtod_l+0x486>
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	f001 f804 	bl	800b200 <__i2b>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	9004      	str	r0, [sp, #16]
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f43f aef2 	beq.w	8009fe6 <_strtod_l+0x486>
 800a202:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a204:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a206:	2d00      	cmp	r5, #0
 800a208:	bfab      	itete	ge
 800a20a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a20c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a20e:	18ee      	addge	r6, r5, r3
 800a210:	1b5c      	sublt	r4, r3, r5
 800a212:	9b05      	ldr	r3, [sp, #20]
 800a214:	bfa8      	it	ge
 800a216:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a218:	eba5 0503 	sub.w	r5, r5, r3
 800a21c:	4415      	add	r5, r2
 800a21e:	4b71      	ldr	r3, [pc, #452]	; (800a3e4 <_strtod_l+0x884>)
 800a220:	f105 35ff 	add.w	r5, r5, #4294967295
 800a224:	bfb8      	it	lt
 800a226:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a228:	429d      	cmp	r5, r3
 800a22a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a22e:	f280 80c9 	bge.w	800a3c4 <_strtod_l+0x864>
 800a232:	1b5b      	subs	r3, r3, r5
 800a234:	2b1f      	cmp	r3, #31
 800a236:	f04f 0701 	mov.w	r7, #1
 800a23a:	eba2 0203 	sub.w	r2, r2, r3
 800a23e:	f300 80b6 	bgt.w	800a3ae <_strtod_l+0x84e>
 800a242:	2500      	movs	r5, #0
 800a244:	fa07 f303 	lsl.w	r3, r7, r3
 800a248:	930f      	str	r3, [sp, #60]	; 0x3c
 800a24a:	18b7      	adds	r7, r6, r2
 800a24c:	9b05      	ldr	r3, [sp, #20]
 800a24e:	42be      	cmp	r6, r7
 800a250:	4414      	add	r4, r2
 800a252:	441c      	add	r4, r3
 800a254:	4633      	mov	r3, r6
 800a256:	bfa8      	it	ge
 800a258:	463b      	movge	r3, r7
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	bfa8      	it	ge
 800a25e:	4623      	movge	r3, r4
 800a260:	2b00      	cmp	r3, #0
 800a262:	bfc2      	ittt	gt
 800a264:	1aff      	subgt	r7, r7, r3
 800a266:	1ae4      	subgt	r4, r4, r3
 800a268:	1af6      	subgt	r6, r6, r3
 800a26a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dd17      	ble.n	800a2a0 <_strtod_l+0x740>
 800a270:	461a      	mov	r2, r3
 800a272:	4650      	mov	r0, sl
 800a274:	9904      	ldr	r1, [sp, #16]
 800a276:	f001 f87d 	bl	800b374 <__pow5mult>
 800a27a:	9004      	str	r0, [sp, #16]
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f43f aeb2 	beq.w	8009fe6 <_strtod_l+0x486>
 800a282:	4601      	mov	r1, r0
 800a284:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a286:	4650      	mov	r0, sl
 800a288:	f000 ffd0 	bl	800b22c <__multiply>
 800a28c:	9009      	str	r0, [sp, #36]	; 0x24
 800a28e:	2800      	cmp	r0, #0
 800a290:	f43f aea9 	beq.w	8009fe6 <_strtod_l+0x486>
 800a294:	4650      	mov	r0, sl
 800a296:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a298:	f000 feae 	bl	800aff8 <_Bfree>
 800a29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a29e:	931c      	str	r3, [sp, #112]	; 0x70
 800a2a0:	2f00      	cmp	r7, #0
 800a2a2:	f300 8093 	bgt.w	800a3cc <_strtod_l+0x86c>
 800a2a6:	9b07      	ldr	r3, [sp, #28]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dd08      	ble.n	800a2be <_strtod_l+0x75e>
 800a2ac:	4650      	mov	r0, sl
 800a2ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2b0:	9906      	ldr	r1, [sp, #24]
 800a2b2:	f001 f85f 	bl	800b374 <__pow5mult>
 800a2b6:	9006      	str	r0, [sp, #24]
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	f43f ae94 	beq.w	8009fe6 <_strtod_l+0x486>
 800a2be:	2c00      	cmp	r4, #0
 800a2c0:	dd08      	ble.n	800a2d4 <_strtod_l+0x774>
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	4650      	mov	r0, sl
 800a2c6:	9906      	ldr	r1, [sp, #24]
 800a2c8:	f001 f8ae 	bl	800b428 <__lshift>
 800a2cc:	9006      	str	r0, [sp, #24]
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	f43f ae89 	beq.w	8009fe6 <_strtod_l+0x486>
 800a2d4:	2e00      	cmp	r6, #0
 800a2d6:	dd08      	ble.n	800a2ea <_strtod_l+0x78a>
 800a2d8:	4632      	mov	r2, r6
 800a2da:	4650      	mov	r0, sl
 800a2dc:	9904      	ldr	r1, [sp, #16]
 800a2de:	f001 f8a3 	bl	800b428 <__lshift>
 800a2e2:	9004      	str	r0, [sp, #16]
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f43f ae7e 	beq.w	8009fe6 <_strtod_l+0x486>
 800a2ea:	4650      	mov	r0, sl
 800a2ec:	9a06      	ldr	r2, [sp, #24]
 800a2ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2f0:	f001 f922 	bl	800b538 <__mdiff>
 800a2f4:	4683      	mov	fp, r0
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	f43f ae75 	beq.w	8009fe6 <_strtod_l+0x486>
 800a2fc:	2400      	movs	r4, #0
 800a2fe:	68c3      	ldr	r3, [r0, #12]
 800a300:	9904      	ldr	r1, [sp, #16]
 800a302:	60c4      	str	r4, [r0, #12]
 800a304:	930d      	str	r3, [sp, #52]	; 0x34
 800a306:	f001 f8fb 	bl	800b500 <__mcmp>
 800a30a:	42a0      	cmp	r0, r4
 800a30c:	da70      	bge.n	800a3f0 <_strtod_l+0x890>
 800a30e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a310:	ea53 0308 	orrs.w	r3, r3, r8
 800a314:	f040 8096 	bne.w	800a444 <_strtod_l+0x8e4>
 800a318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 8091 	bne.w	800a444 <_strtod_l+0x8e4>
 800a322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a326:	0d1b      	lsrs	r3, r3, #20
 800a328:	051b      	lsls	r3, r3, #20
 800a32a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a32e:	f240 8089 	bls.w	800a444 <_strtod_l+0x8e4>
 800a332:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a336:	b923      	cbnz	r3, 800a342 <_strtod_l+0x7e2>
 800a338:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	f340 8081 	ble.w	800a444 <_strtod_l+0x8e4>
 800a342:	4659      	mov	r1, fp
 800a344:	2201      	movs	r2, #1
 800a346:	4650      	mov	r0, sl
 800a348:	f001 f86e 	bl	800b428 <__lshift>
 800a34c:	9904      	ldr	r1, [sp, #16]
 800a34e:	4683      	mov	fp, r0
 800a350:	f001 f8d6 	bl	800b500 <__mcmp>
 800a354:	2800      	cmp	r0, #0
 800a356:	dd75      	ble.n	800a444 <_strtod_l+0x8e4>
 800a358:	9905      	ldr	r1, [sp, #20]
 800a35a:	464b      	mov	r3, r9
 800a35c:	4a22      	ldr	r2, [pc, #136]	; (800a3e8 <_strtod_l+0x888>)
 800a35e:	2900      	cmp	r1, #0
 800a360:	f000 8091 	beq.w	800a486 <_strtod_l+0x926>
 800a364:	ea02 0109 	and.w	r1, r2, r9
 800a368:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a36c:	f300 808b 	bgt.w	800a486 <_strtod_l+0x926>
 800a370:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a374:	f77f aea9 	ble.w	800a0ca <_strtod_l+0x56a>
 800a378:	2300      	movs	r3, #0
 800a37a:	4a1c      	ldr	r2, [pc, #112]	; (800a3ec <_strtod_l+0x88c>)
 800a37c:	4640      	mov	r0, r8
 800a37e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a382:	4649      	mov	r1, r9
 800a384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a388:	f7f6 f8c8 	bl	800051c <__aeabi_dmul>
 800a38c:	460b      	mov	r3, r1
 800a38e:	4303      	orrs	r3, r0
 800a390:	bf08      	it	eq
 800a392:	2322      	moveq	r3, #34	; 0x22
 800a394:	4680      	mov	r8, r0
 800a396:	4689      	mov	r9, r1
 800a398:	bf08      	it	eq
 800a39a:	f8ca 3000 	streq.w	r3, [sl]
 800a39e:	e62d      	b.n	8009ffc <_strtod_l+0x49c>
 800a3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a8:	ea03 0808 	and.w	r8, r3, r8
 800a3ac:	e6db      	b.n	800a166 <_strtod_l+0x606>
 800a3ae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a3b2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a3b6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a3ba:	35e2      	adds	r5, #226	; 0xe2
 800a3bc:	fa07 f505 	lsl.w	r5, r7, r5
 800a3c0:	970f      	str	r7, [sp, #60]	; 0x3c
 800a3c2:	e742      	b.n	800a24a <_strtod_l+0x6ea>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	2500      	movs	r5, #0
 800a3c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3ca:	e73e      	b.n	800a24a <_strtod_l+0x6ea>
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3d2:	f001 f829 	bl	800b428 <__lshift>
 800a3d6:	901c      	str	r0, [sp, #112]	; 0x70
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	f47f af64 	bne.w	800a2a6 <_strtod_l+0x746>
 800a3de:	e602      	b.n	8009fe6 <_strtod_l+0x486>
 800a3e0:	0800ca90 	.word	0x0800ca90
 800a3e4:	fffffc02 	.word	0xfffffc02
 800a3e8:	7ff00000 	.word	0x7ff00000
 800a3ec:	39500000 	.word	0x39500000
 800a3f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a3f4:	d166      	bne.n	800a4c4 <_strtod_l+0x964>
 800a3f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3fc:	b35a      	cbz	r2, 800a456 <_strtod_l+0x8f6>
 800a3fe:	4a9c      	ldr	r2, [pc, #624]	; (800a670 <_strtod_l+0xb10>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d12c      	bne.n	800a45e <_strtod_l+0x8fe>
 800a404:	9b05      	ldr	r3, [sp, #20]
 800a406:	4640      	mov	r0, r8
 800a408:	b303      	cbz	r3, 800a44c <_strtod_l+0x8ec>
 800a40a:	464b      	mov	r3, r9
 800a40c:	4a99      	ldr	r2, [pc, #612]	; (800a674 <_strtod_l+0xb14>)
 800a40e:	f04f 31ff 	mov.w	r1, #4294967295
 800a412:	401a      	ands	r2, r3
 800a414:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a418:	d81b      	bhi.n	800a452 <_strtod_l+0x8f2>
 800a41a:	0d12      	lsrs	r2, r2, #20
 800a41c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a420:	fa01 f303 	lsl.w	r3, r1, r3
 800a424:	4298      	cmp	r0, r3
 800a426:	d11a      	bne.n	800a45e <_strtod_l+0x8fe>
 800a428:	4b93      	ldr	r3, [pc, #588]	; (800a678 <_strtod_l+0xb18>)
 800a42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d102      	bne.n	800a436 <_strtod_l+0x8d6>
 800a430:	3001      	adds	r0, #1
 800a432:	f43f add8 	beq.w	8009fe6 <_strtod_l+0x486>
 800a436:	f04f 0800 	mov.w	r8, #0
 800a43a:	4b8e      	ldr	r3, [pc, #568]	; (800a674 <_strtod_l+0xb14>)
 800a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43e:	401a      	ands	r2, r3
 800a440:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a444:	9b05      	ldr	r3, [sp, #20]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d196      	bne.n	800a378 <_strtod_l+0x818>
 800a44a:	e5d7      	b.n	8009ffc <_strtod_l+0x49c>
 800a44c:	f04f 33ff 	mov.w	r3, #4294967295
 800a450:	e7e8      	b.n	800a424 <_strtod_l+0x8c4>
 800a452:	460b      	mov	r3, r1
 800a454:	e7e6      	b.n	800a424 <_strtod_l+0x8c4>
 800a456:	ea53 0308 	orrs.w	r3, r3, r8
 800a45a:	f43f af7d 	beq.w	800a358 <_strtod_l+0x7f8>
 800a45e:	b1e5      	cbz	r5, 800a49a <_strtod_l+0x93a>
 800a460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a462:	421d      	tst	r5, r3
 800a464:	d0ee      	beq.n	800a444 <_strtod_l+0x8e4>
 800a466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a468:	4640      	mov	r0, r8
 800a46a:	4649      	mov	r1, r9
 800a46c:	9a05      	ldr	r2, [sp, #20]
 800a46e:	b1c3      	cbz	r3, 800a4a2 <_strtod_l+0x942>
 800a470:	f7ff fb52 	bl	8009b18 <sulp>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a47c:	f7f5 fe98 	bl	80001b0 <__adddf3>
 800a480:	4680      	mov	r8, r0
 800a482:	4689      	mov	r9, r1
 800a484:	e7de      	b.n	800a444 <_strtod_l+0x8e4>
 800a486:	4013      	ands	r3, r2
 800a488:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a48c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a490:	f04f 38ff 	mov.w	r8, #4294967295
 800a494:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a498:	e7d4      	b.n	800a444 <_strtod_l+0x8e4>
 800a49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a49c:	ea13 0f08 	tst.w	r3, r8
 800a4a0:	e7e0      	b.n	800a464 <_strtod_l+0x904>
 800a4a2:	f7ff fb39 	bl	8009b18 <sulp>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4ae:	f7f5 fe7d 	bl	80001ac <__aeabi_dsub>
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4680      	mov	r8, r0
 800a4b8:	4689      	mov	r9, r1
 800a4ba:	f7f6 fa97 	bl	80009ec <__aeabi_dcmpeq>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d0c0      	beq.n	800a444 <_strtod_l+0x8e4>
 800a4c2:	e602      	b.n	800a0ca <_strtod_l+0x56a>
 800a4c4:	4658      	mov	r0, fp
 800a4c6:	9904      	ldr	r1, [sp, #16]
 800a4c8:	f001 f99c 	bl	800b804 <__ratio>
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	f7f6 fa9d 	bl	8000a14 <__aeabi_dcmple>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d075      	beq.n	800a5ca <_strtod_l+0xa6a>
 800a4de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d047      	beq.n	800a574 <_strtod_l+0xa14>
 800a4e4:	2600      	movs	r6, #0
 800a4e6:	4f65      	ldr	r7, [pc, #404]	; (800a67c <_strtod_l+0xb1c>)
 800a4e8:	4d64      	ldr	r5, [pc, #400]	; (800a67c <_strtod_l+0xb1c>)
 800a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f0:	0d1b      	lsrs	r3, r3, #20
 800a4f2:	051b      	lsls	r3, r3, #20
 800a4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4f8:	4b61      	ldr	r3, [pc, #388]	; (800a680 <_strtod_l+0xb20>)
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	f040 80c8 	bne.w	800a690 <_strtod_l+0xb30>
 800a500:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a504:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50a:	4640      	mov	r0, r8
 800a50c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a510:	4649      	mov	r1, r9
 800a512:	f001 f8a1 	bl	800b658 <__ulp>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4630      	mov	r0, r6
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7f5 fffd 	bl	800051c <__aeabi_dmul>
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	f7f5 fe43 	bl	80001b0 <__adddf3>
 800a52a:	460b      	mov	r3, r1
 800a52c:	4951      	ldr	r1, [pc, #324]	; (800a674 <_strtod_l+0xb14>)
 800a52e:	4a55      	ldr	r2, [pc, #340]	; (800a684 <_strtod_l+0xb24>)
 800a530:	4019      	ands	r1, r3
 800a532:	4291      	cmp	r1, r2
 800a534:	4680      	mov	r8, r0
 800a536:	d95e      	bls.n	800a5f6 <_strtod_l+0xa96>
 800a538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a53a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a53e:	4293      	cmp	r3, r2
 800a540:	d103      	bne.n	800a54a <_strtod_l+0x9ea>
 800a542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a544:	3301      	adds	r3, #1
 800a546:	f43f ad4e 	beq.w	8009fe6 <_strtod_l+0x486>
 800a54a:	f04f 38ff 	mov.w	r8, #4294967295
 800a54e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a678 <_strtod_l+0xb18>
 800a552:	4650      	mov	r0, sl
 800a554:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a556:	f000 fd4f 	bl	800aff8 <_Bfree>
 800a55a:	4650      	mov	r0, sl
 800a55c:	9906      	ldr	r1, [sp, #24]
 800a55e:	f000 fd4b 	bl	800aff8 <_Bfree>
 800a562:	4650      	mov	r0, sl
 800a564:	9904      	ldr	r1, [sp, #16]
 800a566:	f000 fd47 	bl	800aff8 <_Bfree>
 800a56a:	4659      	mov	r1, fp
 800a56c:	4650      	mov	r0, sl
 800a56e:	f000 fd43 	bl	800aff8 <_Bfree>
 800a572:	e61c      	b.n	800a1ae <_strtod_l+0x64e>
 800a574:	f1b8 0f00 	cmp.w	r8, #0
 800a578:	d119      	bne.n	800a5ae <_strtod_l+0xa4e>
 800a57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a580:	b9e3      	cbnz	r3, 800a5bc <_strtod_l+0xa5c>
 800a582:	2200      	movs	r2, #0
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	4b3c      	ldr	r3, [pc, #240]	; (800a67c <_strtod_l+0xb1c>)
 800a58a:	f7f6 fa39 	bl	8000a00 <__aeabi_dcmplt>
 800a58e:	b9c8      	cbnz	r0, 800a5c4 <_strtod_l+0xa64>
 800a590:	2200      	movs	r2, #0
 800a592:	4630      	mov	r0, r6
 800a594:	4639      	mov	r1, r7
 800a596:	4b3c      	ldr	r3, [pc, #240]	; (800a688 <_strtod_l+0xb28>)
 800a598:	f7f5 ffc0 	bl	800051c <__aeabi_dmul>
 800a59c:	4604      	mov	r4, r0
 800a59e:	460d      	mov	r5, r1
 800a5a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a5a4:	9418      	str	r4, [sp, #96]	; 0x60
 800a5a6:	9319      	str	r3, [sp, #100]	; 0x64
 800a5a8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a5ac:	e79d      	b.n	800a4ea <_strtod_l+0x98a>
 800a5ae:	f1b8 0f01 	cmp.w	r8, #1
 800a5b2:	d103      	bne.n	800a5bc <_strtod_l+0xa5c>
 800a5b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f43f ad87 	beq.w	800a0ca <_strtod_l+0x56a>
 800a5bc:	2600      	movs	r6, #0
 800a5be:	2400      	movs	r4, #0
 800a5c0:	4f32      	ldr	r7, [pc, #200]	; (800a68c <_strtod_l+0xb2c>)
 800a5c2:	e791      	b.n	800a4e8 <_strtod_l+0x988>
 800a5c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a5c6:	4d30      	ldr	r5, [pc, #192]	; (800a688 <_strtod_l+0xb28>)
 800a5c8:	e7ea      	b.n	800a5a0 <_strtod_l+0xa40>
 800a5ca:	4b2f      	ldr	r3, [pc, #188]	; (800a688 <_strtod_l+0xb28>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f5 ffa3 	bl	800051c <__aeabi_dmul>
 800a5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5d8:	4604      	mov	r4, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	b933      	cbnz	r3, 800a5ec <_strtod_l+0xa8c>
 800a5de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5e2:	9010      	str	r0, [sp, #64]	; 0x40
 800a5e4:	9311      	str	r3, [sp, #68]	; 0x44
 800a5e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a5ea:	e77e      	b.n	800a4ea <_strtod_l+0x98a>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a5f4:	e7f7      	b.n	800a5e6 <_strtod_l+0xa86>
 800a5f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a5fa:	9b05      	ldr	r3, [sp, #20]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1a8      	bne.n	800a552 <_strtod_l+0x9f2>
 800a600:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a604:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a606:	0d1b      	lsrs	r3, r3, #20
 800a608:	051b      	lsls	r3, r3, #20
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d1a1      	bne.n	800a552 <_strtod_l+0x9f2>
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 fd99 	bl	8001148 <__aeabi_d2lz>
 800a616:	f7f5 ff53 	bl	80004c0 <__aeabi_l2d>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4620      	mov	r0, r4
 800a620:	4629      	mov	r1, r5
 800a622:	f7f5 fdc3 	bl	80001ac <__aeabi_dsub>
 800a626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a62c:	ea43 0308 	orr.w	r3, r3, r8
 800a630:	4313      	orrs	r3, r2
 800a632:	4604      	mov	r4, r0
 800a634:	460d      	mov	r5, r1
 800a636:	d066      	beq.n	800a706 <_strtod_l+0xba6>
 800a638:	a309      	add	r3, pc, #36	; (adr r3, 800a660 <_strtod_l+0xb00>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	f7f6 f9df 	bl	8000a00 <__aeabi_dcmplt>
 800a642:	2800      	cmp	r0, #0
 800a644:	f47f acda 	bne.w	8009ffc <_strtod_l+0x49c>
 800a648:	a307      	add	r3, pc, #28	; (adr r3, 800a668 <_strtod_l+0xb08>)
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	f7f6 f9f3 	bl	8000a3c <__aeabi_dcmpgt>
 800a656:	2800      	cmp	r0, #0
 800a658:	f43f af7b 	beq.w	800a552 <_strtod_l+0x9f2>
 800a65c:	e4ce      	b.n	8009ffc <_strtod_l+0x49c>
 800a65e:	bf00      	nop
 800a660:	94a03595 	.word	0x94a03595
 800a664:	3fdfffff 	.word	0x3fdfffff
 800a668:	35afe535 	.word	0x35afe535
 800a66c:	3fe00000 	.word	0x3fe00000
 800a670:	000fffff 	.word	0x000fffff
 800a674:	7ff00000 	.word	0x7ff00000
 800a678:	7fefffff 	.word	0x7fefffff
 800a67c:	3ff00000 	.word	0x3ff00000
 800a680:	7fe00000 	.word	0x7fe00000
 800a684:	7c9fffff 	.word	0x7c9fffff
 800a688:	3fe00000 	.word	0x3fe00000
 800a68c:	bff00000 	.word	0xbff00000
 800a690:	9b05      	ldr	r3, [sp, #20]
 800a692:	b313      	cbz	r3, 800a6da <_strtod_l+0xb7a>
 800a694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a696:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a69a:	d81e      	bhi.n	800a6da <_strtod_l+0xb7a>
 800a69c:	a326      	add	r3, pc, #152	; (adr r3, 800a738 <_strtod_l+0xbd8>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f6 f9b5 	bl	8000a14 <__aeabi_dcmple>
 800a6aa:	b190      	cbz	r0, 800a6d2 <_strtod_l+0xb72>
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f7f6 f9ce 	bl	8000a50 <__aeabi_d2uiz>
 800a6b4:	2801      	cmp	r0, #1
 800a6b6:	bf38      	it	cc
 800a6b8:	2001      	movcc	r0, #1
 800a6ba:	f7f5 feb5 	bl	8000428 <__aeabi_ui2d>
 800a6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	b9d3      	cbnz	r3, 800a6fc <_strtod_l+0xb9c>
 800a6c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6ca:	9012      	str	r0, [sp, #72]	; 0x48
 800a6cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a6d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a6d8:	1a9f      	subs	r7, r3, r2
 800a6da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6de:	f000 ffbb 	bl	800b658 <__ulp>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	f7f5 ff17 	bl	800051c <__aeabi_dmul>
 800a6ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6f2:	f7f5 fd5d 	bl	80001b0 <__adddf3>
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4689      	mov	r9, r1
 800a6fa:	e77e      	b.n	800a5fa <_strtod_l+0xa9a>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a704:	e7e3      	b.n	800a6ce <_strtod_l+0xb6e>
 800a706:	a30e      	add	r3, pc, #56	; (adr r3, 800a740 <_strtod_l+0xbe0>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f7f6 f978 	bl	8000a00 <__aeabi_dcmplt>
 800a710:	e7a1      	b.n	800a656 <_strtod_l+0xaf6>
 800a712:	2300      	movs	r3, #0
 800a714:	930c      	str	r3, [sp, #48]	; 0x30
 800a716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a718:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	f7ff ba65 	b.w	8009bea <_strtod_l+0x8a>
 800a720:	2b65      	cmp	r3, #101	; 0x65
 800a722:	f43f ab5c 	beq.w	8009dde <_strtod_l+0x27e>
 800a726:	2b45      	cmp	r3, #69	; 0x45
 800a728:	f43f ab59 	beq.w	8009dde <_strtod_l+0x27e>
 800a72c:	2201      	movs	r2, #1
 800a72e:	f7ff bb8d 	b.w	8009e4c <_strtod_l+0x2ec>
 800a732:	bf00      	nop
 800a734:	f3af 8000 	nop.w
 800a738:	ffc00000 	.word	0xffc00000
 800a73c:	41dfffff 	.word	0x41dfffff
 800a740:	94a03595 	.word	0x94a03595
 800a744:	3fcfffff 	.word	0x3fcfffff

0800a748 <strtod>:
 800a748:	460a      	mov	r2, r1
 800a74a:	4601      	mov	r1, r0
 800a74c:	4802      	ldr	r0, [pc, #8]	; (800a758 <strtod+0x10>)
 800a74e:	4b03      	ldr	r3, [pc, #12]	; (800a75c <strtod+0x14>)
 800a750:	6800      	ldr	r0, [r0, #0]
 800a752:	f7ff ba05 	b.w	8009b60 <_strtod_l>
 800a756:	bf00      	nop
 800a758:	20000194 	.word	0x20000194
 800a75c:	200001fc 	.word	0x200001fc

0800a760 <strtok>:
 800a760:	4b16      	ldr	r3, [pc, #88]	; (800a7bc <strtok+0x5c>)
 800a762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	681f      	ldr	r7, [r3, #0]
 800a768:	4605      	mov	r5, r0
 800a76a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a76c:	460e      	mov	r6, r1
 800a76e:	b9ec      	cbnz	r4, 800a7ac <strtok+0x4c>
 800a770:	2050      	movs	r0, #80	; 0x50
 800a772:	f000 fbe7 	bl	800af44 <malloc>
 800a776:	4602      	mov	r2, r0
 800a778:	65b8      	str	r0, [r7, #88]	; 0x58
 800a77a:	b920      	cbnz	r0, 800a786 <strtok+0x26>
 800a77c:	2157      	movs	r1, #87	; 0x57
 800a77e:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <strtok+0x60>)
 800a780:	4810      	ldr	r0, [pc, #64]	; (800a7c4 <strtok+0x64>)
 800a782:	f000 f849 	bl	800a818 <__assert_func>
 800a786:	e9c0 4400 	strd	r4, r4, [r0]
 800a78a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a78e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a792:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a796:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a79a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a79e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a7a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a7a6:	6184      	str	r4, [r0, #24]
 800a7a8:	7704      	strb	r4, [r0, #28]
 800a7aa:	6244      	str	r4, [r0, #36]	; 0x24
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b8:	f000 b806 	b.w	800a7c8 <__strtok_r>
 800a7bc:	20000194 	.word	0x20000194
 800a7c0:	0800cab8 	.word	0x0800cab8
 800a7c4:	0800cacf 	.word	0x0800cacf

0800a7c8 <__strtok_r>:
 800a7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ca:	b908      	cbnz	r0, 800a7d0 <__strtok_r+0x8>
 800a7cc:	6810      	ldr	r0, [r2, #0]
 800a7ce:	b188      	cbz	r0, 800a7f4 <__strtok_r+0x2c>
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460f      	mov	r7, r1
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a7da:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a7de:	b91e      	cbnz	r6, 800a7e8 <__strtok_r+0x20>
 800a7e0:	b965      	cbnz	r5, 800a7fc <__strtok_r+0x34>
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	6015      	str	r5, [r2, #0]
 800a7e6:	e005      	b.n	800a7f4 <__strtok_r+0x2c>
 800a7e8:	42b5      	cmp	r5, r6
 800a7ea:	d1f6      	bne.n	800a7da <__strtok_r+0x12>
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1f0      	bne.n	800a7d2 <__strtok_r+0xa>
 800a7f0:	6014      	str	r4, [r2, #0]
 800a7f2:	7003      	strb	r3, [r0, #0]
 800a7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f6:	461c      	mov	r4, r3
 800a7f8:	e00c      	b.n	800a814 <__strtok_r+0x4c>
 800a7fa:	b915      	cbnz	r5, 800a802 <__strtok_r+0x3a>
 800a7fc:	460e      	mov	r6, r1
 800a7fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a802:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a806:	42ab      	cmp	r3, r5
 800a808:	d1f7      	bne.n	800a7fa <__strtok_r+0x32>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0f3      	beq.n	800a7f6 <__strtok_r+0x2e>
 800a80e:	2300      	movs	r3, #0
 800a810:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a814:	6014      	str	r4, [r2, #0]
 800a816:	e7ed      	b.n	800a7f4 <__strtok_r+0x2c>

0800a818 <__assert_func>:
 800a818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a81a:	4614      	mov	r4, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	4b09      	ldr	r3, [pc, #36]	; (800a844 <__assert_func+0x2c>)
 800a820:	4605      	mov	r5, r0
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68d8      	ldr	r0, [r3, #12]
 800a826:	b14c      	cbz	r4, 800a83c <__assert_func+0x24>
 800a828:	4b07      	ldr	r3, [pc, #28]	; (800a848 <__assert_func+0x30>)
 800a82a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a82e:	9100      	str	r1, [sp, #0]
 800a830:	462b      	mov	r3, r5
 800a832:	4906      	ldr	r1, [pc, #24]	; (800a84c <__assert_func+0x34>)
 800a834:	f000 f80e 	bl	800a854 <fiprintf>
 800a838:	f001 fcee 	bl	800c218 <abort>
 800a83c:	4b04      	ldr	r3, [pc, #16]	; (800a850 <__assert_func+0x38>)
 800a83e:	461c      	mov	r4, r3
 800a840:	e7f3      	b.n	800a82a <__assert_func+0x12>
 800a842:	bf00      	nop
 800a844:	20000194 	.word	0x20000194
 800a848:	0800cb30 	.word	0x0800cb30
 800a84c:	0800cb3d 	.word	0x0800cb3d
 800a850:	0800cb6b 	.word	0x0800cb6b

0800a854 <fiprintf>:
 800a854:	b40e      	push	{r1, r2, r3}
 800a856:	b503      	push	{r0, r1, lr}
 800a858:	4601      	mov	r1, r0
 800a85a:	ab03      	add	r3, sp, #12
 800a85c:	4805      	ldr	r0, [pc, #20]	; (800a874 <fiprintf+0x20>)
 800a85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a862:	6800      	ldr	r0, [r0, #0]
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	f001 f91b 	bl	800baa0 <_vfiprintf_r>
 800a86a:	b002      	add	sp, #8
 800a86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a870:	b003      	add	sp, #12
 800a872:	4770      	bx	lr
 800a874:	20000194 	.word	0x20000194

0800a878 <rshift>:
 800a878:	6903      	ldr	r3, [r0, #16]
 800a87a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a87e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a882:	f100 0414 	add.w	r4, r0, #20
 800a886:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a88a:	dd46      	ble.n	800a91a <rshift+0xa2>
 800a88c:	f011 011f 	ands.w	r1, r1, #31
 800a890:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a894:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a898:	d10c      	bne.n	800a8b4 <rshift+0x3c>
 800a89a:	4629      	mov	r1, r5
 800a89c:	f100 0710 	add.w	r7, r0, #16
 800a8a0:	42b1      	cmp	r1, r6
 800a8a2:	d335      	bcc.n	800a910 <rshift+0x98>
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	1eea      	subs	r2, r5, #3
 800a8aa:	4296      	cmp	r6, r2
 800a8ac:	bf38      	it	cc
 800a8ae:	2300      	movcc	r3, #0
 800a8b0:	4423      	add	r3, r4
 800a8b2:	e015      	b.n	800a8e0 <rshift+0x68>
 800a8b4:	46a1      	mov	r9, r4
 800a8b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8ba:	f1c1 0820 	rsb	r8, r1, #32
 800a8be:	40cf      	lsrs	r7, r1
 800a8c0:	f105 0e04 	add.w	lr, r5, #4
 800a8c4:	4576      	cmp	r6, lr
 800a8c6:	46f4      	mov	ip, lr
 800a8c8:	d816      	bhi.n	800a8f8 <rshift+0x80>
 800a8ca:	1a9b      	subs	r3, r3, r2
 800a8cc:	009a      	lsls	r2, r3, #2
 800a8ce:	3a04      	subs	r2, #4
 800a8d0:	3501      	adds	r5, #1
 800a8d2:	42ae      	cmp	r6, r5
 800a8d4:	bf38      	it	cc
 800a8d6:	2200      	movcc	r2, #0
 800a8d8:	18a3      	adds	r3, r4, r2
 800a8da:	50a7      	str	r7, [r4, r2]
 800a8dc:	b107      	cbz	r7, 800a8e0 <rshift+0x68>
 800a8de:	3304      	adds	r3, #4
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	eba3 0204 	sub.w	r2, r3, r4
 800a8e6:	bf08      	it	eq
 800a8e8:	2300      	moveq	r3, #0
 800a8ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8ee:	6102      	str	r2, [r0, #16]
 800a8f0:	bf08      	it	eq
 800a8f2:	6143      	streq	r3, [r0, #20]
 800a8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8f8:	f8dc c000 	ldr.w	ip, [ip]
 800a8fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800a900:	ea4c 0707 	orr.w	r7, ip, r7
 800a904:	f849 7b04 	str.w	r7, [r9], #4
 800a908:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a90c:	40cf      	lsrs	r7, r1
 800a90e:	e7d9      	b.n	800a8c4 <rshift+0x4c>
 800a910:	f851 cb04 	ldr.w	ip, [r1], #4
 800a914:	f847 cf04 	str.w	ip, [r7, #4]!
 800a918:	e7c2      	b.n	800a8a0 <rshift+0x28>
 800a91a:	4623      	mov	r3, r4
 800a91c:	e7e0      	b.n	800a8e0 <rshift+0x68>

0800a91e <__hexdig_fun>:
 800a91e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a922:	2b09      	cmp	r3, #9
 800a924:	d802      	bhi.n	800a92c <__hexdig_fun+0xe>
 800a926:	3820      	subs	r0, #32
 800a928:	b2c0      	uxtb	r0, r0
 800a92a:	4770      	bx	lr
 800a92c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a930:	2b05      	cmp	r3, #5
 800a932:	d801      	bhi.n	800a938 <__hexdig_fun+0x1a>
 800a934:	3847      	subs	r0, #71	; 0x47
 800a936:	e7f7      	b.n	800a928 <__hexdig_fun+0xa>
 800a938:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a93c:	2b05      	cmp	r3, #5
 800a93e:	d801      	bhi.n	800a944 <__hexdig_fun+0x26>
 800a940:	3827      	subs	r0, #39	; 0x27
 800a942:	e7f1      	b.n	800a928 <__hexdig_fun+0xa>
 800a944:	2000      	movs	r0, #0
 800a946:	4770      	bx	lr

0800a948 <__gethex>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	b08b      	sub	sp, #44	; 0x2c
 800a94e:	9306      	str	r3, [sp, #24]
 800a950:	4bb9      	ldr	r3, [pc, #740]	; (800ac38 <__gethex+0x2f0>)
 800a952:	9002      	str	r0, [sp, #8]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	468b      	mov	fp, r1
 800a958:	4618      	mov	r0, r3
 800a95a:	4690      	mov	r8, r2
 800a95c:	9303      	str	r3, [sp, #12]
 800a95e:	f7f5 fc19 	bl	8000194 <strlen>
 800a962:	4682      	mov	sl, r0
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	f8db 2000 	ldr.w	r2, [fp]
 800a96a:	4403      	add	r3, r0
 800a96c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a970:	9307      	str	r3, [sp, #28]
 800a972:	1c93      	adds	r3, r2, #2
 800a974:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a978:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a97c:	32fe      	adds	r2, #254	; 0xfe
 800a97e:	18d1      	adds	r1, r2, r3
 800a980:	461f      	mov	r7, r3
 800a982:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a986:	9101      	str	r1, [sp, #4]
 800a988:	2830      	cmp	r0, #48	; 0x30
 800a98a:	d0f8      	beq.n	800a97e <__gethex+0x36>
 800a98c:	f7ff ffc7 	bl	800a91e <__hexdig_fun>
 800a990:	4604      	mov	r4, r0
 800a992:	2800      	cmp	r0, #0
 800a994:	d13a      	bne.n	800aa0c <__gethex+0xc4>
 800a996:	4652      	mov	r2, sl
 800a998:	4638      	mov	r0, r7
 800a99a:	9903      	ldr	r1, [sp, #12]
 800a99c:	f001 fb5c 	bl	800c058 <strncmp>
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d166      	bne.n	800aa74 <__gethex+0x12c>
 800a9a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a9aa:	eb07 060a 	add.w	r6, r7, sl
 800a9ae:	f7ff ffb6 	bl	800a91e <__hexdig_fun>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d060      	beq.n	800aa78 <__gethex+0x130>
 800a9b6:	4633      	mov	r3, r6
 800a9b8:	7818      	ldrb	r0, [r3, #0]
 800a9ba:	461f      	mov	r7, r3
 800a9bc:	2830      	cmp	r0, #48	; 0x30
 800a9be:	f103 0301 	add.w	r3, r3, #1
 800a9c2:	d0f9      	beq.n	800a9b8 <__gethex+0x70>
 800a9c4:	f7ff ffab 	bl	800a91e <__hexdig_fun>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	fab0 f480 	clz	r4, r0
 800a9ce:	4635      	mov	r5, r6
 800a9d0:	0964      	lsrs	r4, r4, #5
 800a9d2:	9301      	str	r3, [sp, #4]
 800a9d4:	463a      	mov	r2, r7
 800a9d6:	4616      	mov	r6, r2
 800a9d8:	7830      	ldrb	r0, [r6, #0]
 800a9da:	3201      	adds	r2, #1
 800a9dc:	f7ff ff9f 	bl	800a91e <__hexdig_fun>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1f8      	bne.n	800a9d6 <__gethex+0x8e>
 800a9e4:	4652      	mov	r2, sl
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	9903      	ldr	r1, [sp, #12]
 800a9ea:	f001 fb35 	bl	800c058 <strncmp>
 800a9ee:	b980      	cbnz	r0, 800aa12 <__gethex+0xca>
 800a9f0:	b94d      	cbnz	r5, 800aa06 <__gethex+0xbe>
 800a9f2:	eb06 050a 	add.w	r5, r6, sl
 800a9f6:	462a      	mov	r2, r5
 800a9f8:	4616      	mov	r6, r2
 800a9fa:	7830      	ldrb	r0, [r6, #0]
 800a9fc:	3201      	adds	r2, #1
 800a9fe:	f7ff ff8e 	bl	800a91e <__hexdig_fun>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d1f8      	bne.n	800a9f8 <__gethex+0xb0>
 800aa06:	1bad      	subs	r5, r5, r6
 800aa08:	00ad      	lsls	r5, r5, #2
 800aa0a:	e004      	b.n	800aa16 <__gethex+0xce>
 800aa0c:	2400      	movs	r4, #0
 800aa0e:	4625      	mov	r5, r4
 800aa10:	e7e0      	b.n	800a9d4 <__gethex+0x8c>
 800aa12:	2d00      	cmp	r5, #0
 800aa14:	d1f7      	bne.n	800aa06 <__gethex+0xbe>
 800aa16:	7833      	ldrb	r3, [r6, #0]
 800aa18:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa1c:	2b50      	cmp	r3, #80	; 0x50
 800aa1e:	d139      	bne.n	800aa94 <__gethex+0x14c>
 800aa20:	7873      	ldrb	r3, [r6, #1]
 800aa22:	2b2b      	cmp	r3, #43	; 0x2b
 800aa24:	d02a      	beq.n	800aa7c <__gethex+0x134>
 800aa26:	2b2d      	cmp	r3, #45	; 0x2d
 800aa28:	d02c      	beq.n	800aa84 <__gethex+0x13c>
 800aa2a:	f04f 0900 	mov.w	r9, #0
 800aa2e:	1c71      	adds	r1, r6, #1
 800aa30:	7808      	ldrb	r0, [r1, #0]
 800aa32:	f7ff ff74 	bl	800a91e <__hexdig_fun>
 800aa36:	1e43      	subs	r3, r0, #1
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b18      	cmp	r3, #24
 800aa3c:	d82a      	bhi.n	800aa94 <__gethex+0x14c>
 800aa3e:	f1a0 0210 	sub.w	r2, r0, #16
 800aa42:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa46:	f7ff ff6a 	bl	800a91e <__hexdig_fun>
 800aa4a:	1e43      	subs	r3, r0, #1
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b18      	cmp	r3, #24
 800aa50:	d91b      	bls.n	800aa8a <__gethex+0x142>
 800aa52:	f1b9 0f00 	cmp.w	r9, #0
 800aa56:	d000      	beq.n	800aa5a <__gethex+0x112>
 800aa58:	4252      	negs	r2, r2
 800aa5a:	4415      	add	r5, r2
 800aa5c:	f8cb 1000 	str.w	r1, [fp]
 800aa60:	b1d4      	cbz	r4, 800aa98 <__gethex+0x150>
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bf14      	ite	ne
 800aa68:	2700      	movne	r7, #0
 800aa6a:	2706      	moveq	r7, #6
 800aa6c:	4638      	mov	r0, r7
 800aa6e:	b00b      	add	sp, #44	; 0x2c
 800aa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa74:	463e      	mov	r6, r7
 800aa76:	4625      	mov	r5, r4
 800aa78:	2401      	movs	r4, #1
 800aa7a:	e7cc      	b.n	800aa16 <__gethex+0xce>
 800aa7c:	f04f 0900 	mov.w	r9, #0
 800aa80:	1cb1      	adds	r1, r6, #2
 800aa82:	e7d5      	b.n	800aa30 <__gethex+0xe8>
 800aa84:	f04f 0901 	mov.w	r9, #1
 800aa88:	e7fa      	b.n	800aa80 <__gethex+0x138>
 800aa8a:	230a      	movs	r3, #10
 800aa8c:	fb03 0202 	mla	r2, r3, r2, r0
 800aa90:	3a10      	subs	r2, #16
 800aa92:	e7d6      	b.n	800aa42 <__gethex+0xfa>
 800aa94:	4631      	mov	r1, r6
 800aa96:	e7e1      	b.n	800aa5c <__gethex+0x114>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	1bf3      	subs	r3, r6, r7
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	2b07      	cmp	r3, #7
 800aaa0:	dc0a      	bgt.n	800aab8 <__gethex+0x170>
 800aaa2:	9802      	ldr	r0, [sp, #8]
 800aaa4:	f000 fa68 	bl	800af78 <_Balloc>
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	b940      	cbnz	r0, 800aabe <__gethex+0x176>
 800aaac:	4602      	mov	r2, r0
 800aaae:	21de      	movs	r1, #222	; 0xde
 800aab0:	4b62      	ldr	r3, [pc, #392]	; (800ac3c <__gethex+0x2f4>)
 800aab2:	4863      	ldr	r0, [pc, #396]	; (800ac40 <__gethex+0x2f8>)
 800aab4:	f7ff feb0 	bl	800a818 <__assert_func>
 800aab8:	3101      	adds	r1, #1
 800aaba:	105b      	asrs	r3, r3, #1
 800aabc:	e7ef      	b.n	800aa9e <__gethex+0x156>
 800aabe:	f04f 0b00 	mov.w	fp, #0
 800aac2:	f100 0914 	add.w	r9, r0, #20
 800aac6:	f1ca 0301 	rsb	r3, sl, #1
 800aaca:	f8cd 9010 	str.w	r9, [sp, #16]
 800aace:	f8cd b004 	str.w	fp, [sp, #4]
 800aad2:	9308      	str	r3, [sp, #32]
 800aad4:	42b7      	cmp	r7, r6
 800aad6:	d33f      	bcc.n	800ab58 <__gethex+0x210>
 800aad8:	9f04      	ldr	r7, [sp, #16]
 800aada:	9b01      	ldr	r3, [sp, #4]
 800aadc:	f847 3b04 	str.w	r3, [r7], #4
 800aae0:	eba7 0709 	sub.w	r7, r7, r9
 800aae4:	10bf      	asrs	r7, r7, #2
 800aae6:	6127      	str	r7, [r4, #16]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fb3b 	bl	800b164 <__hi0bits>
 800aaee:	017f      	lsls	r7, r7, #5
 800aaf0:	f8d8 6000 	ldr.w	r6, [r8]
 800aaf4:	1a3f      	subs	r7, r7, r0
 800aaf6:	42b7      	cmp	r7, r6
 800aaf8:	dd62      	ble.n	800abc0 <__gethex+0x278>
 800aafa:	1bbf      	subs	r7, r7, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 fed1 	bl	800b8a6 <__any_on>
 800ab04:	4682      	mov	sl, r0
 800ab06:	b1a8      	cbz	r0, 800ab34 <__gethex+0x1ec>
 800ab08:	f04f 0a01 	mov.w	sl, #1
 800ab0c:	1e7b      	subs	r3, r7, #1
 800ab0e:	1159      	asrs	r1, r3, #5
 800ab10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ab14:	f003 021f 	and.w	r2, r3, #31
 800ab18:	fa0a f202 	lsl.w	r2, sl, r2
 800ab1c:	420a      	tst	r2, r1
 800ab1e:	d009      	beq.n	800ab34 <__gethex+0x1ec>
 800ab20:	4553      	cmp	r3, sl
 800ab22:	dd05      	ble.n	800ab30 <__gethex+0x1e8>
 800ab24:	4620      	mov	r0, r4
 800ab26:	1eb9      	subs	r1, r7, #2
 800ab28:	f000 febd 	bl	800b8a6 <__any_on>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d144      	bne.n	800abba <__gethex+0x272>
 800ab30:	f04f 0a02 	mov.w	sl, #2
 800ab34:	4639      	mov	r1, r7
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7ff fe9e 	bl	800a878 <rshift>
 800ab3c:	443d      	add	r5, r7
 800ab3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab42:	42ab      	cmp	r3, r5
 800ab44:	da4a      	bge.n	800abdc <__gethex+0x294>
 800ab46:	4621      	mov	r1, r4
 800ab48:	9802      	ldr	r0, [sp, #8]
 800ab4a:	f000 fa55 	bl	800aff8 <_Bfree>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab52:	27a3      	movs	r7, #163	; 0xa3
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	e789      	b.n	800aa6c <__gethex+0x124>
 800ab58:	1e73      	subs	r3, r6, #1
 800ab5a:	9a07      	ldr	r2, [sp, #28]
 800ab5c:	9305      	str	r3, [sp, #20]
 800ab5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d019      	beq.n	800ab9a <__gethex+0x252>
 800ab66:	f1bb 0f20 	cmp.w	fp, #32
 800ab6a:	d107      	bne.n	800ab7c <__gethex+0x234>
 800ab6c:	9b04      	ldr	r3, [sp, #16]
 800ab6e:	9a01      	ldr	r2, [sp, #4]
 800ab70:	f843 2b04 	str.w	r2, [r3], #4
 800ab74:	9304      	str	r3, [sp, #16]
 800ab76:	2300      	movs	r3, #0
 800ab78:	469b      	mov	fp, r3
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab80:	f7ff fecd 	bl	800a91e <__hexdig_fun>
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	f000 000f 	and.w	r0, r0, #15
 800ab8a:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab8e:	4303      	orrs	r3, r0
 800ab90:	9301      	str	r3, [sp, #4]
 800ab92:	f10b 0b04 	add.w	fp, fp, #4
 800ab96:	9b05      	ldr	r3, [sp, #20]
 800ab98:	e00d      	b.n	800abb6 <__gethex+0x26e>
 800ab9a:	9b05      	ldr	r3, [sp, #20]
 800ab9c:	9a08      	ldr	r2, [sp, #32]
 800ab9e:	4413      	add	r3, r2
 800aba0:	42bb      	cmp	r3, r7
 800aba2:	d3e0      	bcc.n	800ab66 <__gethex+0x21e>
 800aba4:	4618      	mov	r0, r3
 800aba6:	4652      	mov	r2, sl
 800aba8:	9903      	ldr	r1, [sp, #12]
 800abaa:	9309      	str	r3, [sp, #36]	; 0x24
 800abac:	f001 fa54 	bl	800c058 <strncmp>
 800abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d1d7      	bne.n	800ab66 <__gethex+0x21e>
 800abb6:	461e      	mov	r6, r3
 800abb8:	e78c      	b.n	800aad4 <__gethex+0x18c>
 800abba:	f04f 0a03 	mov.w	sl, #3
 800abbe:	e7b9      	b.n	800ab34 <__gethex+0x1ec>
 800abc0:	da09      	bge.n	800abd6 <__gethex+0x28e>
 800abc2:	1bf7      	subs	r7, r6, r7
 800abc4:	4621      	mov	r1, r4
 800abc6:	463a      	mov	r2, r7
 800abc8:	9802      	ldr	r0, [sp, #8]
 800abca:	f000 fc2d 	bl	800b428 <__lshift>
 800abce:	4604      	mov	r4, r0
 800abd0:	1bed      	subs	r5, r5, r7
 800abd2:	f100 0914 	add.w	r9, r0, #20
 800abd6:	f04f 0a00 	mov.w	sl, #0
 800abda:	e7b0      	b.n	800ab3e <__gethex+0x1f6>
 800abdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abe0:	42a8      	cmp	r0, r5
 800abe2:	dd71      	ble.n	800acc8 <__gethex+0x380>
 800abe4:	1b45      	subs	r5, r0, r5
 800abe6:	42ae      	cmp	r6, r5
 800abe8:	dc34      	bgt.n	800ac54 <__gethex+0x30c>
 800abea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d028      	beq.n	800ac44 <__gethex+0x2fc>
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d02a      	beq.n	800ac4c <__gethex+0x304>
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d115      	bne.n	800ac26 <__gethex+0x2de>
 800abfa:	42ae      	cmp	r6, r5
 800abfc:	d113      	bne.n	800ac26 <__gethex+0x2de>
 800abfe:	2e01      	cmp	r6, #1
 800ac00:	d10b      	bne.n	800ac1a <__gethex+0x2d2>
 800ac02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac06:	9a06      	ldr	r2, [sp, #24]
 800ac08:	2762      	movs	r7, #98	; 0x62
 800ac0a:	6013      	str	r3, [r2, #0]
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	6123      	str	r3, [r4, #16]
 800ac10:	f8c9 3000 	str.w	r3, [r9]
 800ac14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac16:	601c      	str	r4, [r3, #0]
 800ac18:	e728      	b.n	800aa6c <__gethex+0x124>
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	1e71      	subs	r1, r6, #1
 800ac1e:	f000 fe42 	bl	800b8a6 <__any_on>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d1ed      	bne.n	800ac02 <__gethex+0x2ba>
 800ac26:	4621      	mov	r1, r4
 800ac28:	9802      	ldr	r0, [sp, #8]
 800ac2a:	f000 f9e5 	bl	800aff8 <_Bfree>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac32:	2750      	movs	r7, #80	; 0x50
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	e719      	b.n	800aa6c <__gethex+0x124>
 800ac38:	0800cbe8 	.word	0x0800cbe8
 800ac3c:	0800cb6c 	.word	0x0800cb6c
 800ac40:	0800cb7d 	.word	0x0800cb7d
 800ac44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1ed      	bne.n	800ac26 <__gethex+0x2de>
 800ac4a:	e7da      	b.n	800ac02 <__gethex+0x2ba>
 800ac4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1d7      	bne.n	800ac02 <__gethex+0x2ba>
 800ac52:	e7e8      	b.n	800ac26 <__gethex+0x2de>
 800ac54:	1e6f      	subs	r7, r5, #1
 800ac56:	f1ba 0f00 	cmp.w	sl, #0
 800ac5a:	d132      	bne.n	800acc2 <__gethex+0x37a>
 800ac5c:	b127      	cbz	r7, 800ac68 <__gethex+0x320>
 800ac5e:	4639      	mov	r1, r7
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fe20 	bl	800b8a6 <__any_on>
 800ac66:	4682      	mov	sl, r0
 800ac68:	2101      	movs	r1, #1
 800ac6a:	117b      	asrs	r3, r7, #5
 800ac6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac70:	f007 071f 	and.w	r7, r7, #31
 800ac74:	fa01 f707 	lsl.w	r7, r1, r7
 800ac78:	421f      	tst	r7, r3
 800ac7a:	f04f 0702 	mov.w	r7, #2
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4620      	mov	r0, r4
 800ac82:	bf18      	it	ne
 800ac84:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac88:	1b76      	subs	r6, r6, r5
 800ac8a:	f7ff fdf5 	bl	800a878 <rshift>
 800ac8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac92:	f1ba 0f00 	cmp.w	sl, #0
 800ac96:	d048      	beq.n	800ad2a <__gethex+0x3e2>
 800ac98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d015      	beq.n	800accc <__gethex+0x384>
 800aca0:	2b03      	cmp	r3, #3
 800aca2:	d017      	beq.n	800acd4 <__gethex+0x38c>
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d109      	bne.n	800acbc <__gethex+0x374>
 800aca8:	f01a 0f02 	tst.w	sl, #2
 800acac:	d006      	beq.n	800acbc <__gethex+0x374>
 800acae:	f8d9 0000 	ldr.w	r0, [r9]
 800acb2:	ea4a 0a00 	orr.w	sl, sl, r0
 800acb6:	f01a 0f01 	tst.w	sl, #1
 800acba:	d10e      	bne.n	800acda <__gethex+0x392>
 800acbc:	f047 0710 	orr.w	r7, r7, #16
 800acc0:	e033      	b.n	800ad2a <__gethex+0x3e2>
 800acc2:	f04f 0a01 	mov.w	sl, #1
 800acc6:	e7cf      	b.n	800ac68 <__gethex+0x320>
 800acc8:	2701      	movs	r7, #1
 800acca:	e7e2      	b.n	800ac92 <__gethex+0x34a>
 800accc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acce:	f1c3 0301 	rsb	r3, r3, #1
 800acd2:	9315      	str	r3, [sp, #84]	; 0x54
 800acd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0f0      	beq.n	800acbc <__gethex+0x374>
 800acda:	f04f 0c00 	mov.w	ip, #0
 800acde:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ace2:	f104 0314 	add.w	r3, r4, #20
 800ace6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acee:	4618      	mov	r0, r3
 800acf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acf8:	d01c      	beq.n	800ad34 <__gethex+0x3ec>
 800acfa:	3201      	adds	r2, #1
 800acfc:	6002      	str	r2, [r0, #0]
 800acfe:	2f02      	cmp	r7, #2
 800ad00:	f104 0314 	add.w	r3, r4, #20
 800ad04:	d13d      	bne.n	800ad82 <__gethex+0x43a>
 800ad06:	f8d8 2000 	ldr.w	r2, [r8]
 800ad0a:	3a01      	subs	r2, #1
 800ad0c:	42b2      	cmp	r2, r6
 800ad0e:	d10a      	bne.n	800ad26 <__gethex+0x3de>
 800ad10:	2201      	movs	r2, #1
 800ad12:	1171      	asrs	r1, r6, #5
 800ad14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad18:	f006 061f 	and.w	r6, r6, #31
 800ad1c:	fa02 f606 	lsl.w	r6, r2, r6
 800ad20:	421e      	tst	r6, r3
 800ad22:	bf18      	it	ne
 800ad24:	4617      	movne	r7, r2
 800ad26:	f047 0720 	orr.w	r7, r7, #32
 800ad2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad2c:	601c      	str	r4, [r3, #0]
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	601d      	str	r5, [r3, #0]
 800ad32:	e69b      	b.n	800aa6c <__gethex+0x124>
 800ad34:	4299      	cmp	r1, r3
 800ad36:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad3a:	d8d8      	bhi.n	800acee <__gethex+0x3a6>
 800ad3c:	68a3      	ldr	r3, [r4, #8]
 800ad3e:	459b      	cmp	fp, r3
 800ad40:	db17      	blt.n	800ad72 <__gethex+0x42a>
 800ad42:	6861      	ldr	r1, [r4, #4]
 800ad44:	9802      	ldr	r0, [sp, #8]
 800ad46:	3101      	adds	r1, #1
 800ad48:	f000 f916 	bl	800af78 <_Balloc>
 800ad4c:	4681      	mov	r9, r0
 800ad4e:	b918      	cbnz	r0, 800ad58 <__gethex+0x410>
 800ad50:	4602      	mov	r2, r0
 800ad52:	2184      	movs	r1, #132	; 0x84
 800ad54:	4b19      	ldr	r3, [pc, #100]	; (800adbc <__gethex+0x474>)
 800ad56:	e6ac      	b.n	800aab2 <__gethex+0x16a>
 800ad58:	6922      	ldr	r2, [r4, #16]
 800ad5a:	f104 010c 	add.w	r1, r4, #12
 800ad5e:	3202      	adds	r2, #2
 800ad60:	0092      	lsls	r2, r2, #2
 800ad62:	300c      	adds	r0, #12
 800ad64:	f7fe feba 	bl	8009adc <memcpy>
 800ad68:	4621      	mov	r1, r4
 800ad6a:	9802      	ldr	r0, [sp, #8]
 800ad6c:	f000 f944 	bl	800aff8 <_Bfree>
 800ad70:	464c      	mov	r4, r9
 800ad72:	6923      	ldr	r3, [r4, #16]
 800ad74:	1c5a      	adds	r2, r3, #1
 800ad76:	6122      	str	r2, [r4, #16]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad7e:	615a      	str	r2, [r3, #20]
 800ad80:	e7bd      	b.n	800acfe <__gethex+0x3b6>
 800ad82:	6922      	ldr	r2, [r4, #16]
 800ad84:	455a      	cmp	r2, fp
 800ad86:	dd0b      	ble.n	800ada0 <__gethex+0x458>
 800ad88:	2101      	movs	r1, #1
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f7ff fd74 	bl	800a878 <rshift>
 800ad90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad94:	3501      	adds	r5, #1
 800ad96:	42ab      	cmp	r3, r5
 800ad98:	f6ff aed5 	blt.w	800ab46 <__gethex+0x1fe>
 800ad9c:	2701      	movs	r7, #1
 800ad9e:	e7c2      	b.n	800ad26 <__gethex+0x3de>
 800ada0:	f016 061f 	ands.w	r6, r6, #31
 800ada4:	d0fa      	beq.n	800ad9c <__gethex+0x454>
 800ada6:	449a      	add	sl, r3
 800ada8:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800adac:	f000 f9da 	bl	800b164 <__hi0bits>
 800adb0:	f1c6 0620 	rsb	r6, r6, #32
 800adb4:	42b0      	cmp	r0, r6
 800adb6:	dbe7      	blt.n	800ad88 <__gethex+0x440>
 800adb8:	e7f0      	b.n	800ad9c <__gethex+0x454>
 800adba:	bf00      	nop
 800adbc:	0800cb6c 	.word	0x0800cb6c

0800adc0 <L_shift>:
 800adc0:	f1c2 0208 	rsb	r2, r2, #8
 800adc4:	0092      	lsls	r2, r2, #2
 800adc6:	b570      	push	{r4, r5, r6, lr}
 800adc8:	f1c2 0620 	rsb	r6, r2, #32
 800adcc:	6843      	ldr	r3, [r0, #4]
 800adce:	6804      	ldr	r4, [r0, #0]
 800add0:	fa03 f506 	lsl.w	r5, r3, r6
 800add4:	432c      	orrs	r4, r5
 800add6:	40d3      	lsrs	r3, r2
 800add8:	6004      	str	r4, [r0, #0]
 800adda:	f840 3f04 	str.w	r3, [r0, #4]!
 800adde:	4288      	cmp	r0, r1
 800ade0:	d3f4      	bcc.n	800adcc <L_shift+0xc>
 800ade2:	bd70      	pop	{r4, r5, r6, pc}

0800ade4 <__match>:
 800ade4:	b530      	push	{r4, r5, lr}
 800ade6:	6803      	ldr	r3, [r0, #0]
 800ade8:	3301      	adds	r3, #1
 800adea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adee:	b914      	cbnz	r4, 800adf6 <__match+0x12>
 800adf0:	6003      	str	r3, [r0, #0]
 800adf2:	2001      	movs	r0, #1
 800adf4:	bd30      	pop	{r4, r5, pc}
 800adf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adfe:	2d19      	cmp	r5, #25
 800ae00:	bf98      	it	ls
 800ae02:	3220      	addls	r2, #32
 800ae04:	42a2      	cmp	r2, r4
 800ae06:	d0f0      	beq.n	800adea <__match+0x6>
 800ae08:	2000      	movs	r0, #0
 800ae0a:	e7f3      	b.n	800adf4 <__match+0x10>

0800ae0c <__hexnan>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	2500      	movs	r5, #0
 800ae12:	680b      	ldr	r3, [r1, #0]
 800ae14:	4682      	mov	sl, r0
 800ae16:	115e      	asrs	r6, r3, #5
 800ae18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae1c:	f013 031f 	ands.w	r3, r3, #31
 800ae20:	bf18      	it	ne
 800ae22:	3604      	addne	r6, #4
 800ae24:	1f37      	subs	r7, r6, #4
 800ae26:	4690      	mov	r8, r2
 800ae28:	46b9      	mov	r9, r7
 800ae2a:	463c      	mov	r4, r7
 800ae2c:	46ab      	mov	fp, r5
 800ae2e:	b087      	sub	sp, #28
 800ae30:	6801      	ldr	r1, [r0, #0]
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae38:	9502      	str	r5, [sp, #8]
 800ae3a:	784a      	ldrb	r2, [r1, #1]
 800ae3c:	1c4b      	adds	r3, r1, #1
 800ae3e:	9303      	str	r3, [sp, #12]
 800ae40:	b342      	cbz	r2, 800ae94 <__hexnan+0x88>
 800ae42:	4610      	mov	r0, r2
 800ae44:	9105      	str	r1, [sp, #20]
 800ae46:	9204      	str	r2, [sp, #16]
 800ae48:	f7ff fd69 	bl	800a91e <__hexdig_fun>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d14f      	bne.n	800aef0 <__hexnan+0xe4>
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	9905      	ldr	r1, [sp, #20]
 800ae54:	2a20      	cmp	r2, #32
 800ae56:	d818      	bhi.n	800ae8a <__hexnan+0x7e>
 800ae58:	9b02      	ldr	r3, [sp, #8]
 800ae5a:	459b      	cmp	fp, r3
 800ae5c:	dd13      	ble.n	800ae86 <__hexnan+0x7a>
 800ae5e:	454c      	cmp	r4, r9
 800ae60:	d206      	bcs.n	800ae70 <__hexnan+0x64>
 800ae62:	2d07      	cmp	r5, #7
 800ae64:	dc04      	bgt.n	800ae70 <__hexnan+0x64>
 800ae66:	462a      	mov	r2, r5
 800ae68:	4649      	mov	r1, r9
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f7ff ffa8 	bl	800adc0 <L_shift>
 800ae70:	4544      	cmp	r4, r8
 800ae72:	d950      	bls.n	800af16 <__hexnan+0x10a>
 800ae74:	2300      	movs	r3, #0
 800ae76:	f1a4 0904 	sub.w	r9, r4, #4
 800ae7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae7e:	461d      	mov	r5, r3
 800ae80:	464c      	mov	r4, r9
 800ae82:	f8cd b008 	str.w	fp, [sp, #8]
 800ae86:	9903      	ldr	r1, [sp, #12]
 800ae88:	e7d7      	b.n	800ae3a <__hexnan+0x2e>
 800ae8a:	2a29      	cmp	r2, #41	; 0x29
 800ae8c:	d156      	bne.n	800af3c <__hexnan+0x130>
 800ae8e:	3102      	adds	r1, #2
 800ae90:	f8ca 1000 	str.w	r1, [sl]
 800ae94:	f1bb 0f00 	cmp.w	fp, #0
 800ae98:	d050      	beq.n	800af3c <__hexnan+0x130>
 800ae9a:	454c      	cmp	r4, r9
 800ae9c:	d206      	bcs.n	800aeac <__hexnan+0xa0>
 800ae9e:	2d07      	cmp	r5, #7
 800aea0:	dc04      	bgt.n	800aeac <__hexnan+0xa0>
 800aea2:	462a      	mov	r2, r5
 800aea4:	4649      	mov	r1, r9
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff ff8a 	bl	800adc0 <L_shift>
 800aeac:	4544      	cmp	r4, r8
 800aeae:	d934      	bls.n	800af1a <__hexnan+0x10e>
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	f1a8 0204 	sub.w	r2, r8, #4
 800aeb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800aeba:	429f      	cmp	r7, r3
 800aebc:	f842 1f04 	str.w	r1, [r2, #4]!
 800aec0:	d2f9      	bcs.n	800aeb6 <__hexnan+0xaa>
 800aec2:	1b3b      	subs	r3, r7, r4
 800aec4:	f023 0303 	bic.w	r3, r3, #3
 800aec8:	3304      	adds	r3, #4
 800aeca:	3401      	adds	r4, #1
 800aecc:	3e03      	subs	r6, #3
 800aece:	42b4      	cmp	r4, r6
 800aed0:	bf88      	it	hi
 800aed2:	2304      	movhi	r3, #4
 800aed4:	2200      	movs	r2, #0
 800aed6:	4443      	add	r3, r8
 800aed8:	f843 2b04 	str.w	r2, [r3], #4
 800aedc:	429f      	cmp	r7, r3
 800aede:	d2fb      	bcs.n	800aed8 <__hexnan+0xcc>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	b91b      	cbnz	r3, 800aeec <__hexnan+0xe0>
 800aee4:	4547      	cmp	r7, r8
 800aee6:	d127      	bne.n	800af38 <__hexnan+0x12c>
 800aee8:	2301      	movs	r3, #1
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	2005      	movs	r0, #5
 800aeee:	e026      	b.n	800af3e <__hexnan+0x132>
 800aef0:	3501      	adds	r5, #1
 800aef2:	2d08      	cmp	r5, #8
 800aef4:	f10b 0b01 	add.w	fp, fp, #1
 800aef8:	dd06      	ble.n	800af08 <__hexnan+0xfc>
 800aefa:	4544      	cmp	r4, r8
 800aefc:	d9c3      	bls.n	800ae86 <__hexnan+0x7a>
 800aefe:	2300      	movs	r3, #0
 800af00:	2501      	movs	r5, #1
 800af02:	f844 3c04 	str.w	r3, [r4, #-4]
 800af06:	3c04      	subs	r4, #4
 800af08:	6822      	ldr	r2, [r4, #0]
 800af0a:	f000 000f 	and.w	r0, r0, #15
 800af0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800af12:	6022      	str	r2, [r4, #0]
 800af14:	e7b7      	b.n	800ae86 <__hexnan+0x7a>
 800af16:	2508      	movs	r5, #8
 800af18:	e7b5      	b.n	800ae86 <__hexnan+0x7a>
 800af1a:	9b01      	ldr	r3, [sp, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0df      	beq.n	800aee0 <__hexnan+0xd4>
 800af20:	f04f 32ff 	mov.w	r2, #4294967295
 800af24:	f1c3 0320 	rsb	r3, r3, #32
 800af28:	fa22 f303 	lsr.w	r3, r2, r3
 800af2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af30:	401a      	ands	r2, r3
 800af32:	f846 2c04 	str.w	r2, [r6, #-4]
 800af36:	e7d3      	b.n	800aee0 <__hexnan+0xd4>
 800af38:	3f04      	subs	r7, #4
 800af3a:	e7d1      	b.n	800aee0 <__hexnan+0xd4>
 800af3c:	2004      	movs	r0, #4
 800af3e:	b007      	add	sp, #28
 800af40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af44 <malloc>:
 800af44:	4b02      	ldr	r3, [pc, #8]	; (800af50 <malloc+0xc>)
 800af46:	4601      	mov	r1, r0
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f000 bd27 	b.w	800b99c <_malloc_r>
 800af4e:	bf00      	nop
 800af50:	20000194 	.word	0x20000194

0800af54 <__ascii_mbtowc>:
 800af54:	b082      	sub	sp, #8
 800af56:	b901      	cbnz	r1, 800af5a <__ascii_mbtowc+0x6>
 800af58:	a901      	add	r1, sp, #4
 800af5a:	b142      	cbz	r2, 800af6e <__ascii_mbtowc+0x1a>
 800af5c:	b14b      	cbz	r3, 800af72 <__ascii_mbtowc+0x1e>
 800af5e:	7813      	ldrb	r3, [r2, #0]
 800af60:	600b      	str	r3, [r1, #0]
 800af62:	7812      	ldrb	r2, [r2, #0]
 800af64:	1e10      	subs	r0, r2, #0
 800af66:	bf18      	it	ne
 800af68:	2001      	movne	r0, #1
 800af6a:	b002      	add	sp, #8
 800af6c:	4770      	bx	lr
 800af6e:	4610      	mov	r0, r2
 800af70:	e7fb      	b.n	800af6a <__ascii_mbtowc+0x16>
 800af72:	f06f 0001 	mvn.w	r0, #1
 800af76:	e7f8      	b.n	800af6a <__ascii_mbtowc+0x16>

0800af78 <_Balloc>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af7c:	4604      	mov	r4, r0
 800af7e:	460d      	mov	r5, r1
 800af80:	b976      	cbnz	r6, 800afa0 <_Balloc+0x28>
 800af82:	2010      	movs	r0, #16
 800af84:	f7ff ffde 	bl	800af44 <malloc>
 800af88:	4602      	mov	r2, r0
 800af8a:	6260      	str	r0, [r4, #36]	; 0x24
 800af8c:	b920      	cbnz	r0, 800af98 <_Balloc+0x20>
 800af8e:	2166      	movs	r1, #102	; 0x66
 800af90:	4b17      	ldr	r3, [pc, #92]	; (800aff0 <_Balloc+0x78>)
 800af92:	4818      	ldr	r0, [pc, #96]	; (800aff4 <_Balloc+0x7c>)
 800af94:	f7ff fc40 	bl	800a818 <__assert_func>
 800af98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af9c:	6006      	str	r6, [r0, #0]
 800af9e:	60c6      	str	r6, [r0, #12]
 800afa0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afa2:	68f3      	ldr	r3, [r6, #12]
 800afa4:	b183      	cbz	r3, 800afc8 <_Balloc+0x50>
 800afa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afae:	b9b8      	cbnz	r0, 800afe0 <_Balloc+0x68>
 800afb0:	2101      	movs	r1, #1
 800afb2:	fa01 f605 	lsl.w	r6, r1, r5
 800afb6:	1d72      	adds	r2, r6, #5
 800afb8:	4620      	mov	r0, r4
 800afba:	0092      	lsls	r2, r2, #2
 800afbc:	f000 fc94 	bl	800b8e8 <_calloc_r>
 800afc0:	b160      	cbz	r0, 800afdc <_Balloc+0x64>
 800afc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afc6:	e00e      	b.n	800afe6 <_Balloc+0x6e>
 800afc8:	2221      	movs	r2, #33	; 0x21
 800afca:	2104      	movs	r1, #4
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 fc8b 	bl	800b8e8 <_calloc_r>
 800afd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afd4:	60f0      	str	r0, [r6, #12]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e4      	bne.n	800afa6 <_Balloc+0x2e>
 800afdc:	2000      	movs	r0, #0
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	6802      	ldr	r2, [r0, #0]
 800afe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afe6:	2300      	movs	r3, #0
 800afe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afec:	e7f7      	b.n	800afde <_Balloc+0x66>
 800afee:	bf00      	nop
 800aff0:	0800cab8 	.word	0x0800cab8
 800aff4:	0800cbfc 	.word	0x0800cbfc

0800aff8 <_Bfree>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800affc:	4605      	mov	r5, r0
 800affe:	460c      	mov	r4, r1
 800b000:	b976      	cbnz	r6, 800b020 <_Bfree+0x28>
 800b002:	2010      	movs	r0, #16
 800b004:	f7ff ff9e 	bl	800af44 <malloc>
 800b008:	4602      	mov	r2, r0
 800b00a:	6268      	str	r0, [r5, #36]	; 0x24
 800b00c:	b920      	cbnz	r0, 800b018 <_Bfree+0x20>
 800b00e:	218a      	movs	r1, #138	; 0x8a
 800b010:	4b08      	ldr	r3, [pc, #32]	; (800b034 <_Bfree+0x3c>)
 800b012:	4809      	ldr	r0, [pc, #36]	; (800b038 <_Bfree+0x40>)
 800b014:	f7ff fc00 	bl	800a818 <__assert_func>
 800b018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b01c:	6006      	str	r6, [r0, #0]
 800b01e:	60c6      	str	r6, [r0, #12]
 800b020:	b13c      	cbz	r4, 800b032 <_Bfree+0x3a>
 800b022:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b024:	6862      	ldr	r2, [r4, #4]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b02c:	6021      	str	r1, [r4, #0]
 800b02e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b032:	bd70      	pop	{r4, r5, r6, pc}
 800b034:	0800cab8 	.word	0x0800cab8
 800b038:	0800cbfc 	.word	0x0800cbfc

0800b03c <__multadd>:
 800b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b040:	4698      	mov	r8, r3
 800b042:	460c      	mov	r4, r1
 800b044:	2300      	movs	r3, #0
 800b046:	690e      	ldr	r6, [r1, #16]
 800b048:	4607      	mov	r7, r0
 800b04a:	f101 0014 	add.w	r0, r1, #20
 800b04e:	6805      	ldr	r5, [r0, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	b2a9      	uxth	r1, r5
 800b054:	fb02 8101 	mla	r1, r2, r1, r8
 800b058:	0c2d      	lsrs	r5, r5, #16
 800b05a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b05e:	fb02 c505 	mla	r5, r2, r5, ip
 800b062:	b289      	uxth	r1, r1
 800b064:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b068:	429e      	cmp	r6, r3
 800b06a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b06e:	f840 1b04 	str.w	r1, [r0], #4
 800b072:	dcec      	bgt.n	800b04e <__multadd+0x12>
 800b074:	f1b8 0f00 	cmp.w	r8, #0
 800b078:	d022      	beq.n	800b0c0 <__multadd+0x84>
 800b07a:	68a3      	ldr	r3, [r4, #8]
 800b07c:	42b3      	cmp	r3, r6
 800b07e:	dc19      	bgt.n	800b0b4 <__multadd+0x78>
 800b080:	6861      	ldr	r1, [r4, #4]
 800b082:	4638      	mov	r0, r7
 800b084:	3101      	adds	r1, #1
 800b086:	f7ff ff77 	bl	800af78 <_Balloc>
 800b08a:	4605      	mov	r5, r0
 800b08c:	b928      	cbnz	r0, 800b09a <__multadd+0x5e>
 800b08e:	4602      	mov	r2, r0
 800b090:	21b5      	movs	r1, #181	; 0xb5
 800b092:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <__multadd+0x8c>)
 800b094:	480d      	ldr	r0, [pc, #52]	; (800b0cc <__multadd+0x90>)
 800b096:	f7ff fbbf 	bl	800a818 <__assert_func>
 800b09a:	6922      	ldr	r2, [r4, #16]
 800b09c:	f104 010c 	add.w	r1, r4, #12
 800b0a0:	3202      	adds	r2, #2
 800b0a2:	0092      	lsls	r2, r2, #2
 800b0a4:	300c      	adds	r0, #12
 800b0a6:	f7fe fd19 	bl	8009adc <memcpy>
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff ffa3 	bl	800aff8 <_Bfree>
 800b0b2:	462c      	mov	r4, r5
 800b0b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0b8:	3601      	adds	r6, #1
 800b0ba:	f8c3 8014 	str.w	r8, [r3, #20]
 800b0be:	6126      	str	r6, [r4, #16]
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800cb6c 	.word	0x0800cb6c
 800b0cc:	0800cbfc 	.word	0x0800cbfc

0800b0d0 <__s2b>:
 800b0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d4:	4615      	mov	r5, r2
 800b0d6:	2209      	movs	r2, #9
 800b0d8:	461f      	mov	r7, r3
 800b0da:	3308      	adds	r3, #8
 800b0dc:	460c      	mov	r4, r1
 800b0de:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	db09      	blt.n	800b100 <__s2b+0x30>
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff ff43 	bl	800af78 <_Balloc>
 800b0f2:	b940      	cbnz	r0, 800b106 <__s2b+0x36>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	21ce      	movs	r1, #206	; 0xce
 800b0f8:	4b18      	ldr	r3, [pc, #96]	; (800b15c <__s2b+0x8c>)
 800b0fa:	4819      	ldr	r0, [pc, #100]	; (800b160 <__s2b+0x90>)
 800b0fc:	f7ff fb8c 	bl	800a818 <__assert_func>
 800b100:	0052      	lsls	r2, r2, #1
 800b102:	3101      	adds	r1, #1
 800b104:	e7f0      	b.n	800b0e8 <__s2b+0x18>
 800b106:	9b08      	ldr	r3, [sp, #32]
 800b108:	2d09      	cmp	r5, #9
 800b10a:	6143      	str	r3, [r0, #20]
 800b10c:	f04f 0301 	mov.w	r3, #1
 800b110:	6103      	str	r3, [r0, #16]
 800b112:	dd16      	ble.n	800b142 <__s2b+0x72>
 800b114:	f104 0909 	add.w	r9, r4, #9
 800b118:	46c8      	mov	r8, r9
 800b11a:	442c      	add	r4, r5
 800b11c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b120:	4601      	mov	r1, r0
 800b122:	220a      	movs	r2, #10
 800b124:	4630      	mov	r0, r6
 800b126:	3b30      	subs	r3, #48	; 0x30
 800b128:	f7ff ff88 	bl	800b03c <__multadd>
 800b12c:	45a0      	cmp	r8, r4
 800b12e:	d1f5      	bne.n	800b11c <__s2b+0x4c>
 800b130:	f1a5 0408 	sub.w	r4, r5, #8
 800b134:	444c      	add	r4, r9
 800b136:	1b2d      	subs	r5, r5, r4
 800b138:	1963      	adds	r3, r4, r5
 800b13a:	42bb      	cmp	r3, r7
 800b13c:	db04      	blt.n	800b148 <__s2b+0x78>
 800b13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b142:	2509      	movs	r5, #9
 800b144:	340a      	adds	r4, #10
 800b146:	e7f6      	b.n	800b136 <__s2b+0x66>
 800b148:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b14c:	4601      	mov	r1, r0
 800b14e:	220a      	movs	r2, #10
 800b150:	4630      	mov	r0, r6
 800b152:	3b30      	subs	r3, #48	; 0x30
 800b154:	f7ff ff72 	bl	800b03c <__multadd>
 800b158:	e7ee      	b.n	800b138 <__s2b+0x68>
 800b15a:	bf00      	nop
 800b15c:	0800cb6c 	.word	0x0800cb6c
 800b160:	0800cbfc 	.word	0x0800cbfc

0800b164 <__hi0bits>:
 800b164:	0c02      	lsrs	r2, r0, #16
 800b166:	0412      	lsls	r2, r2, #16
 800b168:	4603      	mov	r3, r0
 800b16a:	b9ca      	cbnz	r2, 800b1a0 <__hi0bits+0x3c>
 800b16c:	0403      	lsls	r3, r0, #16
 800b16e:	2010      	movs	r0, #16
 800b170:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b174:	bf04      	itt	eq
 800b176:	021b      	lsleq	r3, r3, #8
 800b178:	3008      	addeq	r0, #8
 800b17a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b17e:	bf04      	itt	eq
 800b180:	011b      	lsleq	r3, r3, #4
 800b182:	3004      	addeq	r0, #4
 800b184:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b188:	bf04      	itt	eq
 800b18a:	009b      	lsleq	r3, r3, #2
 800b18c:	3002      	addeq	r0, #2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	db05      	blt.n	800b19e <__hi0bits+0x3a>
 800b192:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b196:	f100 0001 	add.w	r0, r0, #1
 800b19a:	bf08      	it	eq
 800b19c:	2020      	moveq	r0, #32
 800b19e:	4770      	bx	lr
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	e7e5      	b.n	800b170 <__hi0bits+0xc>

0800b1a4 <__lo0bits>:
 800b1a4:	6803      	ldr	r3, [r0, #0]
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	f013 0007 	ands.w	r0, r3, #7
 800b1ac:	d00b      	beq.n	800b1c6 <__lo0bits+0x22>
 800b1ae:	07d9      	lsls	r1, r3, #31
 800b1b0:	d422      	bmi.n	800b1f8 <__lo0bits+0x54>
 800b1b2:	0798      	lsls	r0, r3, #30
 800b1b4:	bf49      	itett	mi
 800b1b6:	085b      	lsrmi	r3, r3, #1
 800b1b8:	089b      	lsrpl	r3, r3, #2
 800b1ba:	2001      	movmi	r0, #1
 800b1bc:	6013      	strmi	r3, [r2, #0]
 800b1be:	bf5c      	itt	pl
 800b1c0:	2002      	movpl	r0, #2
 800b1c2:	6013      	strpl	r3, [r2, #0]
 800b1c4:	4770      	bx	lr
 800b1c6:	b299      	uxth	r1, r3
 800b1c8:	b909      	cbnz	r1, 800b1ce <__lo0bits+0x2a>
 800b1ca:	2010      	movs	r0, #16
 800b1cc:	0c1b      	lsrs	r3, r3, #16
 800b1ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1d2:	bf04      	itt	eq
 800b1d4:	0a1b      	lsreq	r3, r3, #8
 800b1d6:	3008      	addeq	r0, #8
 800b1d8:	0719      	lsls	r1, r3, #28
 800b1da:	bf04      	itt	eq
 800b1dc:	091b      	lsreq	r3, r3, #4
 800b1de:	3004      	addeq	r0, #4
 800b1e0:	0799      	lsls	r1, r3, #30
 800b1e2:	bf04      	itt	eq
 800b1e4:	089b      	lsreq	r3, r3, #2
 800b1e6:	3002      	addeq	r0, #2
 800b1e8:	07d9      	lsls	r1, r3, #31
 800b1ea:	d403      	bmi.n	800b1f4 <__lo0bits+0x50>
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	f100 0001 	add.w	r0, r0, #1
 800b1f2:	d003      	beq.n	800b1fc <__lo0bits+0x58>
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	4770      	bx	lr
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	4770      	bx	lr
 800b1fc:	2020      	movs	r0, #32
 800b1fe:	4770      	bx	lr

0800b200 <__i2b>:
 800b200:	b510      	push	{r4, lr}
 800b202:	460c      	mov	r4, r1
 800b204:	2101      	movs	r1, #1
 800b206:	f7ff feb7 	bl	800af78 <_Balloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	b928      	cbnz	r0, 800b21a <__i2b+0x1a>
 800b20e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b212:	4b04      	ldr	r3, [pc, #16]	; (800b224 <__i2b+0x24>)
 800b214:	4804      	ldr	r0, [pc, #16]	; (800b228 <__i2b+0x28>)
 800b216:	f7ff faff 	bl	800a818 <__assert_func>
 800b21a:	2301      	movs	r3, #1
 800b21c:	6144      	str	r4, [r0, #20]
 800b21e:	6103      	str	r3, [r0, #16]
 800b220:	bd10      	pop	{r4, pc}
 800b222:	bf00      	nop
 800b224:	0800cb6c 	.word	0x0800cb6c
 800b228:	0800cbfc 	.word	0x0800cbfc

0800b22c <__multiply>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	4614      	mov	r4, r2
 800b232:	690a      	ldr	r2, [r1, #16]
 800b234:	6923      	ldr	r3, [r4, #16]
 800b236:	460d      	mov	r5, r1
 800b238:	429a      	cmp	r2, r3
 800b23a:	bfbe      	ittt	lt
 800b23c:	460b      	movlt	r3, r1
 800b23e:	4625      	movlt	r5, r4
 800b240:	461c      	movlt	r4, r3
 800b242:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b246:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b24a:	68ab      	ldr	r3, [r5, #8]
 800b24c:	6869      	ldr	r1, [r5, #4]
 800b24e:	eb0a 0709 	add.w	r7, sl, r9
 800b252:	42bb      	cmp	r3, r7
 800b254:	b085      	sub	sp, #20
 800b256:	bfb8      	it	lt
 800b258:	3101      	addlt	r1, #1
 800b25a:	f7ff fe8d 	bl	800af78 <_Balloc>
 800b25e:	b930      	cbnz	r0, 800b26e <__multiply+0x42>
 800b260:	4602      	mov	r2, r0
 800b262:	f240 115d 	movw	r1, #349	; 0x15d
 800b266:	4b41      	ldr	r3, [pc, #260]	; (800b36c <__multiply+0x140>)
 800b268:	4841      	ldr	r0, [pc, #260]	; (800b370 <__multiply+0x144>)
 800b26a:	f7ff fad5 	bl	800a818 <__assert_func>
 800b26e:	f100 0614 	add.w	r6, r0, #20
 800b272:	4633      	mov	r3, r6
 800b274:	2200      	movs	r2, #0
 800b276:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b27a:	4543      	cmp	r3, r8
 800b27c:	d31e      	bcc.n	800b2bc <__multiply+0x90>
 800b27e:	f105 0c14 	add.w	ip, r5, #20
 800b282:	f104 0314 	add.w	r3, r4, #20
 800b286:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b28a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b28e:	9202      	str	r2, [sp, #8]
 800b290:	ebac 0205 	sub.w	r2, ip, r5
 800b294:	3a15      	subs	r2, #21
 800b296:	f022 0203 	bic.w	r2, r2, #3
 800b29a:	3204      	adds	r2, #4
 800b29c:	f105 0115 	add.w	r1, r5, #21
 800b2a0:	458c      	cmp	ip, r1
 800b2a2:	bf38      	it	cc
 800b2a4:	2204      	movcc	r2, #4
 800b2a6:	9201      	str	r2, [sp, #4]
 800b2a8:	9a02      	ldr	r2, [sp, #8]
 800b2aa:	9303      	str	r3, [sp, #12]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d808      	bhi.n	800b2c2 <__multiply+0x96>
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	dc55      	bgt.n	800b360 <__multiply+0x134>
 800b2b4:	6107      	str	r7, [r0, #16]
 800b2b6:	b005      	add	sp, #20
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	f843 2b04 	str.w	r2, [r3], #4
 800b2c0:	e7db      	b.n	800b27a <__multiply+0x4e>
 800b2c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2c6:	f1ba 0f00 	cmp.w	sl, #0
 800b2ca:	d020      	beq.n	800b30e <__multiply+0xe2>
 800b2cc:	46b1      	mov	r9, r6
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f105 0e14 	add.w	lr, r5, #20
 800b2d4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b2d8:	f8d9 b000 	ldr.w	fp, [r9]
 800b2dc:	b2a1      	uxth	r1, r4
 800b2de:	fa1f fb8b 	uxth.w	fp, fp
 800b2e2:	fb0a b101 	mla	r1, sl, r1, fp
 800b2e6:	4411      	add	r1, r2
 800b2e8:	f8d9 2000 	ldr.w	r2, [r9]
 800b2ec:	0c24      	lsrs	r4, r4, #16
 800b2ee:	0c12      	lsrs	r2, r2, #16
 800b2f0:	fb0a 2404 	mla	r4, sl, r4, r2
 800b2f4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b2f8:	b289      	uxth	r1, r1
 800b2fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b2fe:	45f4      	cmp	ip, lr
 800b300:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b304:	f849 1b04 	str.w	r1, [r9], #4
 800b308:	d8e4      	bhi.n	800b2d4 <__multiply+0xa8>
 800b30a:	9901      	ldr	r1, [sp, #4]
 800b30c:	5072      	str	r2, [r6, r1]
 800b30e:	9a03      	ldr	r2, [sp, #12]
 800b310:	3304      	adds	r3, #4
 800b312:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	d01f      	beq.n	800b35c <__multiply+0x130>
 800b31c:	46b6      	mov	lr, r6
 800b31e:	f04f 0a00 	mov.w	sl, #0
 800b322:	6834      	ldr	r4, [r6, #0]
 800b324:	f105 0114 	add.w	r1, r5, #20
 800b328:	880a      	ldrh	r2, [r1, #0]
 800b32a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b32e:	b2a4      	uxth	r4, r4
 800b330:	fb09 b202 	mla	r2, r9, r2, fp
 800b334:	4492      	add	sl, r2
 800b336:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b33a:	f84e 4b04 	str.w	r4, [lr], #4
 800b33e:	f851 4b04 	ldr.w	r4, [r1], #4
 800b342:	f8be 2000 	ldrh.w	r2, [lr]
 800b346:	0c24      	lsrs	r4, r4, #16
 800b348:	fb09 2404 	mla	r4, r9, r4, r2
 800b34c:	458c      	cmp	ip, r1
 800b34e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b352:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b356:	d8e7      	bhi.n	800b328 <__multiply+0xfc>
 800b358:	9a01      	ldr	r2, [sp, #4]
 800b35a:	50b4      	str	r4, [r6, r2]
 800b35c:	3604      	adds	r6, #4
 800b35e:	e7a3      	b.n	800b2a8 <__multiply+0x7c>
 800b360:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1a5      	bne.n	800b2b4 <__multiply+0x88>
 800b368:	3f01      	subs	r7, #1
 800b36a:	e7a1      	b.n	800b2b0 <__multiply+0x84>
 800b36c:	0800cb6c 	.word	0x0800cb6c
 800b370:	0800cbfc 	.word	0x0800cbfc

0800b374 <__pow5mult>:
 800b374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b378:	4615      	mov	r5, r2
 800b37a:	f012 0203 	ands.w	r2, r2, #3
 800b37e:	4606      	mov	r6, r0
 800b380:	460f      	mov	r7, r1
 800b382:	d007      	beq.n	800b394 <__pow5mult+0x20>
 800b384:	4c25      	ldr	r4, [pc, #148]	; (800b41c <__pow5mult+0xa8>)
 800b386:	3a01      	subs	r2, #1
 800b388:	2300      	movs	r3, #0
 800b38a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b38e:	f7ff fe55 	bl	800b03c <__multadd>
 800b392:	4607      	mov	r7, r0
 800b394:	10ad      	asrs	r5, r5, #2
 800b396:	d03d      	beq.n	800b414 <__pow5mult+0xa0>
 800b398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b39a:	b97c      	cbnz	r4, 800b3bc <__pow5mult+0x48>
 800b39c:	2010      	movs	r0, #16
 800b39e:	f7ff fdd1 	bl	800af44 <malloc>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	6270      	str	r0, [r6, #36]	; 0x24
 800b3a6:	b928      	cbnz	r0, 800b3b4 <__pow5mult+0x40>
 800b3a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3ac:	4b1c      	ldr	r3, [pc, #112]	; (800b420 <__pow5mult+0xac>)
 800b3ae:	481d      	ldr	r0, [pc, #116]	; (800b424 <__pow5mult+0xb0>)
 800b3b0:	f7ff fa32 	bl	800a818 <__assert_func>
 800b3b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3b8:	6004      	str	r4, [r0, #0]
 800b3ba:	60c4      	str	r4, [r0, #12]
 800b3bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3c4:	b94c      	cbnz	r4, 800b3da <__pow5mult+0x66>
 800b3c6:	f240 2171 	movw	r1, #625	; 0x271
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f7ff ff18 	bl	800b200 <__i2b>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	f04f 0900 	mov.w	r9, #0
 800b3de:	07eb      	lsls	r3, r5, #31
 800b3e0:	d50a      	bpl.n	800b3f8 <__pow5mult+0x84>
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	4622      	mov	r2, r4
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f7ff ff20 	bl	800b22c <__multiply>
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f7ff fe01 	bl	800aff8 <_Bfree>
 800b3f6:	4647      	mov	r7, r8
 800b3f8:	106d      	asrs	r5, r5, #1
 800b3fa:	d00b      	beq.n	800b414 <__pow5mult+0xa0>
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	b938      	cbnz	r0, 800b410 <__pow5mult+0x9c>
 800b400:	4622      	mov	r2, r4
 800b402:	4621      	mov	r1, r4
 800b404:	4630      	mov	r0, r6
 800b406:	f7ff ff11 	bl	800b22c <__multiply>
 800b40a:	6020      	str	r0, [r4, #0]
 800b40c:	f8c0 9000 	str.w	r9, [r0]
 800b410:	4604      	mov	r4, r0
 800b412:	e7e4      	b.n	800b3de <__pow5mult+0x6a>
 800b414:	4638      	mov	r0, r7
 800b416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b41a:	bf00      	nop
 800b41c:	0800cd50 	.word	0x0800cd50
 800b420:	0800cab8 	.word	0x0800cab8
 800b424:	0800cbfc 	.word	0x0800cbfc

0800b428 <__lshift>:
 800b428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b42c:	460c      	mov	r4, r1
 800b42e:	4607      	mov	r7, r0
 800b430:	4691      	mov	r9, r2
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	6849      	ldr	r1, [r1, #4]
 800b436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b43a:	68a3      	ldr	r3, [r4, #8]
 800b43c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b440:	f108 0601 	add.w	r6, r8, #1
 800b444:	42b3      	cmp	r3, r6
 800b446:	db0b      	blt.n	800b460 <__lshift+0x38>
 800b448:	4638      	mov	r0, r7
 800b44a:	f7ff fd95 	bl	800af78 <_Balloc>
 800b44e:	4605      	mov	r5, r0
 800b450:	b948      	cbnz	r0, 800b466 <__lshift+0x3e>
 800b452:	4602      	mov	r2, r0
 800b454:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b458:	4b27      	ldr	r3, [pc, #156]	; (800b4f8 <__lshift+0xd0>)
 800b45a:	4828      	ldr	r0, [pc, #160]	; (800b4fc <__lshift+0xd4>)
 800b45c:	f7ff f9dc 	bl	800a818 <__assert_func>
 800b460:	3101      	adds	r1, #1
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	e7ee      	b.n	800b444 <__lshift+0x1c>
 800b466:	2300      	movs	r3, #0
 800b468:	f100 0114 	add.w	r1, r0, #20
 800b46c:	f100 0210 	add.w	r2, r0, #16
 800b470:	4618      	mov	r0, r3
 800b472:	4553      	cmp	r3, sl
 800b474:	db33      	blt.n	800b4de <__lshift+0xb6>
 800b476:	6920      	ldr	r0, [r4, #16]
 800b478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b47c:	f104 0314 	add.w	r3, r4, #20
 800b480:	f019 091f 	ands.w	r9, r9, #31
 800b484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b48c:	d02b      	beq.n	800b4e6 <__lshift+0xbe>
 800b48e:	468a      	mov	sl, r1
 800b490:	2200      	movs	r2, #0
 800b492:	f1c9 0e20 	rsb	lr, r9, #32
 800b496:	6818      	ldr	r0, [r3, #0]
 800b498:	fa00 f009 	lsl.w	r0, r0, r9
 800b49c:	4302      	orrs	r2, r0
 800b49e:	f84a 2b04 	str.w	r2, [sl], #4
 800b4a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a6:	459c      	cmp	ip, r3
 800b4a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4ac:	d8f3      	bhi.n	800b496 <__lshift+0x6e>
 800b4ae:	ebac 0304 	sub.w	r3, ip, r4
 800b4b2:	3b15      	subs	r3, #21
 800b4b4:	f023 0303 	bic.w	r3, r3, #3
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	f104 0015 	add.w	r0, r4, #21
 800b4be:	4584      	cmp	ip, r0
 800b4c0:	bf38      	it	cc
 800b4c2:	2304      	movcc	r3, #4
 800b4c4:	50ca      	str	r2, [r1, r3]
 800b4c6:	b10a      	cbz	r2, 800b4cc <__lshift+0xa4>
 800b4c8:	f108 0602 	add.w	r6, r8, #2
 800b4cc:	3e01      	subs	r6, #1
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	612e      	str	r6, [r5, #16]
 800b4d4:	f7ff fd90 	bl	800aff8 <_Bfree>
 800b4d8:	4628      	mov	r0, r5
 800b4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4de:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	e7c5      	b.n	800b472 <__lshift+0x4a>
 800b4e6:	3904      	subs	r1, #4
 800b4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ec:	459c      	cmp	ip, r3
 800b4ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4f2:	d8f9      	bhi.n	800b4e8 <__lshift+0xc0>
 800b4f4:	e7ea      	b.n	800b4cc <__lshift+0xa4>
 800b4f6:	bf00      	nop
 800b4f8:	0800cb6c 	.word	0x0800cb6c
 800b4fc:	0800cbfc 	.word	0x0800cbfc

0800b500 <__mcmp>:
 800b500:	4603      	mov	r3, r0
 800b502:	690a      	ldr	r2, [r1, #16]
 800b504:	6900      	ldr	r0, [r0, #16]
 800b506:	b530      	push	{r4, r5, lr}
 800b508:	1a80      	subs	r0, r0, r2
 800b50a:	d10d      	bne.n	800b528 <__mcmp+0x28>
 800b50c:	3314      	adds	r3, #20
 800b50e:	3114      	adds	r1, #20
 800b510:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b514:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b51c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b520:	4295      	cmp	r5, r2
 800b522:	d002      	beq.n	800b52a <__mcmp+0x2a>
 800b524:	d304      	bcc.n	800b530 <__mcmp+0x30>
 800b526:	2001      	movs	r0, #1
 800b528:	bd30      	pop	{r4, r5, pc}
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	d3f4      	bcc.n	800b518 <__mcmp+0x18>
 800b52e:	e7fb      	b.n	800b528 <__mcmp+0x28>
 800b530:	f04f 30ff 	mov.w	r0, #4294967295
 800b534:	e7f8      	b.n	800b528 <__mcmp+0x28>
	...

0800b538 <__mdiff>:
 800b538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	460c      	mov	r4, r1
 800b53e:	4606      	mov	r6, r0
 800b540:	4611      	mov	r1, r2
 800b542:	4620      	mov	r0, r4
 800b544:	4692      	mov	sl, r2
 800b546:	f7ff ffdb 	bl	800b500 <__mcmp>
 800b54a:	1e05      	subs	r5, r0, #0
 800b54c:	d111      	bne.n	800b572 <__mdiff+0x3a>
 800b54e:	4629      	mov	r1, r5
 800b550:	4630      	mov	r0, r6
 800b552:	f7ff fd11 	bl	800af78 <_Balloc>
 800b556:	4602      	mov	r2, r0
 800b558:	b928      	cbnz	r0, 800b566 <__mdiff+0x2e>
 800b55a:	f240 2132 	movw	r1, #562	; 0x232
 800b55e:	4b3c      	ldr	r3, [pc, #240]	; (800b650 <__mdiff+0x118>)
 800b560:	483c      	ldr	r0, [pc, #240]	; (800b654 <__mdiff+0x11c>)
 800b562:	f7ff f959 	bl	800a818 <__assert_func>
 800b566:	2301      	movs	r3, #1
 800b568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b56c:	4610      	mov	r0, r2
 800b56e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b572:	bfa4      	itt	ge
 800b574:	4653      	movge	r3, sl
 800b576:	46a2      	movge	sl, r4
 800b578:	4630      	mov	r0, r6
 800b57a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b57e:	bfa6      	itte	ge
 800b580:	461c      	movge	r4, r3
 800b582:	2500      	movge	r5, #0
 800b584:	2501      	movlt	r5, #1
 800b586:	f7ff fcf7 	bl	800af78 <_Balloc>
 800b58a:	4602      	mov	r2, r0
 800b58c:	b918      	cbnz	r0, 800b596 <__mdiff+0x5e>
 800b58e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b592:	4b2f      	ldr	r3, [pc, #188]	; (800b650 <__mdiff+0x118>)
 800b594:	e7e4      	b.n	800b560 <__mdiff+0x28>
 800b596:	f100 0814 	add.w	r8, r0, #20
 800b59a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b59e:	60c5      	str	r5, [r0, #12]
 800b5a0:	f04f 0c00 	mov.w	ip, #0
 800b5a4:	f10a 0514 	add.w	r5, sl, #20
 800b5a8:	f10a 0010 	add.w	r0, sl, #16
 800b5ac:	46c2      	mov	sl, r8
 800b5ae:	6926      	ldr	r6, [r4, #16]
 800b5b0:	f104 0914 	add.w	r9, r4, #20
 800b5b4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b5b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5bc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b5c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5c4:	fa1f f18b 	uxth.w	r1, fp
 800b5c8:	4461      	add	r1, ip
 800b5ca:	fa1f fc83 	uxth.w	ip, r3
 800b5ce:	0c1b      	lsrs	r3, r3, #16
 800b5d0:	eba1 010c 	sub.w	r1, r1, ip
 800b5d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b5dc:	b289      	uxth	r1, r1
 800b5de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b5e2:	454e      	cmp	r6, r9
 800b5e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b5e8:	f84a 3b04 	str.w	r3, [sl], #4
 800b5ec:	d8e6      	bhi.n	800b5bc <__mdiff+0x84>
 800b5ee:	1b33      	subs	r3, r6, r4
 800b5f0:	3b15      	subs	r3, #21
 800b5f2:	f023 0303 	bic.w	r3, r3, #3
 800b5f6:	3415      	adds	r4, #21
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	42a6      	cmp	r6, r4
 800b5fc:	bf38      	it	cc
 800b5fe:	2304      	movcc	r3, #4
 800b600:	441d      	add	r5, r3
 800b602:	4443      	add	r3, r8
 800b604:	461e      	mov	r6, r3
 800b606:	462c      	mov	r4, r5
 800b608:	4574      	cmp	r4, lr
 800b60a:	d30e      	bcc.n	800b62a <__mdiff+0xf2>
 800b60c:	f10e 0103 	add.w	r1, lr, #3
 800b610:	1b49      	subs	r1, r1, r5
 800b612:	f021 0103 	bic.w	r1, r1, #3
 800b616:	3d03      	subs	r5, #3
 800b618:	45ae      	cmp	lr, r5
 800b61a:	bf38      	it	cc
 800b61c:	2100      	movcc	r1, #0
 800b61e:	4419      	add	r1, r3
 800b620:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b624:	b18b      	cbz	r3, 800b64a <__mdiff+0x112>
 800b626:	6117      	str	r7, [r2, #16]
 800b628:	e7a0      	b.n	800b56c <__mdiff+0x34>
 800b62a:	f854 8b04 	ldr.w	r8, [r4], #4
 800b62e:	fa1f f188 	uxth.w	r1, r8
 800b632:	4461      	add	r1, ip
 800b634:	1408      	asrs	r0, r1, #16
 800b636:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b63a:	b289      	uxth	r1, r1
 800b63c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b640:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b644:	f846 1b04 	str.w	r1, [r6], #4
 800b648:	e7de      	b.n	800b608 <__mdiff+0xd0>
 800b64a:	3f01      	subs	r7, #1
 800b64c:	e7e8      	b.n	800b620 <__mdiff+0xe8>
 800b64e:	bf00      	nop
 800b650:	0800cb6c 	.word	0x0800cb6c
 800b654:	0800cbfc 	.word	0x0800cbfc

0800b658 <__ulp>:
 800b658:	4b11      	ldr	r3, [pc, #68]	; (800b6a0 <__ulp+0x48>)
 800b65a:	400b      	ands	r3, r1
 800b65c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b660:	2b00      	cmp	r3, #0
 800b662:	dd02      	ble.n	800b66a <__ulp+0x12>
 800b664:	2000      	movs	r0, #0
 800b666:	4619      	mov	r1, r3
 800b668:	4770      	bx	lr
 800b66a:	425b      	negs	r3, r3
 800b66c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b670:	f04f 0000 	mov.w	r0, #0
 800b674:	f04f 0100 	mov.w	r1, #0
 800b678:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b67c:	da04      	bge.n	800b688 <__ulp+0x30>
 800b67e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b682:	fa43 f102 	asr.w	r1, r3, r2
 800b686:	4770      	bx	lr
 800b688:	f1a2 0314 	sub.w	r3, r2, #20
 800b68c:	2b1e      	cmp	r3, #30
 800b68e:	bfd6      	itet	le
 800b690:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b694:	2301      	movgt	r3, #1
 800b696:	fa22 f303 	lsrle.w	r3, r2, r3
 800b69a:	4618      	mov	r0, r3
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	7ff00000 	.word	0x7ff00000

0800b6a4 <__b2d>:
 800b6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a8:	6907      	ldr	r7, [r0, #16]
 800b6aa:	f100 0914 	add.w	r9, r0, #20
 800b6ae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b6b2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b6b6:	f1a7 0804 	sub.w	r8, r7, #4
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7ff fd52 	bl	800b164 <__hi0bits>
 800b6c0:	f1c0 0320 	rsb	r3, r0, #32
 800b6c4:	280a      	cmp	r0, #10
 800b6c6:	600b      	str	r3, [r1, #0]
 800b6c8:	491f      	ldr	r1, [pc, #124]	; (800b748 <__b2d+0xa4>)
 800b6ca:	dc17      	bgt.n	800b6fc <__b2d+0x58>
 800b6cc:	45c1      	cmp	r9, r8
 800b6ce:	bf28      	it	cs
 800b6d0:	2200      	movcs	r2, #0
 800b6d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b6d6:	fa26 f30c 	lsr.w	r3, r6, ip
 800b6da:	bf38      	it	cc
 800b6dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b6e0:	ea43 0501 	orr.w	r5, r3, r1
 800b6e4:	f100 0315 	add.w	r3, r0, #21
 800b6e8:	fa06 f303 	lsl.w	r3, r6, r3
 800b6ec:	fa22 f20c 	lsr.w	r2, r2, ip
 800b6f0:	ea43 0402 	orr.w	r4, r3, r2
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fc:	45c1      	cmp	r9, r8
 800b6fe:	bf2e      	itee	cs
 800b700:	2200      	movcs	r2, #0
 800b702:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b706:	f1a7 0808 	subcc.w	r8, r7, #8
 800b70a:	f1b0 030b 	subs.w	r3, r0, #11
 800b70e:	d016      	beq.n	800b73e <__b2d+0x9a>
 800b710:	f1c3 0720 	rsb	r7, r3, #32
 800b714:	fa22 f107 	lsr.w	r1, r2, r7
 800b718:	45c8      	cmp	r8, r9
 800b71a:	fa06 f603 	lsl.w	r6, r6, r3
 800b71e:	ea46 0601 	orr.w	r6, r6, r1
 800b722:	bf94      	ite	ls
 800b724:	2100      	movls	r1, #0
 800b726:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b72a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b72e:	fa02 f003 	lsl.w	r0, r2, r3
 800b732:	40f9      	lsrs	r1, r7
 800b734:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b738:	ea40 0401 	orr.w	r4, r0, r1
 800b73c:	e7da      	b.n	800b6f4 <__b2d+0x50>
 800b73e:	4614      	mov	r4, r2
 800b740:	ea46 0501 	orr.w	r5, r6, r1
 800b744:	e7d6      	b.n	800b6f4 <__b2d+0x50>
 800b746:	bf00      	nop
 800b748:	3ff00000 	.word	0x3ff00000

0800b74c <__d2b>:
 800b74c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b750:	2101      	movs	r1, #1
 800b752:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b756:	4690      	mov	r8, r2
 800b758:	461d      	mov	r5, r3
 800b75a:	f7ff fc0d 	bl	800af78 <_Balloc>
 800b75e:	4604      	mov	r4, r0
 800b760:	b930      	cbnz	r0, 800b770 <__d2b+0x24>
 800b762:	4602      	mov	r2, r0
 800b764:	f240 310a 	movw	r1, #778	; 0x30a
 800b768:	4b24      	ldr	r3, [pc, #144]	; (800b7fc <__d2b+0xb0>)
 800b76a:	4825      	ldr	r0, [pc, #148]	; (800b800 <__d2b+0xb4>)
 800b76c:	f7ff f854 	bl	800a818 <__assert_func>
 800b770:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b774:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b778:	bb2d      	cbnz	r5, 800b7c6 <__d2b+0x7a>
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	f1b8 0300 	subs.w	r3, r8, #0
 800b780:	d026      	beq.n	800b7d0 <__d2b+0x84>
 800b782:	4668      	mov	r0, sp
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	f7ff fd0d 	bl	800b1a4 <__lo0bits>
 800b78a:	9900      	ldr	r1, [sp, #0]
 800b78c:	b1f0      	cbz	r0, 800b7cc <__d2b+0x80>
 800b78e:	9a01      	ldr	r2, [sp, #4]
 800b790:	f1c0 0320 	rsb	r3, r0, #32
 800b794:	fa02 f303 	lsl.w	r3, r2, r3
 800b798:	430b      	orrs	r3, r1
 800b79a:	40c2      	lsrs	r2, r0
 800b79c:	6163      	str	r3, [r4, #20]
 800b79e:	9201      	str	r2, [sp, #4]
 800b7a0:	9b01      	ldr	r3, [sp, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	bf14      	ite	ne
 800b7a6:	2102      	movne	r1, #2
 800b7a8:	2101      	moveq	r1, #1
 800b7aa:	61a3      	str	r3, [r4, #24]
 800b7ac:	6121      	str	r1, [r4, #16]
 800b7ae:	b1c5      	cbz	r5, 800b7e2 <__d2b+0x96>
 800b7b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7b4:	4405      	add	r5, r0
 800b7b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7ba:	603d      	str	r5, [r7, #0]
 800b7bc:	6030      	str	r0, [r6, #0]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	b002      	add	sp, #8
 800b7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ca:	e7d6      	b.n	800b77a <__d2b+0x2e>
 800b7cc:	6161      	str	r1, [r4, #20]
 800b7ce:	e7e7      	b.n	800b7a0 <__d2b+0x54>
 800b7d0:	a801      	add	r0, sp, #4
 800b7d2:	f7ff fce7 	bl	800b1a4 <__lo0bits>
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	6121      	str	r1, [r4, #16]
 800b7dc:	6163      	str	r3, [r4, #20]
 800b7de:	3020      	adds	r0, #32
 800b7e0:	e7e5      	b.n	800b7ae <__d2b+0x62>
 800b7e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b7e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7ea:	6038      	str	r0, [r7, #0]
 800b7ec:	6918      	ldr	r0, [r3, #16]
 800b7ee:	f7ff fcb9 	bl	800b164 <__hi0bits>
 800b7f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b7f6:	6031      	str	r1, [r6, #0]
 800b7f8:	e7e1      	b.n	800b7be <__d2b+0x72>
 800b7fa:	bf00      	nop
 800b7fc:	0800cb6c 	.word	0x0800cb6c
 800b800:	0800cbfc 	.word	0x0800cbfc

0800b804 <__ratio>:
 800b804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	4688      	mov	r8, r1
 800b80a:	4669      	mov	r1, sp
 800b80c:	4681      	mov	r9, r0
 800b80e:	f7ff ff49 	bl	800b6a4 <__b2d>
 800b812:	460f      	mov	r7, r1
 800b814:	4604      	mov	r4, r0
 800b816:	460d      	mov	r5, r1
 800b818:	4640      	mov	r0, r8
 800b81a:	a901      	add	r1, sp, #4
 800b81c:	f7ff ff42 	bl	800b6a4 <__b2d>
 800b820:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b824:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b828:	468b      	mov	fp, r1
 800b82a:	eba3 0c02 	sub.w	ip, r3, r2
 800b82e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b838:	2b00      	cmp	r3, #0
 800b83a:	bfd5      	itete	le
 800b83c:	460a      	movle	r2, r1
 800b83e:	462a      	movgt	r2, r5
 800b840:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b844:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b848:	bfd8      	it	le
 800b84a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b84e:	465b      	mov	r3, fp
 800b850:	4602      	mov	r2, r0
 800b852:	4639      	mov	r1, r7
 800b854:	4620      	mov	r0, r4
 800b856:	f7f4 ff8b 	bl	8000770 <__aeabi_ddiv>
 800b85a:	b003      	add	sp, #12
 800b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b860 <__copybits>:
 800b860:	3901      	subs	r1, #1
 800b862:	b570      	push	{r4, r5, r6, lr}
 800b864:	1149      	asrs	r1, r1, #5
 800b866:	6914      	ldr	r4, [r2, #16]
 800b868:	3101      	adds	r1, #1
 800b86a:	f102 0314 	add.w	r3, r2, #20
 800b86e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b872:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b876:	1f05      	subs	r5, r0, #4
 800b878:	42a3      	cmp	r3, r4
 800b87a:	d30c      	bcc.n	800b896 <__copybits+0x36>
 800b87c:	1aa3      	subs	r3, r4, r2
 800b87e:	3b11      	subs	r3, #17
 800b880:	f023 0303 	bic.w	r3, r3, #3
 800b884:	3211      	adds	r2, #17
 800b886:	42a2      	cmp	r2, r4
 800b888:	bf88      	it	hi
 800b88a:	2300      	movhi	r3, #0
 800b88c:	4418      	add	r0, r3
 800b88e:	2300      	movs	r3, #0
 800b890:	4288      	cmp	r0, r1
 800b892:	d305      	bcc.n	800b8a0 <__copybits+0x40>
 800b894:	bd70      	pop	{r4, r5, r6, pc}
 800b896:	f853 6b04 	ldr.w	r6, [r3], #4
 800b89a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b89e:	e7eb      	b.n	800b878 <__copybits+0x18>
 800b8a0:	f840 3b04 	str.w	r3, [r0], #4
 800b8a4:	e7f4      	b.n	800b890 <__copybits+0x30>

0800b8a6 <__any_on>:
 800b8a6:	f100 0214 	add.w	r2, r0, #20
 800b8aa:	6900      	ldr	r0, [r0, #16]
 800b8ac:	114b      	asrs	r3, r1, #5
 800b8ae:	4298      	cmp	r0, r3
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	db11      	blt.n	800b8d8 <__any_on+0x32>
 800b8b4:	dd0a      	ble.n	800b8cc <__any_on+0x26>
 800b8b6:	f011 011f 	ands.w	r1, r1, #31
 800b8ba:	d007      	beq.n	800b8cc <__any_on+0x26>
 800b8bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8c0:	fa24 f001 	lsr.w	r0, r4, r1
 800b8c4:	fa00 f101 	lsl.w	r1, r0, r1
 800b8c8:	428c      	cmp	r4, r1
 800b8ca:	d10b      	bne.n	800b8e4 <__any_on+0x3e>
 800b8cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d803      	bhi.n	800b8dc <__any_on+0x36>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	bd10      	pop	{r4, pc}
 800b8d8:	4603      	mov	r3, r0
 800b8da:	e7f7      	b.n	800b8cc <__any_on+0x26>
 800b8dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	d0f5      	beq.n	800b8d0 <__any_on+0x2a>
 800b8e4:	2001      	movs	r0, #1
 800b8e6:	e7f6      	b.n	800b8d6 <__any_on+0x30>

0800b8e8 <_calloc_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	fb02 f501 	mul.w	r5, r2, r1
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	f000 f854 	bl	800b99c <_malloc_r>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	b118      	cbz	r0, 800b900 <_calloc_r+0x18>
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	f7fe f8fc 	bl	8009af8 <memset>
 800b900:	4620      	mov	r0, r4
 800b902:	bd38      	pop	{r3, r4, r5, pc}

0800b904 <_free_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4605      	mov	r5, r0
 800b908:	2900      	cmp	r1, #0
 800b90a:	d043      	beq.n	800b994 <_free_r+0x90>
 800b90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b910:	1f0c      	subs	r4, r1, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	bfb8      	it	lt
 800b916:	18e4      	addlt	r4, r4, r3
 800b918:	f000 feb2 	bl	800c680 <__malloc_lock>
 800b91c:	4a1e      	ldr	r2, [pc, #120]	; (800b998 <_free_r+0x94>)
 800b91e:	6813      	ldr	r3, [r2, #0]
 800b920:	4610      	mov	r0, r2
 800b922:	b933      	cbnz	r3, 800b932 <_free_r+0x2e>
 800b924:	6063      	str	r3, [r4, #4]
 800b926:	6014      	str	r4, [r2, #0]
 800b928:	4628      	mov	r0, r5
 800b92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b92e:	f000 bead 	b.w	800c68c <__malloc_unlock>
 800b932:	42a3      	cmp	r3, r4
 800b934:	d90a      	bls.n	800b94c <_free_r+0x48>
 800b936:	6821      	ldr	r1, [r4, #0]
 800b938:	1862      	adds	r2, r4, r1
 800b93a:	4293      	cmp	r3, r2
 800b93c:	bf01      	itttt	eq
 800b93e:	681a      	ldreq	r2, [r3, #0]
 800b940:	685b      	ldreq	r3, [r3, #4]
 800b942:	1852      	addeq	r2, r2, r1
 800b944:	6022      	streq	r2, [r4, #0]
 800b946:	6063      	str	r3, [r4, #4]
 800b948:	6004      	str	r4, [r0, #0]
 800b94a:	e7ed      	b.n	800b928 <_free_r+0x24>
 800b94c:	461a      	mov	r2, r3
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	b10b      	cbz	r3, 800b956 <_free_r+0x52>
 800b952:	42a3      	cmp	r3, r4
 800b954:	d9fa      	bls.n	800b94c <_free_r+0x48>
 800b956:	6811      	ldr	r1, [r2, #0]
 800b958:	1850      	adds	r0, r2, r1
 800b95a:	42a0      	cmp	r0, r4
 800b95c:	d10b      	bne.n	800b976 <_free_r+0x72>
 800b95e:	6820      	ldr	r0, [r4, #0]
 800b960:	4401      	add	r1, r0
 800b962:	1850      	adds	r0, r2, r1
 800b964:	4283      	cmp	r3, r0
 800b966:	6011      	str	r1, [r2, #0]
 800b968:	d1de      	bne.n	800b928 <_free_r+0x24>
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	4401      	add	r1, r0
 800b970:	6011      	str	r1, [r2, #0]
 800b972:	6053      	str	r3, [r2, #4]
 800b974:	e7d8      	b.n	800b928 <_free_r+0x24>
 800b976:	d902      	bls.n	800b97e <_free_r+0x7a>
 800b978:	230c      	movs	r3, #12
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	e7d4      	b.n	800b928 <_free_r+0x24>
 800b97e:	6820      	ldr	r0, [r4, #0]
 800b980:	1821      	adds	r1, r4, r0
 800b982:	428b      	cmp	r3, r1
 800b984:	bf01      	itttt	eq
 800b986:	6819      	ldreq	r1, [r3, #0]
 800b988:	685b      	ldreq	r3, [r3, #4]
 800b98a:	1809      	addeq	r1, r1, r0
 800b98c:	6021      	streq	r1, [r4, #0]
 800b98e:	6063      	str	r3, [r4, #4]
 800b990:	6054      	str	r4, [r2, #4]
 800b992:	e7c9      	b.n	800b928 <_free_r+0x24>
 800b994:	bd38      	pop	{r3, r4, r5, pc}
 800b996:	bf00      	nop
 800b998:	200005b0 	.word	0x200005b0

0800b99c <_malloc_r>:
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	1ccd      	adds	r5, r1, #3
 800b9a0:	f025 0503 	bic.w	r5, r5, #3
 800b9a4:	3508      	adds	r5, #8
 800b9a6:	2d0c      	cmp	r5, #12
 800b9a8:	bf38      	it	cc
 800b9aa:	250c      	movcc	r5, #12
 800b9ac:	2d00      	cmp	r5, #0
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	db01      	blt.n	800b9b6 <_malloc_r+0x1a>
 800b9b2:	42a9      	cmp	r1, r5
 800b9b4:	d903      	bls.n	800b9be <_malloc_r+0x22>
 800b9b6:	230c      	movs	r3, #12
 800b9b8:	6033      	str	r3, [r6, #0]
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9be:	f000 fe5f 	bl	800c680 <__malloc_lock>
 800b9c2:	4921      	ldr	r1, [pc, #132]	; (800ba48 <_malloc_r+0xac>)
 800b9c4:	680a      	ldr	r2, [r1, #0]
 800b9c6:	4614      	mov	r4, r2
 800b9c8:	b99c      	cbnz	r4, 800b9f2 <_malloc_r+0x56>
 800b9ca:	4f20      	ldr	r7, [pc, #128]	; (800ba4c <_malloc_r+0xb0>)
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	b923      	cbnz	r3, 800b9da <_malloc_r+0x3e>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f000 fb30 	bl	800c038 <_sbrk_r>
 800b9d8:	6038      	str	r0, [r7, #0]
 800b9da:	4629      	mov	r1, r5
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f000 fb2b 	bl	800c038 <_sbrk_r>
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	d123      	bne.n	800ba2e <_malloc_r+0x92>
 800b9e6:	230c      	movs	r3, #12
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	6033      	str	r3, [r6, #0]
 800b9ec:	f000 fe4e 	bl	800c68c <__malloc_unlock>
 800b9f0:	e7e3      	b.n	800b9ba <_malloc_r+0x1e>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	1b5b      	subs	r3, r3, r5
 800b9f6:	d417      	bmi.n	800ba28 <_malloc_r+0x8c>
 800b9f8:	2b0b      	cmp	r3, #11
 800b9fa:	d903      	bls.n	800ba04 <_malloc_r+0x68>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	441c      	add	r4, r3
 800ba00:	6025      	str	r5, [r4, #0]
 800ba02:	e004      	b.n	800ba0e <_malloc_r+0x72>
 800ba04:	6863      	ldr	r3, [r4, #4]
 800ba06:	42a2      	cmp	r2, r4
 800ba08:	bf0c      	ite	eq
 800ba0a:	600b      	streq	r3, [r1, #0]
 800ba0c:	6053      	strne	r3, [r2, #4]
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f000 fe3c 	bl	800c68c <__malloc_unlock>
 800ba14:	f104 000b 	add.w	r0, r4, #11
 800ba18:	1d23      	adds	r3, r4, #4
 800ba1a:	f020 0007 	bic.w	r0, r0, #7
 800ba1e:	1ac2      	subs	r2, r0, r3
 800ba20:	d0cc      	beq.n	800b9bc <_malloc_r+0x20>
 800ba22:	1a1b      	subs	r3, r3, r0
 800ba24:	50a3      	str	r3, [r4, r2]
 800ba26:	e7c9      	b.n	800b9bc <_malloc_r+0x20>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	6864      	ldr	r4, [r4, #4]
 800ba2c:	e7cc      	b.n	800b9c8 <_malloc_r+0x2c>
 800ba2e:	1cc4      	adds	r4, r0, #3
 800ba30:	f024 0403 	bic.w	r4, r4, #3
 800ba34:	42a0      	cmp	r0, r4
 800ba36:	d0e3      	beq.n	800ba00 <_malloc_r+0x64>
 800ba38:	1a21      	subs	r1, r4, r0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f000 fafc 	bl	800c038 <_sbrk_r>
 800ba40:	3001      	adds	r0, #1
 800ba42:	d1dd      	bne.n	800ba00 <_malloc_r+0x64>
 800ba44:	e7cf      	b.n	800b9e6 <_malloc_r+0x4a>
 800ba46:	bf00      	nop
 800ba48:	200005b0 	.word	0x200005b0
 800ba4c:	200005b4 	.word	0x200005b4

0800ba50 <__sfputc_r>:
 800ba50:	6893      	ldr	r3, [r2, #8]
 800ba52:	b410      	push	{r4}
 800ba54:	3b01      	subs	r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	6093      	str	r3, [r2, #8]
 800ba5a:	da07      	bge.n	800ba6c <__sfputc_r+0x1c>
 800ba5c:	6994      	ldr	r4, [r2, #24]
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	db01      	blt.n	800ba66 <__sfputc_r+0x16>
 800ba62:	290a      	cmp	r1, #10
 800ba64:	d102      	bne.n	800ba6c <__sfputc_r+0x1c>
 800ba66:	bc10      	pop	{r4}
 800ba68:	f000 bb08 	b.w	800c07c <__swbuf_r>
 800ba6c:	6813      	ldr	r3, [r2, #0]
 800ba6e:	1c58      	adds	r0, r3, #1
 800ba70:	6010      	str	r0, [r2, #0]
 800ba72:	7019      	strb	r1, [r3, #0]
 800ba74:	4608      	mov	r0, r1
 800ba76:	bc10      	pop	{r4}
 800ba78:	4770      	bx	lr

0800ba7a <__sfputs_r>:
 800ba7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	460f      	mov	r7, r1
 800ba80:	4614      	mov	r4, r2
 800ba82:	18d5      	adds	r5, r2, r3
 800ba84:	42ac      	cmp	r4, r5
 800ba86:	d101      	bne.n	800ba8c <__sfputs_r+0x12>
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e007      	b.n	800ba9c <__sfputs_r+0x22>
 800ba8c:	463a      	mov	r2, r7
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba94:	f7ff ffdc 	bl	800ba50 <__sfputc_r>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d1f3      	bne.n	800ba84 <__sfputs_r+0xa>
 800ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800baa0 <_vfiprintf_r>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	460d      	mov	r5, r1
 800baa6:	4614      	mov	r4, r2
 800baa8:	4698      	mov	r8, r3
 800baaa:	4606      	mov	r6, r0
 800baac:	b09d      	sub	sp, #116	; 0x74
 800baae:	b118      	cbz	r0, 800bab8 <_vfiprintf_r+0x18>
 800bab0:	6983      	ldr	r3, [r0, #24]
 800bab2:	b90b      	cbnz	r3, 800bab8 <_vfiprintf_r+0x18>
 800bab4:	f000 fcd2 	bl	800c45c <__sinit>
 800bab8:	4b89      	ldr	r3, [pc, #548]	; (800bce0 <_vfiprintf_r+0x240>)
 800baba:	429d      	cmp	r5, r3
 800babc:	d11b      	bne.n	800baf6 <_vfiprintf_r+0x56>
 800babe:	6875      	ldr	r5, [r6, #4]
 800bac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac2:	07d9      	lsls	r1, r3, #31
 800bac4:	d405      	bmi.n	800bad2 <_vfiprintf_r+0x32>
 800bac6:	89ab      	ldrh	r3, [r5, #12]
 800bac8:	059a      	lsls	r2, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_vfiprintf_r+0x32>
 800bacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bace:	f000 fd63 	bl	800c598 <__retarget_lock_acquire_recursive>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	071b      	lsls	r3, r3, #28
 800bad6:	d501      	bpl.n	800badc <_vfiprintf_r+0x3c>
 800bad8:	692b      	ldr	r3, [r5, #16]
 800bada:	b9eb      	cbnz	r3, 800bb18 <_vfiprintf_r+0x78>
 800badc:	4629      	mov	r1, r5
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 fb2c 	bl	800c13c <__swsetup_r>
 800bae4:	b1c0      	cbz	r0, 800bb18 <_vfiprintf_r+0x78>
 800bae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae8:	07dc      	lsls	r4, r3, #31
 800baea:	d50e      	bpl.n	800bb0a <_vfiprintf_r+0x6a>
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	b01d      	add	sp, #116	; 0x74
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	4b7b      	ldr	r3, [pc, #492]	; (800bce4 <_vfiprintf_r+0x244>)
 800baf8:	429d      	cmp	r5, r3
 800bafa:	d101      	bne.n	800bb00 <_vfiprintf_r+0x60>
 800bafc:	68b5      	ldr	r5, [r6, #8]
 800bafe:	e7df      	b.n	800bac0 <_vfiprintf_r+0x20>
 800bb00:	4b79      	ldr	r3, [pc, #484]	; (800bce8 <_vfiprintf_r+0x248>)
 800bb02:	429d      	cmp	r5, r3
 800bb04:	bf08      	it	eq
 800bb06:	68f5      	ldreq	r5, [r6, #12]
 800bb08:	e7da      	b.n	800bac0 <_vfiprintf_r+0x20>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	0598      	lsls	r0, r3, #22
 800bb0e:	d4ed      	bmi.n	800baec <_vfiprintf_r+0x4c>
 800bb10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb12:	f000 fd42 	bl	800c59a <__retarget_lock_release_recursive>
 800bb16:	e7e9      	b.n	800baec <_vfiprintf_r+0x4c>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1c:	2320      	movs	r3, #32
 800bb1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb22:	2330      	movs	r3, #48	; 0x30
 800bb24:	f04f 0901 	mov.w	r9, #1
 800bb28:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bcec <_vfiprintf_r+0x24c>
 800bb30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb34:	4623      	mov	r3, r4
 800bb36:	469a      	mov	sl, r3
 800bb38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb3c:	b10a      	cbz	r2, 800bb42 <_vfiprintf_r+0xa2>
 800bb3e:	2a25      	cmp	r2, #37	; 0x25
 800bb40:	d1f9      	bne.n	800bb36 <_vfiprintf_r+0x96>
 800bb42:	ebba 0b04 	subs.w	fp, sl, r4
 800bb46:	d00b      	beq.n	800bb60 <_vfiprintf_r+0xc0>
 800bb48:	465b      	mov	r3, fp
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7ff ff93 	bl	800ba7a <__sfputs_r>
 800bb54:	3001      	adds	r0, #1
 800bb56:	f000 80aa 	beq.w	800bcae <_vfiprintf_r+0x20e>
 800bb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb5c:	445a      	add	r2, fp
 800bb5e:	9209      	str	r2, [sp, #36]	; 0x24
 800bb60:	f89a 3000 	ldrb.w	r3, [sl]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 80a2 	beq.w	800bcae <_vfiprintf_r+0x20e>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb74:	f10a 0a01 	add.w	sl, sl, #1
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	9307      	str	r3, [sp, #28]
 800bb7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb80:	931a      	str	r3, [sp, #104]	; 0x68
 800bb82:	4654      	mov	r4, sl
 800bb84:	2205      	movs	r2, #5
 800bb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8a:	4858      	ldr	r0, [pc, #352]	; (800bcec <_vfiprintf_r+0x24c>)
 800bb8c:	f000 fd6a 	bl	800c664 <memchr>
 800bb90:	9a04      	ldr	r2, [sp, #16]
 800bb92:	b9d8      	cbnz	r0, 800bbcc <_vfiprintf_r+0x12c>
 800bb94:	06d1      	lsls	r1, r2, #27
 800bb96:	bf44      	itt	mi
 800bb98:	2320      	movmi	r3, #32
 800bb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb9e:	0713      	lsls	r3, r2, #28
 800bba0:	bf44      	itt	mi
 800bba2:	232b      	movmi	r3, #43	; 0x2b
 800bba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbac:	2b2a      	cmp	r3, #42	; 0x2a
 800bbae:	d015      	beq.n	800bbdc <_vfiprintf_r+0x13c>
 800bbb0:	4654      	mov	r4, sl
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	f04f 0c0a 	mov.w	ip, #10
 800bbb8:	9a07      	ldr	r2, [sp, #28]
 800bbba:	4621      	mov	r1, r4
 800bbbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbc0:	3b30      	subs	r3, #48	; 0x30
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	d94e      	bls.n	800bc64 <_vfiprintf_r+0x1c4>
 800bbc6:	b1b0      	cbz	r0, 800bbf6 <_vfiprintf_r+0x156>
 800bbc8:	9207      	str	r2, [sp, #28]
 800bbca:	e014      	b.n	800bbf6 <_vfiprintf_r+0x156>
 800bbcc:	eba0 0308 	sub.w	r3, r0, r8
 800bbd0:	fa09 f303 	lsl.w	r3, r9, r3
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	46a2      	mov	sl, r4
 800bbd8:	9304      	str	r3, [sp, #16]
 800bbda:	e7d2      	b.n	800bb82 <_vfiprintf_r+0xe2>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	1d19      	adds	r1, r3, #4
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	9103      	str	r1, [sp, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	bfbb      	ittet	lt
 800bbe8:	425b      	neglt	r3, r3
 800bbea:	f042 0202 	orrlt.w	r2, r2, #2
 800bbee:	9307      	strge	r3, [sp, #28]
 800bbf0:	9307      	strlt	r3, [sp, #28]
 800bbf2:	bfb8      	it	lt
 800bbf4:	9204      	strlt	r2, [sp, #16]
 800bbf6:	7823      	ldrb	r3, [r4, #0]
 800bbf8:	2b2e      	cmp	r3, #46	; 0x2e
 800bbfa:	d10c      	bne.n	800bc16 <_vfiprintf_r+0x176>
 800bbfc:	7863      	ldrb	r3, [r4, #1]
 800bbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800bc00:	d135      	bne.n	800bc6e <_vfiprintf_r+0x1ce>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	3402      	adds	r4, #2
 800bc06:	1d1a      	adds	r2, r3, #4
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	9203      	str	r2, [sp, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bfb8      	it	lt
 800bc10:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc14:	9305      	str	r3, [sp, #20]
 800bc16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcfc <_vfiprintf_r+0x25c>
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	4650      	mov	r0, sl
 800bc1e:	7821      	ldrb	r1, [r4, #0]
 800bc20:	f000 fd20 	bl	800c664 <memchr>
 800bc24:	b140      	cbz	r0, 800bc38 <_vfiprintf_r+0x198>
 800bc26:	2340      	movs	r3, #64	; 0x40
 800bc28:	eba0 000a 	sub.w	r0, r0, sl
 800bc2c:	fa03 f000 	lsl.w	r0, r3, r0
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	3401      	adds	r4, #1
 800bc34:	4303      	orrs	r3, r0
 800bc36:	9304      	str	r3, [sp, #16]
 800bc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3c:	2206      	movs	r2, #6
 800bc3e:	482c      	ldr	r0, [pc, #176]	; (800bcf0 <_vfiprintf_r+0x250>)
 800bc40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc44:	f000 fd0e 	bl	800c664 <memchr>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d03f      	beq.n	800bccc <_vfiprintf_r+0x22c>
 800bc4c:	4b29      	ldr	r3, [pc, #164]	; (800bcf4 <_vfiprintf_r+0x254>)
 800bc4e:	bb1b      	cbnz	r3, 800bc98 <_vfiprintf_r+0x1f8>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	3307      	adds	r3, #7
 800bc54:	f023 0307 	bic.w	r3, r3, #7
 800bc58:	3308      	adds	r3, #8
 800bc5a:	9303      	str	r3, [sp, #12]
 800bc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5e:	443b      	add	r3, r7
 800bc60:	9309      	str	r3, [sp, #36]	; 0x24
 800bc62:	e767      	b.n	800bb34 <_vfiprintf_r+0x94>
 800bc64:	460c      	mov	r4, r1
 800bc66:	2001      	movs	r0, #1
 800bc68:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6c:	e7a5      	b.n	800bbba <_vfiprintf_r+0x11a>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f04f 0c0a 	mov.w	ip, #10
 800bc74:	4619      	mov	r1, r3
 800bc76:	3401      	adds	r4, #1
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc80:	3a30      	subs	r2, #48	; 0x30
 800bc82:	2a09      	cmp	r2, #9
 800bc84:	d903      	bls.n	800bc8e <_vfiprintf_r+0x1ee>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0c5      	beq.n	800bc16 <_vfiprintf_r+0x176>
 800bc8a:	9105      	str	r1, [sp, #20]
 800bc8c:	e7c3      	b.n	800bc16 <_vfiprintf_r+0x176>
 800bc8e:	4604      	mov	r4, r0
 800bc90:	2301      	movs	r3, #1
 800bc92:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc96:	e7f0      	b.n	800bc7a <_vfiprintf_r+0x1da>
 800bc98:	ab03      	add	r3, sp, #12
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4630      	mov	r0, r6
 800bca0:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <_vfiprintf_r+0x258>)
 800bca2:	a904      	add	r1, sp, #16
 800bca4:	f3af 8000 	nop.w
 800bca8:	4607      	mov	r7, r0
 800bcaa:	1c78      	adds	r0, r7, #1
 800bcac:	d1d6      	bne.n	800bc5c <_vfiprintf_r+0x1bc>
 800bcae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcb0:	07d9      	lsls	r1, r3, #31
 800bcb2:	d405      	bmi.n	800bcc0 <_vfiprintf_r+0x220>
 800bcb4:	89ab      	ldrh	r3, [r5, #12]
 800bcb6:	059a      	lsls	r2, r3, #22
 800bcb8:	d402      	bmi.n	800bcc0 <_vfiprintf_r+0x220>
 800bcba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcbc:	f000 fc6d 	bl	800c59a <__retarget_lock_release_recursive>
 800bcc0:	89ab      	ldrh	r3, [r5, #12]
 800bcc2:	065b      	lsls	r3, r3, #25
 800bcc4:	f53f af12 	bmi.w	800baec <_vfiprintf_r+0x4c>
 800bcc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcca:	e711      	b.n	800baf0 <_vfiprintf_r+0x50>
 800bccc:	ab03      	add	r3, sp, #12
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	462a      	mov	r2, r5
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	4b08      	ldr	r3, [pc, #32]	; (800bcf8 <_vfiprintf_r+0x258>)
 800bcd6:	a904      	add	r1, sp, #16
 800bcd8:	f000 f882 	bl	800bde0 <_printf_i>
 800bcdc:	e7e4      	b.n	800bca8 <_vfiprintf_r+0x208>
 800bcde:	bf00      	nop
 800bce0:	0800ceb0 	.word	0x0800ceb0
 800bce4:	0800ced0 	.word	0x0800ced0
 800bce8:	0800ce90 	.word	0x0800ce90
 800bcec:	0800cd5c 	.word	0x0800cd5c
 800bcf0:	0800cd66 	.word	0x0800cd66
 800bcf4:	00000000 	.word	0x00000000
 800bcf8:	0800ba7b 	.word	0x0800ba7b
 800bcfc:	0800cd62 	.word	0x0800cd62

0800bd00 <_printf_common>:
 800bd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd04:	4616      	mov	r6, r2
 800bd06:	4699      	mov	r9, r3
 800bd08:	688a      	ldr	r2, [r1, #8]
 800bd0a:	690b      	ldr	r3, [r1, #16]
 800bd0c:	4607      	mov	r7, r0
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	bfb8      	it	lt
 800bd12:	4613      	movlt	r3, r2
 800bd14:	6033      	str	r3, [r6, #0]
 800bd16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd20:	b10a      	cbz	r2, 800bd26 <_printf_common+0x26>
 800bd22:	3301      	adds	r3, #1
 800bd24:	6033      	str	r3, [r6, #0]
 800bd26:	6823      	ldr	r3, [r4, #0]
 800bd28:	0699      	lsls	r1, r3, #26
 800bd2a:	bf42      	ittt	mi
 800bd2c:	6833      	ldrmi	r3, [r6, #0]
 800bd2e:	3302      	addmi	r3, #2
 800bd30:	6033      	strmi	r3, [r6, #0]
 800bd32:	6825      	ldr	r5, [r4, #0]
 800bd34:	f015 0506 	ands.w	r5, r5, #6
 800bd38:	d106      	bne.n	800bd48 <_printf_common+0x48>
 800bd3a:	f104 0a19 	add.w	sl, r4, #25
 800bd3e:	68e3      	ldr	r3, [r4, #12]
 800bd40:	6832      	ldr	r2, [r6, #0]
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	42ab      	cmp	r3, r5
 800bd46:	dc28      	bgt.n	800bd9a <_printf_common+0x9a>
 800bd48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd4c:	1e13      	subs	r3, r2, #0
 800bd4e:	6822      	ldr	r2, [r4, #0]
 800bd50:	bf18      	it	ne
 800bd52:	2301      	movne	r3, #1
 800bd54:	0692      	lsls	r2, r2, #26
 800bd56:	d42d      	bmi.n	800bdb4 <_printf_common+0xb4>
 800bd58:	4649      	mov	r1, r9
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd60:	47c0      	blx	r8
 800bd62:	3001      	adds	r0, #1
 800bd64:	d020      	beq.n	800bda8 <_printf_common+0xa8>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	68e5      	ldr	r5, [r4, #12]
 800bd6a:	f003 0306 	and.w	r3, r3, #6
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	bf18      	it	ne
 800bd72:	2500      	movne	r5, #0
 800bd74:	6832      	ldr	r2, [r6, #0]
 800bd76:	f04f 0600 	mov.w	r6, #0
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	bf08      	it	eq
 800bd7e:	1aad      	subeq	r5, r5, r2
 800bd80:	6922      	ldr	r2, [r4, #16]
 800bd82:	bf08      	it	eq
 800bd84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	bfc4      	itt	gt
 800bd8c:	1a9b      	subgt	r3, r3, r2
 800bd8e:	18ed      	addgt	r5, r5, r3
 800bd90:	341a      	adds	r4, #26
 800bd92:	42b5      	cmp	r5, r6
 800bd94:	d11a      	bne.n	800bdcc <_printf_common+0xcc>
 800bd96:	2000      	movs	r0, #0
 800bd98:	e008      	b.n	800bdac <_printf_common+0xac>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	4652      	mov	r2, sl
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4638      	mov	r0, r7
 800bda2:	47c0      	blx	r8
 800bda4:	3001      	adds	r0, #1
 800bda6:	d103      	bne.n	800bdb0 <_printf_common+0xb0>
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	e7c4      	b.n	800bd3e <_printf_common+0x3e>
 800bdb4:	2030      	movs	r0, #48	; 0x30
 800bdb6:	18e1      	adds	r1, r4, r3
 800bdb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdc2:	4422      	add	r2, r4
 800bdc4:	3302      	adds	r3, #2
 800bdc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdca:	e7c5      	b.n	800bd58 <_printf_common+0x58>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	4622      	mov	r2, r4
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	47c0      	blx	r8
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	d0e6      	beq.n	800bda8 <_printf_common+0xa8>
 800bdda:	3601      	adds	r6, #1
 800bddc:	e7d9      	b.n	800bd92 <_printf_common+0x92>
	...

0800bde0 <_printf_i>:
 800bde0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bde4:	460c      	mov	r4, r1
 800bde6:	7e27      	ldrb	r7, [r4, #24]
 800bde8:	4691      	mov	r9, r2
 800bdea:	2f78      	cmp	r7, #120	; 0x78
 800bdec:	4680      	mov	r8, r0
 800bdee:	469a      	mov	sl, r3
 800bdf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdf6:	d807      	bhi.n	800be08 <_printf_i+0x28>
 800bdf8:	2f62      	cmp	r7, #98	; 0x62
 800bdfa:	d80a      	bhi.n	800be12 <_printf_i+0x32>
 800bdfc:	2f00      	cmp	r7, #0
 800bdfe:	f000 80d9 	beq.w	800bfb4 <_printf_i+0x1d4>
 800be02:	2f58      	cmp	r7, #88	; 0x58
 800be04:	f000 80a4 	beq.w	800bf50 <_printf_i+0x170>
 800be08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be10:	e03a      	b.n	800be88 <_printf_i+0xa8>
 800be12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be16:	2b15      	cmp	r3, #21
 800be18:	d8f6      	bhi.n	800be08 <_printf_i+0x28>
 800be1a:	a001      	add	r0, pc, #4	; (adr r0, 800be20 <_printf_i+0x40>)
 800be1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800be20:	0800be79 	.word	0x0800be79
 800be24:	0800be8d 	.word	0x0800be8d
 800be28:	0800be09 	.word	0x0800be09
 800be2c:	0800be09 	.word	0x0800be09
 800be30:	0800be09 	.word	0x0800be09
 800be34:	0800be09 	.word	0x0800be09
 800be38:	0800be8d 	.word	0x0800be8d
 800be3c:	0800be09 	.word	0x0800be09
 800be40:	0800be09 	.word	0x0800be09
 800be44:	0800be09 	.word	0x0800be09
 800be48:	0800be09 	.word	0x0800be09
 800be4c:	0800bf9b 	.word	0x0800bf9b
 800be50:	0800bebd 	.word	0x0800bebd
 800be54:	0800bf7d 	.word	0x0800bf7d
 800be58:	0800be09 	.word	0x0800be09
 800be5c:	0800be09 	.word	0x0800be09
 800be60:	0800bfbd 	.word	0x0800bfbd
 800be64:	0800be09 	.word	0x0800be09
 800be68:	0800bebd 	.word	0x0800bebd
 800be6c:	0800be09 	.word	0x0800be09
 800be70:	0800be09 	.word	0x0800be09
 800be74:	0800bf85 	.word	0x0800bf85
 800be78:	680b      	ldr	r3, [r1, #0]
 800be7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	600a      	str	r2, [r1, #0]
 800be84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be88:	2301      	movs	r3, #1
 800be8a:	e0a4      	b.n	800bfd6 <_printf_i+0x1f6>
 800be8c:	6825      	ldr	r5, [r4, #0]
 800be8e:	6808      	ldr	r0, [r1, #0]
 800be90:	062e      	lsls	r6, r5, #24
 800be92:	f100 0304 	add.w	r3, r0, #4
 800be96:	d50a      	bpl.n	800beae <_printf_i+0xce>
 800be98:	6805      	ldr	r5, [r0, #0]
 800be9a:	600b      	str	r3, [r1, #0]
 800be9c:	2d00      	cmp	r5, #0
 800be9e:	da03      	bge.n	800bea8 <_printf_i+0xc8>
 800bea0:	232d      	movs	r3, #45	; 0x2d
 800bea2:	426d      	negs	r5, r5
 800bea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bea8:	230a      	movs	r3, #10
 800beaa:	485e      	ldr	r0, [pc, #376]	; (800c024 <_printf_i+0x244>)
 800beac:	e019      	b.n	800bee2 <_printf_i+0x102>
 800beae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800beb2:	6805      	ldr	r5, [r0, #0]
 800beb4:	600b      	str	r3, [r1, #0]
 800beb6:	bf18      	it	ne
 800beb8:	b22d      	sxthne	r5, r5
 800beba:	e7ef      	b.n	800be9c <_printf_i+0xbc>
 800bebc:	680b      	ldr	r3, [r1, #0]
 800bebe:	6825      	ldr	r5, [r4, #0]
 800bec0:	1d18      	adds	r0, r3, #4
 800bec2:	6008      	str	r0, [r1, #0]
 800bec4:	0628      	lsls	r0, r5, #24
 800bec6:	d501      	bpl.n	800becc <_printf_i+0xec>
 800bec8:	681d      	ldr	r5, [r3, #0]
 800beca:	e002      	b.n	800bed2 <_printf_i+0xf2>
 800becc:	0669      	lsls	r1, r5, #25
 800bece:	d5fb      	bpl.n	800bec8 <_printf_i+0xe8>
 800bed0:	881d      	ldrh	r5, [r3, #0]
 800bed2:	2f6f      	cmp	r7, #111	; 0x6f
 800bed4:	bf0c      	ite	eq
 800bed6:	2308      	moveq	r3, #8
 800bed8:	230a      	movne	r3, #10
 800beda:	4852      	ldr	r0, [pc, #328]	; (800c024 <_printf_i+0x244>)
 800bedc:	2100      	movs	r1, #0
 800bede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bee2:	6866      	ldr	r6, [r4, #4]
 800bee4:	2e00      	cmp	r6, #0
 800bee6:	bfa8      	it	ge
 800bee8:	6821      	ldrge	r1, [r4, #0]
 800beea:	60a6      	str	r6, [r4, #8]
 800beec:	bfa4      	itt	ge
 800beee:	f021 0104 	bicge.w	r1, r1, #4
 800bef2:	6021      	strge	r1, [r4, #0]
 800bef4:	b90d      	cbnz	r5, 800befa <_printf_i+0x11a>
 800bef6:	2e00      	cmp	r6, #0
 800bef8:	d04d      	beq.n	800bf96 <_printf_i+0x1b6>
 800befa:	4616      	mov	r6, r2
 800befc:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf00:	fb03 5711 	mls	r7, r3, r1, r5
 800bf04:	5dc7      	ldrb	r7, [r0, r7]
 800bf06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf0a:	462f      	mov	r7, r5
 800bf0c:	42bb      	cmp	r3, r7
 800bf0e:	460d      	mov	r5, r1
 800bf10:	d9f4      	bls.n	800befc <_printf_i+0x11c>
 800bf12:	2b08      	cmp	r3, #8
 800bf14:	d10b      	bne.n	800bf2e <_printf_i+0x14e>
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	07df      	lsls	r7, r3, #31
 800bf1a:	d508      	bpl.n	800bf2e <_printf_i+0x14e>
 800bf1c:	6923      	ldr	r3, [r4, #16]
 800bf1e:	6861      	ldr	r1, [r4, #4]
 800bf20:	4299      	cmp	r1, r3
 800bf22:	bfde      	ittt	le
 800bf24:	2330      	movle	r3, #48	; 0x30
 800bf26:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf2e:	1b92      	subs	r2, r2, r6
 800bf30:	6122      	str	r2, [r4, #16]
 800bf32:	464b      	mov	r3, r9
 800bf34:	4621      	mov	r1, r4
 800bf36:	4640      	mov	r0, r8
 800bf38:	f8cd a000 	str.w	sl, [sp]
 800bf3c:	aa03      	add	r2, sp, #12
 800bf3e:	f7ff fedf 	bl	800bd00 <_printf_common>
 800bf42:	3001      	adds	r0, #1
 800bf44:	d14c      	bne.n	800bfe0 <_printf_i+0x200>
 800bf46:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4a:	b004      	add	sp, #16
 800bf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf50:	4834      	ldr	r0, [pc, #208]	; (800c024 <_printf_i+0x244>)
 800bf52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf56:	680e      	ldr	r6, [r1, #0]
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf5e:	061f      	lsls	r7, r3, #24
 800bf60:	600e      	str	r6, [r1, #0]
 800bf62:	d514      	bpl.n	800bf8e <_printf_i+0x1ae>
 800bf64:	07d9      	lsls	r1, r3, #31
 800bf66:	bf44      	itt	mi
 800bf68:	f043 0320 	orrmi.w	r3, r3, #32
 800bf6c:	6023      	strmi	r3, [r4, #0]
 800bf6e:	b91d      	cbnz	r5, 800bf78 <_printf_i+0x198>
 800bf70:	6823      	ldr	r3, [r4, #0]
 800bf72:	f023 0320 	bic.w	r3, r3, #32
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	2310      	movs	r3, #16
 800bf7a:	e7af      	b.n	800bedc <_printf_i+0xfc>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	f043 0320 	orr.w	r3, r3, #32
 800bf82:	6023      	str	r3, [r4, #0]
 800bf84:	2378      	movs	r3, #120	; 0x78
 800bf86:	4828      	ldr	r0, [pc, #160]	; (800c028 <_printf_i+0x248>)
 800bf88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf8c:	e7e3      	b.n	800bf56 <_printf_i+0x176>
 800bf8e:	065e      	lsls	r6, r3, #25
 800bf90:	bf48      	it	mi
 800bf92:	b2ad      	uxthmi	r5, r5
 800bf94:	e7e6      	b.n	800bf64 <_printf_i+0x184>
 800bf96:	4616      	mov	r6, r2
 800bf98:	e7bb      	b.n	800bf12 <_printf_i+0x132>
 800bf9a:	680b      	ldr	r3, [r1, #0]
 800bf9c:	6826      	ldr	r6, [r4, #0]
 800bf9e:	1d1d      	adds	r5, r3, #4
 800bfa0:	6960      	ldr	r0, [r4, #20]
 800bfa2:	600d      	str	r5, [r1, #0]
 800bfa4:	0635      	lsls	r5, r6, #24
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	d501      	bpl.n	800bfae <_printf_i+0x1ce>
 800bfaa:	6018      	str	r0, [r3, #0]
 800bfac:	e002      	b.n	800bfb4 <_printf_i+0x1d4>
 800bfae:	0671      	lsls	r1, r6, #25
 800bfb0:	d5fb      	bpl.n	800bfaa <_printf_i+0x1ca>
 800bfb2:	8018      	strh	r0, [r3, #0]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	4616      	mov	r6, r2
 800bfb8:	6123      	str	r3, [r4, #16]
 800bfba:	e7ba      	b.n	800bf32 <_printf_i+0x152>
 800bfbc:	680b      	ldr	r3, [r1, #0]
 800bfbe:	1d1a      	adds	r2, r3, #4
 800bfc0:	600a      	str	r2, [r1, #0]
 800bfc2:	681e      	ldr	r6, [r3, #0]
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	6862      	ldr	r2, [r4, #4]
 800bfca:	f000 fb4b 	bl	800c664 <memchr>
 800bfce:	b108      	cbz	r0, 800bfd4 <_printf_i+0x1f4>
 800bfd0:	1b80      	subs	r0, r0, r6
 800bfd2:	6060      	str	r0, [r4, #4]
 800bfd4:	6863      	ldr	r3, [r4, #4]
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfde:	e7a8      	b.n	800bf32 <_printf_i+0x152>
 800bfe0:	4632      	mov	r2, r6
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	4640      	mov	r0, r8
 800bfe6:	6923      	ldr	r3, [r4, #16]
 800bfe8:	47d0      	blx	sl
 800bfea:	3001      	adds	r0, #1
 800bfec:	d0ab      	beq.n	800bf46 <_printf_i+0x166>
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	079b      	lsls	r3, r3, #30
 800bff2:	d413      	bmi.n	800c01c <_printf_i+0x23c>
 800bff4:	68e0      	ldr	r0, [r4, #12]
 800bff6:	9b03      	ldr	r3, [sp, #12]
 800bff8:	4298      	cmp	r0, r3
 800bffa:	bfb8      	it	lt
 800bffc:	4618      	movlt	r0, r3
 800bffe:	e7a4      	b.n	800bf4a <_printf_i+0x16a>
 800c000:	2301      	movs	r3, #1
 800c002:	4632      	mov	r2, r6
 800c004:	4649      	mov	r1, r9
 800c006:	4640      	mov	r0, r8
 800c008:	47d0      	blx	sl
 800c00a:	3001      	adds	r0, #1
 800c00c:	d09b      	beq.n	800bf46 <_printf_i+0x166>
 800c00e:	3501      	adds	r5, #1
 800c010:	68e3      	ldr	r3, [r4, #12]
 800c012:	9903      	ldr	r1, [sp, #12]
 800c014:	1a5b      	subs	r3, r3, r1
 800c016:	42ab      	cmp	r3, r5
 800c018:	dcf2      	bgt.n	800c000 <_printf_i+0x220>
 800c01a:	e7eb      	b.n	800bff4 <_printf_i+0x214>
 800c01c:	2500      	movs	r5, #0
 800c01e:	f104 0619 	add.w	r6, r4, #25
 800c022:	e7f5      	b.n	800c010 <_printf_i+0x230>
 800c024:	0800cd6d 	.word	0x0800cd6d
 800c028:	0800cd7e 	.word	0x0800cd7e

0800c02c <nan>:
 800c02c:	2000      	movs	r0, #0
 800c02e:	4901      	ldr	r1, [pc, #4]	; (800c034 <nan+0x8>)
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	7ff80000 	.word	0x7ff80000

0800c038 <_sbrk_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	2300      	movs	r3, #0
 800c03c:	4d05      	ldr	r5, [pc, #20]	; (800c054 <_sbrk_r+0x1c>)
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	f7f6 faca 	bl	80025dc <_sbrk>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_sbrk_r+0x1a>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_sbrk_r+0x1a>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	2000163c 	.word	0x2000163c

0800c058 <strncmp>:
 800c058:	b510      	push	{r4, lr}
 800c05a:	b16a      	cbz	r2, 800c078 <strncmp+0x20>
 800c05c:	3901      	subs	r1, #1
 800c05e:	1884      	adds	r4, r0, r2
 800c060:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c064:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c068:	4293      	cmp	r3, r2
 800c06a:	d103      	bne.n	800c074 <strncmp+0x1c>
 800c06c:	42a0      	cmp	r0, r4
 800c06e:	d001      	beq.n	800c074 <strncmp+0x1c>
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1f5      	bne.n	800c060 <strncmp+0x8>
 800c074:	1a98      	subs	r0, r3, r2
 800c076:	bd10      	pop	{r4, pc}
 800c078:	4610      	mov	r0, r2
 800c07a:	e7fc      	b.n	800c076 <strncmp+0x1e>

0800c07c <__swbuf_r>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	460e      	mov	r6, r1
 800c080:	4614      	mov	r4, r2
 800c082:	4605      	mov	r5, r0
 800c084:	b118      	cbz	r0, 800c08e <__swbuf_r+0x12>
 800c086:	6983      	ldr	r3, [r0, #24]
 800c088:	b90b      	cbnz	r3, 800c08e <__swbuf_r+0x12>
 800c08a:	f000 f9e7 	bl	800c45c <__sinit>
 800c08e:	4b21      	ldr	r3, [pc, #132]	; (800c114 <__swbuf_r+0x98>)
 800c090:	429c      	cmp	r4, r3
 800c092:	d12b      	bne.n	800c0ec <__swbuf_r+0x70>
 800c094:	686c      	ldr	r4, [r5, #4]
 800c096:	69a3      	ldr	r3, [r4, #24]
 800c098:	60a3      	str	r3, [r4, #8]
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	071a      	lsls	r2, r3, #28
 800c09e:	d52f      	bpl.n	800c100 <__swbuf_r+0x84>
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	b36b      	cbz	r3, 800c100 <__swbuf_r+0x84>
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	6820      	ldr	r0, [r4, #0]
 800c0a8:	b2f6      	uxtb	r6, r6
 800c0aa:	1ac0      	subs	r0, r0, r3
 800c0ac:	6963      	ldr	r3, [r4, #20]
 800c0ae:	4637      	mov	r7, r6
 800c0b0:	4283      	cmp	r3, r0
 800c0b2:	dc04      	bgt.n	800c0be <__swbuf_r+0x42>
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f000 f93c 	bl	800c334 <_fflush_r>
 800c0bc:	bb30      	cbnz	r0, 800c10c <__swbuf_r+0x90>
 800c0be:	68a3      	ldr	r3, [r4, #8]
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	60a3      	str	r3, [r4, #8]
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	6022      	str	r2, [r4, #0]
 800c0cc:	701e      	strb	r6, [r3, #0]
 800c0ce:	6963      	ldr	r3, [r4, #20]
 800c0d0:	4283      	cmp	r3, r0
 800c0d2:	d004      	beq.n	800c0de <__swbuf_r+0x62>
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	07db      	lsls	r3, r3, #31
 800c0d8:	d506      	bpl.n	800c0e8 <__swbuf_r+0x6c>
 800c0da:	2e0a      	cmp	r6, #10
 800c0dc:	d104      	bne.n	800c0e8 <__swbuf_r+0x6c>
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 f927 	bl	800c334 <_fflush_r>
 800c0e6:	b988      	cbnz	r0, 800c10c <__swbuf_r+0x90>
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ec:	4b0a      	ldr	r3, [pc, #40]	; (800c118 <__swbuf_r+0x9c>)
 800c0ee:	429c      	cmp	r4, r3
 800c0f0:	d101      	bne.n	800c0f6 <__swbuf_r+0x7a>
 800c0f2:	68ac      	ldr	r4, [r5, #8]
 800c0f4:	e7cf      	b.n	800c096 <__swbuf_r+0x1a>
 800c0f6:	4b09      	ldr	r3, [pc, #36]	; (800c11c <__swbuf_r+0xa0>)
 800c0f8:	429c      	cmp	r4, r3
 800c0fa:	bf08      	it	eq
 800c0fc:	68ec      	ldreq	r4, [r5, #12]
 800c0fe:	e7ca      	b.n	800c096 <__swbuf_r+0x1a>
 800c100:	4621      	mov	r1, r4
 800c102:	4628      	mov	r0, r5
 800c104:	f000 f81a 	bl	800c13c <__swsetup_r>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d0cb      	beq.n	800c0a4 <__swbuf_r+0x28>
 800c10c:	f04f 37ff 	mov.w	r7, #4294967295
 800c110:	e7ea      	b.n	800c0e8 <__swbuf_r+0x6c>
 800c112:	bf00      	nop
 800c114:	0800ceb0 	.word	0x0800ceb0
 800c118:	0800ced0 	.word	0x0800ced0
 800c11c:	0800ce90 	.word	0x0800ce90

0800c120 <__ascii_wctomb>:
 800c120:	4603      	mov	r3, r0
 800c122:	4608      	mov	r0, r1
 800c124:	b141      	cbz	r1, 800c138 <__ascii_wctomb+0x18>
 800c126:	2aff      	cmp	r2, #255	; 0xff
 800c128:	d904      	bls.n	800c134 <__ascii_wctomb+0x14>
 800c12a:	228a      	movs	r2, #138	; 0x8a
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	4770      	bx	lr
 800c134:	2001      	movs	r0, #1
 800c136:	700a      	strb	r2, [r1, #0]
 800c138:	4770      	bx	lr
	...

0800c13c <__swsetup_r>:
 800c13c:	4b32      	ldr	r3, [pc, #200]	; (800c208 <__swsetup_r+0xcc>)
 800c13e:	b570      	push	{r4, r5, r6, lr}
 800c140:	681d      	ldr	r5, [r3, #0]
 800c142:	4606      	mov	r6, r0
 800c144:	460c      	mov	r4, r1
 800c146:	b125      	cbz	r5, 800c152 <__swsetup_r+0x16>
 800c148:	69ab      	ldr	r3, [r5, #24]
 800c14a:	b913      	cbnz	r3, 800c152 <__swsetup_r+0x16>
 800c14c:	4628      	mov	r0, r5
 800c14e:	f000 f985 	bl	800c45c <__sinit>
 800c152:	4b2e      	ldr	r3, [pc, #184]	; (800c20c <__swsetup_r+0xd0>)
 800c154:	429c      	cmp	r4, r3
 800c156:	d10f      	bne.n	800c178 <__swsetup_r+0x3c>
 800c158:	686c      	ldr	r4, [r5, #4]
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c160:	0719      	lsls	r1, r3, #28
 800c162:	d42c      	bmi.n	800c1be <__swsetup_r+0x82>
 800c164:	06dd      	lsls	r5, r3, #27
 800c166:	d411      	bmi.n	800c18c <__swsetup_r+0x50>
 800c168:	2309      	movs	r3, #9
 800c16a:	6033      	str	r3, [r6, #0]
 800c16c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c170:	f04f 30ff 	mov.w	r0, #4294967295
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	e03e      	b.n	800c1f6 <__swsetup_r+0xba>
 800c178:	4b25      	ldr	r3, [pc, #148]	; (800c210 <__swsetup_r+0xd4>)
 800c17a:	429c      	cmp	r4, r3
 800c17c:	d101      	bne.n	800c182 <__swsetup_r+0x46>
 800c17e:	68ac      	ldr	r4, [r5, #8]
 800c180:	e7eb      	b.n	800c15a <__swsetup_r+0x1e>
 800c182:	4b24      	ldr	r3, [pc, #144]	; (800c214 <__swsetup_r+0xd8>)
 800c184:	429c      	cmp	r4, r3
 800c186:	bf08      	it	eq
 800c188:	68ec      	ldreq	r4, [r5, #12]
 800c18a:	e7e6      	b.n	800c15a <__swsetup_r+0x1e>
 800c18c:	0758      	lsls	r0, r3, #29
 800c18e:	d512      	bpl.n	800c1b6 <__swsetup_r+0x7a>
 800c190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c192:	b141      	cbz	r1, 800c1a6 <__swsetup_r+0x6a>
 800c194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c198:	4299      	cmp	r1, r3
 800c19a:	d002      	beq.n	800c1a2 <__swsetup_r+0x66>
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7ff fbb1 	bl	800b904 <_free_r>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	6363      	str	r3, [r4, #52]	; 0x34
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	6063      	str	r3, [r4, #4]
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	f043 0308 	orr.w	r3, r3, #8
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	6923      	ldr	r3, [r4, #16]
 800c1c0:	b94b      	cbnz	r3, 800c1d6 <__swsetup_r+0x9a>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1cc:	d003      	beq.n	800c1d6 <__swsetup_r+0x9a>
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f000 fa07 	bl	800c5e4 <__smakebuf_r>
 800c1d6:	89a0      	ldrh	r0, [r4, #12]
 800c1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1dc:	f010 0301 	ands.w	r3, r0, #1
 800c1e0:	d00a      	beq.n	800c1f8 <__swsetup_r+0xbc>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60a3      	str	r3, [r4, #8]
 800c1e6:	6963      	ldr	r3, [r4, #20]
 800c1e8:	425b      	negs	r3, r3
 800c1ea:	61a3      	str	r3, [r4, #24]
 800c1ec:	6923      	ldr	r3, [r4, #16]
 800c1ee:	b943      	cbnz	r3, 800c202 <__swsetup_r+0xc6>
 800c1f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1f4:	d1ba      	bne.n	800c16c <__swsetup_r+0x30>
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	0781      	lsls	r1, r0, #30
 800c1fa:	bf58      	it	pl
 800c1fc:	6963      	ldrpl	r3, [r4, #20]
 800c1fe:	60a3      	str	r3, [r4, #8]
 800c200:	e7f4      	b.n	800c1ec <__swsetup_r+0xb0>
 800c202:	2000      	movs	r0, #0
 800c204:	e7f7      	b.n	800c1f6 <__swsetup_r+0xba>
 800c206:	bf00      	nop
 800c208:	20000194 	.word	0x20000194
 800c20c:	0800ceb0 	.word	0x0800ceb0
 800c210:	0800ced0 	.word	0x0800ced0
 800c214:	0800ce90 	.word	0x0800ce90

0800c218 <abort>:
 800c218:	2006      	movs	r0, #6
 800c21a:	b508      	push	{r3, lr}
 800c21c:	f000 fa64 	bl	800c6e8 <raise>
 800c220:	2001      	movs	r0, #1
 800c222:	f7f6 f968 	bl	80024f6 <_exit>
	...

0800c228 <__sflush_r>:
 800c228:	898a      	ldrh	r2, [r1, #12]
 800c22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22e:	4605      	mov	r5, r0
 800c230:	0710      	lsls	r0, r2, #28
 800c232:	460c      	mov	r4, r1
 800c234:	d458      	bmi.n	800c2e8 <__sflush_r+0xc0>
 800c236:	684b      	ldr	r3, [r1, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc05      	bgt.n	800c248 <__sflush_r+0x20>
 800c23c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dc02      	bgt.n	800c248 <__sflush_r+0x20>
 800c242:	2000      	movs	r0, #0
 800c244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c24a:	2e00      	cmp	r6, #0
 800c24c:	d0f9      	beq.n	800c242 <__sflush_r+0x1a>
 800c24e:	2300      	movs	r3, #0
 800c250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c254:	682f      	ldr	r7, [r5, #0]
 800c256:	602b      	str	r3, [r5, #0]
 800c258:	d032      	beq.n	800c2c0 <__sflush_r+0x98>
 800c25a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	075a      	lsls	r2, r3, #29
 800c260:	d505      	bpl.n	800c26e <__sflush_r+0x46>
 800c262:	6863      	ldr	r3, [r4, #4]
 800c264:	1ac0      	subs	r0, r0, r3
 800c266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c268:	b10b      	cbz	r3, 800c26e <__sflush_r+0x46>
 800c26a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c26c:	1ac0      	subs	r0, r0, r3
 800c26e:	2300      	movs	r3, #0
 800c270:	4602      	mov	r2, r0
 800c272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c274:	4628      	mov	r0, r5
 800c276:	6a21      	ldr	r1, [r4, #32]
 800c278:	47b0      	blx	r6
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	d106      	bne.n	800c28e <__sflush_r+0x66>
 800c280:	6829      	ldr	r1, [r5, #0]
 800c282:	291d      	cmp	r1, #29
 800c284:	d82c      	bhi.n	800c2e0 <__sflush_r+0xb8>
 800c286:	4a2a      	ldr	r2, [pc, #168]	; (800c330 <__sflush_r+0x108>)
 800c288:	40ca      	lsrs	r2, r1
 800c28a:	07d6      	lsls	r6, r2, #31
 800c28c:	d528      	bpl.n	800c2e0 <__sflush_r+0xb8>
 800c28e:	2200      	movs	r2, #0
 800c290:	6062      	str	r2, [r4, #4]
 800c292:	6922      	ldr	r2, [r4, #16]
 800c294:	04d9      	lsls	r1, r3, #19
 800c296:	6022      	str	r2, [r4, #0]
 800c298:	d504      	bpl.n	800c2a4 <__sflush_r+0x7c>
 800c29a:	1c42      	adds	r2, r0, #1
 800c29c:	d101      	bne.n	800c2a2 <__sflush_r+0x7a>
 800c29e:	682b      	ldr	r3, [r5, #0]
 800c2a0:	b903      	cbnz	r3, 800c2a4 <__sflush_r+0x7c>
 800c2a2:	6560      	str	r0, [r4, #84]	; 0x54
 800c2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2a6:	602f      	str	r7, [r5, #0]
 800c2a8:	2900      	cmp	r1, #0
 800c2aa:	d0ca      	beq.n	800c242 <__sflush_r+0x1a>
 800c2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b0:	4299      	cmp	r1, r3
 800c2b2:	d002      	beq.n	800c2ba <__sflush_r+0x92>
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	f7ff fb25 	bl	800b904 <_free_r>
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	6360      	str	r0, [r4, #52]	; 0x34
 800c2be:	e7c1      	b.n	800c244 <__sflush_r+0x1c>
 800c2c0:	6a21      	ldr	r1, [r4, #32]
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	47b0      	blx	r6
 800c2c8:	1c41      	adds	r1, r0, #1
 800c2ca:	d1c7      	bne.n	800c25c <__sflush_r+0x34>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0c4      	beq.n	800c25c <__sflush_r+0x34>
 800c2d2:	2b1d      	cmp	r3, #29
 800c2d4:	d001      	beq.n	800c2da <__sflush_r+0xb2>
 800c2d6:	2b16      	cmp	r3, #22
 800c2d8:	d101      	bne.n	800c2de <__sflush_r+0xb6>
 800c2da:	602f      	str	r7, [r5, #0]
 800c2dc:	e7b1      	b.n	800c242 <__sflush_r+0x1a>
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	e7ad      	b.n	800c244 <__sflush_r+0x1c>
 800c2e8:	690f      	ldr	r7, [r1, #16]
 800c2ea:	2f00      	cmp	r7, #0
 800c2ec:	d0a9      	beq.n	800c242 <__sflush_r+0x1a>
 800c2ee:	0793      	lsls	r3, r2, #30
 800c2f0:	bf18      	it	ne
 800c2f2:	2300      	movne	r3, #0
 800c2f4:	680e      	ldr	r6, [r1, #0]
 800c2f6:	bf08      	it	eq
 800c2f8:	694b      	ldreq	r3, [r1, #20]
 800c2fa:	eba6 0807 	sub.w	r8, r6, r7
 800c2fe:	600f      	str	r7, [r1, #0]
 800c300:	608b      	str	r3, [r1, #8]
 800c302:	f1b8 0f00 	cmp.w	r8, #0
 800c306:	dd9c      	ble.n	800c242 <__sflush_r+0x1a>
 800c308:	4643      	mov	r3, r8
 800c30a:	463a      	mov	r2, r7
 800c30c:	4628      	mov	r0, r5
 800c30e:	6a21      	ldr	r1, [r4, #32]
 800c310:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c312:	47b0      	blx	r6
 800c314:	2800      	cmp	r0, #0
 800c316:	dc06      	bgt.n	800c326 <__sflush_r+0xfe>
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	f04f 30ff 	mov.w	r0, #4294967295
 800c31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	e78e      	b.n	800c244 <__sflush_r+0x1c>
 800c326:	4407      	add	r7, r0
 800c328:	eba8 0800 	sub.w	r8, r8, r0
 800c32c:	e7e9      	b.n	800c302 <__sflush_r+0xda>
 800c32e:	bf00      	nop
 800c330:	20400001 	.word	0x20400001

0800c334 <_fflush_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	690b      	ldr	r3, [r1, #16]
 800c338:	4605      	mov	r5, r0
 800c33a:	460c      	mov	r4, r1
 800c33c:	b913      	cbnz	r3, 800c344 <_fflush_r+0x10>
 800c33e:	2500      	movs	r5, #0
 800c340:	4628      	mov	r0, r5
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	b118      	cbz	r0, 800c34e <_fflush_r+0x1a>
 800c346:	6983      	ldr	r3, [r0, #24]
 800c348:	b90b      	cbnz	r3, 800c34e <_fflush_r+0x1a>
 800c34a:	f000 f887 	bl	800c45c <__sinit>
 800c34e:	4b14      	ldr	r3, [pc, #80]	; (800c3a0 <_fflush_r+0x6c>)
 800c350:	429c      	cmp	r4, r3
 800c352:	d11b      	bne.n	800c38c <_fflush_r+0x58>
 800c354:	686c      	ldr	r4, [r5, #4]
 800c356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0ef      	beq.n	800c33e <_fflush_r+0xa>
 800c35e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c360:	07d0      	lsls	r0, r2, #31
 800c362:	d404      	bmi.n	800c36e <_fflush_r+0x3a>
 800c364:	0599      	lsls	r1, r3, #22
 800c366:	d402      	bmi.n	800c36e <_fflush_r+0x3a>
 800c368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c36a:	f000 f915 	bl	800c598 <__retarget_lock_acquire_recursive>
 800c36e:	4628      	mov	r0, r5
 800c370:	4621      	mov	r1, r4
 800c372:	f7ff ff59 	bl	800c228 <__sflush_r>
 800c376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c378:	4605      	mov	r5, r0
 800c37a:	07da      	lsls	r2, r3, #31
 800c37c:	d4e0      	bmi.n	800c340 <_fflush_r+0xc>
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	059b      	lsls	r3, r3, #22
 800c382:	d4dd      	bmi.n	800c340 <_fflush_r+0xc>
 800c384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c386:	f000 f908 	bl	800c59a <__retarget_lock_release_recursive>
 800c38a:	e7d9      	b.n	800c340 <_fflush_r+0xc>
 800c38c:	4b05      	ldr	r3, [pc, #20]	; (800c3a4 <_fflush_r+0x70>)
 800c38e:	429c      	cmp	r4, r3
 800c390:	d101      	bne.n	800c396 <_fflush_r+0x62>
 800c392:	68ac      	ldr	r4, [r5, #8]
 800c394:	e7df      	b.n	800c356 <_fflush_r+0x22>
 800c396:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <_fflush_r+0x74>)
 800c398:	429c      	cmp	r4, r3
 800c39a:	bf08      	it	eq
 800c39c:	68ec      	ldreq	r4, [r5, #12]
 800c39e:	e7da      	b.n	800c356 <_fflush_r+0x22>
 800c3a0:	0800ceb0 	.word	0x0800ceb0
 800c3a4:	0800ced0 	.word	0x0800ced0
 800c3a8:	0800ce90 	.word	0x0800ce90

0800c3ac <std>:
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ba:	6083      	str	r3, [r0, #8]
 800c3bc:	8181      	strh	r1, [r0, #12]
 800c3be:	6643      	str	r3, [r0, #100]	; 0x64
 800c3c0:	81c2      	strh	r2, [r0, #14]
 800c3c2:	6183      	str	r3, [r0, #24]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	2208      	movs	r2, #8
 800c3c8:	305c      	adds	r0, #92	; 0x5c
 800c3ca:	f7fd fb95 	bl	8009af8 <memset>
 800c3ce:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <std+0x38>)
 800c3d0:	6224      	str	r4, [r4, #32]
 800c3d2:	6263      	str	r3, [r4, #36]	; 0x24
 800c3d4:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <std+0x3c>)
 800c3d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3d8:	4b04      	ldr	r3, [pc, #16]	; (800c3ec <std+0x40>)
 800c3da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3dc:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <std+0x44>)
 800c3de:	6323      	str	r3, [r4, #48]	; 0x30
 800c3e0:	bd10      	pop	{r4, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0800c721 	.word	0x0800c721
 800c3e8:	0800c743 	.word	0x0800c743
 800c3ec:	0800c77b 	.word	0x0800c77b
 800c3f0:	0800c79f 	.word	0x0800c79f

0800c3f4 <_cleanup_r>:
 800c3f4:	4901      	ldr	r1, [pc, #4]	; (800c3fc <_cleanup_r+0x8>)
 800c3f6:	f000 b8af 	b.w	800c558 <_fwalk_reent>
 800c3fa:	bf00      	nop
 800c3fc:	0800c335 	.word	0x0800c335

0800c400 <__sfmoreglue>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	2568      	movs	r5, #104	; 0x68
 800c404:	1e4a      	subs	r2, r1, #1
 800c406:	4355      	muls	r5, r2
 800c408:	460e      	mov	r6, r1
 800c40a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c40e:	f7ff fac5 	bl	800b99c <_malloc_r>
 800c412:	4604      	mov	r4, r0
 800c414:	b140      	cbz	r0, 800c428 <__sfmoreglue+0x28>
 800c416:	2100      	movs	r1, #0
 800c418:	e9c0 1600 	strd	r1, r6, [r0]
 800c41c:	300c      	adds	r0, #12
 800c41e:	60a0      	str	r0, [r4, #8]
 800c420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c424:	f7fd fb68 	bl	8009af8 <memset>
 800c428:	4620      	mov	r0, r4
 800c42a:	bd70      	pop	{r4, r5, r6, pc}

0800c42c <__sfp_lock_acquire>:
 800c42c:	4801      	ldr	r0, [pc, #4]	; (800c434 <__sfp_lock_acquire+0x8>)
 800c42e:	f000 b8b3 	b.w	800c598 <__retarget_lock_acquire_recursive>
 800c432:	bf00      	nop
 800c434:	20001638 	.word	0x20001638

0800c438 <__sfp_lock_release>:
 800c438:	4801      	ldr	r0, [pc, #4]	; (800c440 <__sfp_lock_release+0x8>)
 800c43a:	f000 b8ae 	b.w	800c59a <__retarget_lock_release_recursive>
 800c43e:	bf00      	nop
 800c440:	20001638 	.word	0x20001638

0800c444 <__sinit_lock_acquire>:
 800c444:	4801      	ldr	r0, [pc, #4]	; (800c44c <__sinit_lock_acquire+0x8>)
 800c446:	f000 b8a7 	b.w	800c598 <__retarget_lock_acquire_recursive>
 800c44a:	bf00      	nop
 800c44c:	20001633 	.word	0x20001633

0800c450 <__sinit_lock_release>:
 800c450:	4801      	ldr	r0, [pc, #4]	; (800c458 <__sinit_lock_release+0x8>)
 800c452:	f000 b8a2 	b.w	800c59a <__retarget_lock_release_recursive>
 800c456:	bf00      	nop
 800c458:	20001633 	.word	0x20001633

0800c45c <__sinit>:
 800c45c:	b510      	push	{r4, lr}
 800c45e:	4604      	mov	r4, r0
 800c460:	f7ff fff0 	bl	800c444 <__sinit_lock_acquire>
 800c464:	69a3      	ldr	r3, [r4, #24]
 800c466:	b11b      	cbz	r3, 800c470 <__sinit+0x14>
 800c468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c46c:	f7ff bff0 	b.w	800c450 <__sinit_lock_release>
 800c470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c474:	6523      	str	r3, [r4, #80]	; 0x50
 800c476:	4b13      	ldr	r3, [pc, #76]	; (800c4c4 <__sinit+0x68>)
 800c478:	4a13      	ldr	r2, [pc, #76]	; (800c4c8 <__sinit+0x6c>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c47e:	42a3      	cmp	r3, r4
 800c480:	bf08      	it	eq
 800c482:	2301      	moveq	r3, #1
 800c484:	4620      	mov	r0, r4
 800c486:	bf08      	it	eq
 800c488:	61a3      	streq	r3, [r4, #24]
 800c48a:	f000 f81f 	bl	800c4cc <__sfp>
 800c48e:	6060      	str	r0, [r4, #4]
 800c490:	4620      	mov	r0, r4
 800c492:	f000 f81b 	bl	800c4cc <__sfp>
 800c496:	60a0      	str	r0, [r4, #8]
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 f817 	bl	800c4cc <__sfp>
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2104      	movs	r1, #4
 800c4a2:	60e0      	str	r0, [r4, #12]
 800c4a4:	6860      	ldr	r0, [r4, #4]
 800c4a6:	f7ff ff81 	bl	800c3ac <std>
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	2109      	movs	r1, #9
 800c4ae:	68a0      	ldr	r0, [r4, #8]
 800c4b0:	f7ff ff7c 	bl	800c3ac <std>
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	2112      	movs	r1, #18
 800c4b8:	68e0      	ldr	r0, [r4, #12]
 800c4ba:	f7ff ff77 	bl	800c3ac <std>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	61a3      	str	r3, [r4, #24]
 800c4c2:	e7d1      	b.n	800c468 <__sinit+0xc>
 800c4c4:	0800ca58 	.word	0x0800ca58
 800c4c8:	0800c3f5 	.word	0x0800c3f5

0800c4cc <__sfp>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	4607      	mov	r7, r0
 800c4d0:	f7ff ffac 	bl	800c42c <__sfp_lock_acquire>
 800c4d4:	4b1e      	ldr	r3, [pc, #120]	; (800c550 <__sfp+0x84>)
 800c4d6:	681e      	ldr	r6, [r3, #0]
 800c4d8:	69b3      	ldr	r3, [r6, #24]
 800c4da:	b913      	cbnz	r3, 800c4e2 <__sfp+0x16>
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7ff ffbd 	bl	800c45c <__sinit>
 800c4e2:	3648      	adds	r6, #72	; 0x48
 800c4e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	d503      	bpl.n	800c4f4 <__sfp+0x28>
 800c4ec:	6833      	ldr	r3, [r6, #0]
 800c4ee:	b30b      	cbz	r3, 800c534 <__sfp+0x68>
 800c4f0:	6836      	ldr	r6, [r6, #0]
 800c4f2:	e7f7      	b.n	800c4e4 <__sfp+0x18>
 800c4f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4f8:	b9d5      	cbnz	r5, 800c530 <__sfp+0x64>
 800c4fa:	4b16      	ldr	r3, [pc, #88]	; (800c554 <__sfp+0x88>)
 800c4fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c500:	60e3      	str	r3, [r4, #12]
 800c502:	6665      	str	r5, [r4, #100]	; 0x64
 800c504:	f000 f847 	bl	800c596 <__retarget_lock_init_recursive>
 800c508:	f7ff ff96 	bl	800c438 <__sfp_lock_release>
 800c50c:	2208      	movs	r2, #8
 800c50e:	4629      	mov	r1, r5
 800c510:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c514:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c518:	6025      	str	r5, [r4, #0]
 800c51a:	61a5      	str	r5, [r4, #24]
 800c51c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c520:	f7fd faea 	bl	8009af8 <memset>
 800c524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c52c:	4620      	mov	r0, r4
 800c52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c530:	3468      	adds	r4, #104	; 0x68
 800c532:	e7d9      	b.n	800c4e8 <__sfp+0x1c>
 800c534:	2104      	movs	r1, #4
 800c536:	4638      	mov	r0, r7
 800c538:	f7ff ff62 	bl	800c400 <__sfmoreglue>
 800c53c:	4604      	mov	r4, r0
 800c53e:	6030      	str	r0, [r6, #0]
 800c540:	2800      	cmp	r0, #0
 800c542:	d1d5      	bne.n	800c4f0 <__sfp+0x24>
 800c544:	f7ff ff78 	bl	800c438 <__sfp_lock_release>
 800c548:	230c      	movs	r3, #12
 800c54a:	603b      	str	r3, [r7, #0]
 800c54c:	e7ee      	b.n	800c52c <__sfp+0x60>
 800c54e:	bf00      	nop
 800c550:	0800ca58 	.word	0x0800ca58
 800c554:	ffff0001 	.word	0xffff0001

0800c558 <_fwalk_reent>:
 800c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	4606      	mov	r6, r0
 800c55e:	4688      	mov	r8, r1
 800c560:	2700      	movs	r7, #0
 800c562:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c56a:	f1b9 0901 	subs.w	r9, r9, #1
 800c56e:	d505      	bpl.n	800c57c <_fwalk_reent+0x24>
 800c570:	6824      	ldr	r4, [r4, #0]
 800c572:	2c00      	cmp	r4, #0
 800c574:	d1f7      	bne.n	800c566 <_fwalk_reent+0xe>
 800c576:	4638      	mov	r0, r7
 800c578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57c:	89ab      	ldrh	r3, [r5, #12]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d907      	bls.n	800c592 <_fwalk_reent+0x3a>
 800c582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c586:	3301      	adds	r3, #1
 800c588:	d003      	beq.n	800c592 <_fwalk_reent+0x3a>
 800c58a:	4629      	mov	r1, r5
 800c58c:	4630      	mov	r0, r6
 800c58e:	47c0      	blx	r8
 800c590:	4307      	orrs	r7, r0
 800c592:	3568      	adds	r5, #104	; 0x68
 800c594:	e7e9      	b.n	800c56a <_fwalk_reent+0x12>

0800c596 <__retarget_lock_init_recursive>:
 800c596:	4770      	bx	lr

0800c598 <__retarget_lock_acquire_recursive>:
 800c598:	4770      	bx	lr

0800c59a <__retarget_lock_release_recursive>:
 800c59a:	4770      	bx	lr

0800c59c <__swhatbuf_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	460e      	mov	r6, r1
 800c5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a4:	4614      	mov	r4, r2
 800c5a6:	2900      	cmp	r1, #0
 800c5a8:	461d      	mov	r5, r3
 800c5aa:	b096      	sub	sp, #88	; 0x58
 800c5ac:	da07      	bge.n	800c5be <__swhatbuf_r+0x22>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	602b      	str	r3, [r5, #0]
 800c5b2:	89b3      	ldrh	r3, [r6, #12]
 800c5b4:	061a      	lsls	r2, r3, #24
 800c5b6:	d410      	bmi.n	800c5da <__swhatbuf_r+0x3e>
 800c5b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5bc:	e00e      	b.n	800c5dc <__swhatbuf_r+0x40>
 800c5be:	466a      	mov	r2, sp
 800c5c0:	f000 f914 	bl	800c7ec <_fstat_r>
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	dbf2      	blt.n	800c5ae <__swhatbuf_r+0x12>
 800c5c8:	9a01      	ldr	r2, [sp, #4]
 800c5ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5d2:	425a      	negs	r2, r3
 800c5d4:	415a      	adcs	r2, r3
 800c5d6:	602a      	str	r2, [r5, #0]
 800c5d8:	e7ee      	b.n	800c5b8 <__swhatbuf_r+0x1c>
 800c5da:	2340      	movs	r3, #64	; 0x40
 800c5dc:	2000      	movs	r0, #0
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	b016      	add	sp, #88	; 0x58
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}

0800c5e4 <__smakebuf_r>:
 800c5e4:	898b      	ldrh	r3, [r1, #12]
 800c5e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5e8:	079d      	lsls	r5, r3, #30
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	d507      	bpl.n	800c600 <__smakebuf_r+0x1c>
 800c5f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	6123      	str	r3, [r4, #16]
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	6163      	str	r3, [r4, #20]
 800c5fc:	b002      	add	sp, #8
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}
 800c600:	466a      	mov	r2, sp
 800c602:	ab01      	add	r3, sp, #4
 800c604:	f7ff ffca 	bl	800c59c <__swhatbuf_r>
 800c608:	9900      	ldr	r1, [sp, #0]
 800c60a:	4605      	mov	r5, r0
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7ff f9c5 	bl	800b99c <_malloc_r>
 800c612:	b948      	cbnz	r0, 800c628 <__smakebuf_r+0x44>
 800c614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c618:	059a      	lsls	r2, r3, #22
 800c61a:	d4ef      	bmi.n	800c5fc <__smakebuf_r+0x18>
 800c61c:	f023 0303 	bic.w	r3, r3, #3
 800c620:	f043 0302 	orr.w	r3, r3, #2
 800c624:	81a3      	strh	r3, [r4, #12]
 800c626:	e7e3      	b.n	800c5f0 <__smakebuf_r+0xc>
 800c628:	4b0d      	ldr	r3, [pc, #52]	; (800c660 <__smakebuf_r+0x7c>)
 800c62a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	6020      	str	r0, [r4, #0]
 800c630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c634:	81a3      	strh	r3, [r4, #12]
 800c636:	9b00      	ldr	r3, [sp, #0]
 800c638:	6120      	str	r0, [r4, #16]
 800c63a:	6163      	str	r3, [r4, #20]
 800c63c:	9b01      	ldr	r3, [sp, #4]
 800c63e:	b15b      	cbz	r3, 800c658 <__smakebuf_r+0x74>
 800c640:	4630      	mov	r0, r6
 800c642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c646:	f000 f8e3 	bl	800c810 <_isatty_r>
 800c64a:	b128      	cbz	r0, 800c658 <__smakebuf_r+0x74>
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	f023 0303 	bic.w	r3, r3, #3
 800c652:	f043 0301 	orr.w	r3, r3, #1
 800c656:	81a3      	strh	r3, [r4, #12]
 800c658:	89a0      	ldrh	r0, [r4, #12]
 800c65a:	4305      	orrs	r5, r0
 800c65c:	81a5      	strh	r5, [r4, #12]
 800c65e:	e7cd      	b.n	800c5fc <__smakebuf_r+0x18>
 800c660:	0800c3f5 	.word	0x0800c3f5

0800c664 <memchr>:
 800c664:	4603      	mov	r3, r0
 800c666:	b510      	push	{r4, lr}
 800c668:	b2c9      	uxtb	r1, r1
 800c66a:	4402      	add	r2, r0
 800c66c:	4293      	cmp	r3, r2
 800c66e:	4618      	mov	r0, r3
 800c670:	d101      	bne.n	800c676 <memchr+0x12>
 800c672:	2000      	movs	r0, #0
 800c674:	e003      	b.n	800c67e <memchr+0x1a>
 800c676:	7804      	ldrb	r4, [r0, #0]
 800c678:	3301      	adds	r3, #1
 800c67a:	428c      	cmp	r4, r1
 800c67c:	d1f6      	bne.n	800c66c <memchr+0x8>
 800c67e:	bd10      	pop	{r4, pc}

0800c680 <__malloc_lock>:
 800c680:	4801      	ldr	r0, [pc, #4]	; (800c688 <__malloc_lock+0x8>)
 800c682:	f7ff bf89 	b.w	800c598 <__retarget_lock_acquire_recursive>
 800c686:	bf00      	nop
 800c688:	20001634 	.word	0x20001634

0800c68c <__malloc_unlock>:
 800c68c:	4801      	ldr	r0, [pc, #4]	; (800c694 <__malloc_unlock+0x8>)
 800c68e:	f7ff bf84 	b.w	800c59a <__retarget_lock_release_recursive>
 800c692:	bf00      	nop
 800c694:	20001634 	.word	0x20001634

0800c698 <_raise_r>:
 800c698:	291f      	cmp	r1, #31
 800c69a:	b538      	push	{r3, r4, r5, lr}
 800c69c:	4604      	mov	r4, r0
 800c69e:	460d      	mov	r5, r1
 800c6a0:	d904      	bls.n	800c6ac <_raise_r+0x14>
 800c6a2:	2316      	movs	r3, #22
 800c6a4:	6003      	str	r3, [r0, #0]
 800c6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6aa:	bd38      	pop	{r3, r4, r5, pc}
 800c6ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6ae:	b112      	cbz	r2, 800c6b6 <_raise_r+0x1e>
 800c6b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6b4:	b94b      	cbnz	r3, 800c6ca <_raise_r+0x32>
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f000 f830 	bl	800c71c <_getpid_r>
 800c6bc:	462a      	mov	r2, r5
 800c6be:	4601      	mov	r1, r0
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c6:	f000 b817 	b.w	800c6f8 <_kill_r>
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d00a      	beq.n	800c6e4 <_raise_r+0x4c>
 800c6ce:	1c59      	adds	r1, r3, #1
 800c6d0:	d103      	bne.n	800c6da <_raise_r+0x42>
 800c6d2:	2316      	movs	r3, #22
 800c6d4:	6003      	str	r3, [r0, #0]
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	e7e7      	b.n	800c6aa <_raise_r+0x12>
 800c6da:	2400      	movs	r4, #0
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6e2:	4798      	blx	r3
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e7e0      	b.n	800c6aa <_raise_r+0x12>

0800c6e8 <raise>:
 800c6e8:	4b02      	ldr	r3, [pc, #8]	; (800c6f4 <raise+0xc>)
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	f7ff bfd3 	b.w	800c698 <_raise_r>
 800c6f2:	bf00      	nop
 800c6f4:	20000194 	.word	0x20000194

0800c6f8 <_kill_r>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	4d06      	ldr	r5, [pc, #24]	; (800c718 <_kill_r+0x20>)
 800c6fe:	4604      	mov	r4, r0
 800c700:	4608      	mov	r0, r1
 800c702:	4611      	mov	r1, r2
 800c704:	602b      	str	r3, [r5, #0]
 800c706:	f7f5 fee6 	bl	80024d6 <_kill>
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	d102      	bne.n	800c714 <_kill_r+0x1c>
 800c70e:	682b      	ldr	r3, [r5, #0]
 800c710:	b103      	cbz	r3, 800c714 <_kill_r+0x1c>
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	bd38      	pop	{r3, r4, r5, pc}
 800c716:	bf00      	nop
 800c718:	2000163c 	.word	0x2000163c

0800c71c <_getpid_r>:
 800c71c:	f7f5 bed4 	b.w	80024c8 <_getpid>

0800c720 <__sread>:
 800c720:	b510      	push	{r4, lr}
 800c722:	460c      	mov	r4, r1
 800c724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c728:	f000 f894 	bl	800c854 <_read_r>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	bfab      	itete	ge
 800c730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c732:	89a3      	ldrhlt	r3, [r4, #12]
 800c734:	181b      	addge	r3, r3, r0
 800c736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c73a:	bfac      	ite	ge
 800c73c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c73e:	81a3      	strhlt	r3, [r4, #12]
 800c740:	bd10      	pop	{r4, pc}

0800c742 <__swrite>:
 800c742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c746:	461f      	mov	r7, r3
 800c748:	898b      	ldrh	r3, [r1, #12]
 800c74a:	4605      	mov	r5, r0
 800c74c:	05db      	lsls	r3, r3, #23
 800c74e:	460c      	mov	r4, r1
 800c750:	4616      	mov	r6, r2
 800c752:	d505      	bpl.n	800c760 <__swrite+0x1e>
 800c754:	2302      	movs	r3, #2
 800c756:	2200      	movs	r2, #0
 800c758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c75c:	f000 f868 	bl	800c830 <_lseek_r>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	4632      	mov	r2, r6
 800c764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c768:	81a3      	strh	r3, [r4, #12]
 800c76a:	4628      	mov	r0, r5
 800c76c:	463b      	mov	r3, r7
 800c76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c776:	f000 b817 	b.w	800c7a8 <_write_r>

0800c77a <__sseek>:
 800c77a:	b510      	push	{r4, lr}
 800c77c:	460c      	mov	r4, r1
 800c77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c782:	f000 f855 	bl	800c830 <_lseek_r>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	bf15      	itete	ne
 800c78c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c78e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c796:	81a3      	strheq	r3, [r4, #12]
 800c798:	bf18      	it	ne
 800c79a:	81a3      	strhne	r3, [r4, #12]
 800c79c:	bd10      	pop	{r4, pc}

0800c79e <__sclose>:
 800c79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a2:	f000 b813 	b.w	800c7cc <_close_r>
	...

0800c7a8 <_write_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	4608      	mov	r0, r1
 800c7ae:	4611      	mov	r1, r2
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	4d05      	ldr	r5, [pc, #20]	; (800c7c8 <_write_r+0x20>)
 800c7b4:	602a      	str	r2, [r5, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	f7f5 fec4 	bl	8002544 <_write>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d102      	bne.n	800c7c6 <_write_r+0x1e>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	b103      	cbz	r3, 800c7c6 <_write_r+0x1e>
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	2000163c 	.word	0x2000163c

0800c7cc <_close_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4d05      	ldr	r5, [pc, #20]	; (800c7e8 <_close_r+0x1c>)
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	4608      	mov	r0, r1
 800c7d6:	602b      	str	r3, [r5, #0]
 800c7d8:	f7f5 fed0 	bl	800257c <_close>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d102      	bne.n	800c7e6 <_close_r+0x1a>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	b103      	cbz	r3, 800c7e6 <_close_r+0x1a>
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	2000163c 	.word	0x2000163c

0800c7ec <_fstat_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	4d06      	ldr	r5, [pc, #24]	; (800c80c <_fstat_r+0x20>)
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	f7f5 feca 	bl	8002592 <_fstat>
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	d102      	bne.n	800c808 <_fstat_r+0x1c>
 800c802:	682b      	ldr	r3, [r5, #0]
 800c804:	b103      	cbz	r3, 800c808 <_fstat_r+0x1c>
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	bd38      	pop	{r3, r4, r5, pc}
 800c80a:	bf00      	nop
 800c80c:	2000163c 	.word	0x2000163c

0800c810 <_isatty_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	2300      	movs	r3, #0
 800c814:	4d05      	ldr	r5, [pc, #20]	; (800c82c <_isatty_r+0x1c>)
 800c816:	4604      	mov	r4, r0
 800c818:	4608      	mov	r0, r1
 800c81a:	602b      	str	r3, [r5, #0]
 800c81c:	f7f5 fec8 	bl	80025b0 <_isatty>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_isatty_r+0x1a>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_isatty_r+0x1a>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	2000163c 	.word	0x2000163c

0800c830 <_lseek_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	4608      	mov	r0, r1
 800c836:	4611      	mov	r1, r2
 800c838:	2200      	movs	r2, #0
 800c83a:	4d05      	ldr	r5, [pc, #20]	; (800c850 <_lseek_r+0x20>)
 800c83c:	602a      	str	r2, [r5, #0]
 800c83e:	461a      	mov	r2, r3
 800c840:	f7f5 fec0 	bl	80025c4 <_lseek>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d102      	bne.n	800c84e <_lseek_r+0x1e>
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	b103      	cbz	r3, 800c84e <_lseek_r+0x1e>
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	bd38      	pop	{r3, r4, r5, pc}
 800c850:	2000163c 	.word	0x2000163c

0800c854 <_read_r>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	2200      	movs	r2, #0
 800c85e:	4d05      	ldr	r5, [pc, #20]	; (800c874 <_read_r+0x20>)
 800c860:	602a      	str	r2, [r5, #0]
 800c862:	461a      	mov	r2, r3
 800c864:	f7f5 fe51 	bl	800250a <_read>
 800c868:	1c43      	adds	r3, r0, #1
 800c86a:	d102      	bne.n	800c872 <_read_r+0x1e>
 800c86c:	682b      	ldr	r3, [r5, #0]
 800c86e:	b103      	cbz	r3, 800c872 <_read_r+0x1e>
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	bd38      	pop	{r3, r4, r5, pc}
 800c874:	2000163c 	.word	0x2000163c

0800c878 <_init>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	bf00      	nop
 800c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87e:	bc08      	pop	{r3}
 800c880:	469e      	mov	lr, r3
 800c882:	4770      	bx	lr

0800c884 <_fini>:
 800c884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c886:	bf00      	nop
 800c888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88a:	bc08      	pop	{r3}
 800c88c:	469e      	mov	lr, r3
 800c88e:	4770      	bx	lr
